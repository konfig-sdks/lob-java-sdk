/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 
 *
 * The version of the OpenAPI document: 1.19.28
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AddressesListBeforeAfterParameterAllOf;
import com.konfigthis.client.model.Campaign;
import com.konfigthis.client.model.CampaignDeleteResponse;
import com.konfigthis.client.model.CampaignUpdatable;
import com.konfigthis.client.model.CampaignWritable;
import com.konfigthis.client.model.CampaignsListResponse;
import com.konfigthis.client.model.CmpScheduleType;
import com.konfigthis.client.model.CmpUseType;
import com.konfigthis.client.model.Error;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CampaignsApi
 */
@Disabled
public class CampaignsApiTest {

    private static CampaignsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new CampaignsApi(apiClient);
    }

    /**
     * Create
     *
     * Creates a new campaign with the provided properties. See how to launch your first campaign [here](https://help.lob.com/print-and-mail/building-a-mail-strategy/campaign-or-triggered-sends/launch-your-first-campaign).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTest() throws ApiException {
        String name = null;
        CmpScheduleType scheduleType = null;
        CmpUseType useType = null;
        String description = null;
        String billingGroupId = null;
        OffsetDateTime targetDeliveryDate = null;
        OffsetDateTime sendDate = null;
        Integer cancelWindowCampaignMinutes = null;
        Map<String, String> metadata = null;
        Boolean autoCancelIfNcoa = null;
        String xLangOutput = null;
        Campaign response = api.create(name, scheduleType, useType)
                .description(description)
                .billingGroupId(billingGroupId)
                .targetDeliveryDate(targetDeliveryDate)
                .sendDate(sendDate)
                .cancelWindowCampaignMinutes(cancelWindowCampaignMinutes)
                .metadata(metadata)
                .autoCancelIfNcoa(autoCancelIfNcoa)
                .xLangOutput(xLangOutput)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete
     *
     * Delete an existing campaign. You need only supply the unique identifier that was returned upon campaign creation. Deleting a campaign also deletes any associated mail pieces that have been created but not sent. A campaign&#39;s &#x60;send_date&#x60; matches its associated mail pieces&#39; &#x60;send_date&#x60;s.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTest() throws ApiException {
        String cmpId = null;
        CampaignDeleteResponse response = api.delete(cmpId)
                .execute();
        // TODO: test validations
    }

    /**
     * List
     *
     * Returns a list of your campaigns. The campaigns are returned sorted by creation date, with the most recently created campaigns appearing first.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTest() throws ApiException {
        Integer limit = null;
        List<String> include = null;
        AddressesListBeforeAfterParameter beforeAfter = null;
        CampaignsListResponse response = api.list()
                .limit(limit)
                .include(include)
                .beforeAfter(beforeAfter)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve
     *
     * Retrieves the details of an existing campaign. You need only supply the unique campaign identifier that was returned upon campaign creation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveTest() throws ApiException {
        String cmpId = null;
        Campaign response = api.retrieve(cmpId)
                .execute();
        // TODO: test validations
    }

    /**
     * Send Campaign
     *
     * Sends a campaign. You need only supply the unique campaign identifier that was returned upon campaign creation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendTest() throws ApiException {
        String cmpId = null;
        Campaign response = api.send(cmpId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update
     *
     * Update the details of an existing campaign. You need only supply the unique identifier that was returned upon campaign creation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTest() throws ApiException {
        String cmpId = null;
        String description = null;
        String name = null;
        CmpScheduleType scheduleType = null;
        OffsetDateTime targetDeliveryDate = null;
        OffsetDateTime sendDate = null;
        Integer cancelWindowCampaignMinutes = null;
        Map<String, String> metadata = null;
        Boolean isDraft = null;
        CmpUseType useType = null;
        Boolean autoCancelIfNcoa = null;
        Campaign response = api.update(cmpId)
                .description(description)
                .name(name)
                .scheduleType(scheduleType)
                .targetDeliveryDate(targetDeliveryDate)
                .sendDate(sendDate)
                .cancelWindowCampaignMinutes(cancelWindowCampaignMinutes)
                .metadata(metadata)
                .isDraft(isDraft)
                .useType(useType)
                .autoCancelIfNcoa(autoCancelIfNcoa)
                .execute();
        // TODO: test validations
    }

}

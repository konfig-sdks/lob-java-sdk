/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 
 *
 * The version of the OpenAPI document: 1.19.28
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.DomainResponse;
import com.konfigthis.client.model.Domains;
import com.konfigthis.client.model.DomainsResponse;
import com.konfigthis.client.model.Error;
import com.konfigthis.client.model.LinkResponse;
import com.konfigthis.client.model.LinkSingle;
import com.konfigthis.client.model.LinksResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UrlShortenerApi
 */
@Disabled
public class UrlShortenerApiTest {

    private static UrlShortenerApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new UrlShortenerApi(apiClient);
    }

    /**
     * Bulk Create Links
     *
     * Shortens a list of links in a single request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bulkShortenLinksTest() throws ApiException {
        LinksResponse response = api.bulkShortenLinks()
                .execute();
        // TODO: test validations
    }

    /**
     * Create Domain
     *
     * Add a new custom domain that can be used to create custom links.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTest() throws ApiException {
        String domain = null;
        DomainResponse response = api.create(domain)
                .execute();
        // TODO: test validations
    }

    /**
     * Create Link
     *
     * Given a long URL, shorten your URL either by using a custom domain or Lob&#39;s own short domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void create_0Test() throws ApiException {
        String redirectLink = null;
        String domain = null;
        String slug = null;
        Map<String, String> metadataTag = null;
        String billingGroupId = null;
        LinkResponse response = api.create_0(redirectLink)
                .domain(domain)
                .slug(slug)
                .metadataTag(metadataTag)
                .billingGroupId(billingGroupId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a Domain
     *
     * Delete a registered domain. This operation can only be performed if all associated links with the domain are deleted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTest() throws ApiException {
        String domainId = null;
        DomainResponse response = api.delete(domainId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete all links for a domain
     *
     * Delete all associated links for a domain
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAllLinksForDomainTest() throws ApiException {
        String domainId = null;
        DomainsResponse response = api.deleteAllLinksForDomain(domainId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete Link
     *
     * Delete the shortened link.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void delete_0Test() throws ApiException {
        String linkId = null;
        LinkResponse response = api.delete_0(linkId)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve a domain
     *
     * Retrieve details for a single domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTest() throws ApiException {
        String domainId = null;
        DomainResponse response = api.get(domainId)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve a link
     *
     * Retrievs a single shortened link.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void get_0Test() throws ApiException {
        String linkId = null;
        LinkResponse response = api.get_0(linkId)
                .execute();
        // TODO: test validations
    }

    /**
     * List all domains
     *
     * Retrieve a list of all created domains.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTest() throws ApiException {
        DomainsResponse response = api.list()
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve all shortened links
     *
     * Retrieves a list of shortened links. The list is sorted by  creation date, with the most recently created appearing first.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void list_0Test() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        List<String> include = null;
        Map<String, String> dateCreated = null;
        Map<String, String> metadata = null;
        String campaignId = null;
        Boolean clicked = null;
        String billingGroupId = null;
        LinksResponse response = api.list_0()
                .limit(limit)
                .offset(offset)
                .include(include)
                .dateCreated(dateCreated)
                .metadata(metadata)
                .campaignId(campaignId)
                .clicked(clicked)
                .billingGroupId(billingGroupId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a Link
     *
     * Update any of the properties of a shortened link.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTest() throws ApiException {
        String redirectLink = null;
        String linkId = null;
        String domain = null;
        String slug = null;
        Map<String, String> metadataTag = null;
        String billingGroupId = null;
        LinkResponse response = api.update(redirectLink, linkId)
                .domain(domain)
                .slug(slug)
                .metadataTag(metadataTag)
                .billingGroupId(billingGroupId)
                .execute();
        // TODO: test validations
    }

}

/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 
 *
 * The version of the OpenAPI document: 1.19.28
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AddressesListBeforeAfterParameterAllOf;
import com.konfigthis.client.model.BankAccount;
import com.konfigthis.client.model.BankAccountBase;
import com.konfigthis.client.model.BankAccountVerify;
import com.konfigthis.client.model.BankAccountsGetListResponse;
import com.konfigthis.client.model.BankDeletion;
import com.konfigthis.client.model.Error;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BankAccountsApi
 */
@Disabled
public class BankAccountsApiTest {

    private static BankAccountsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new BankAccountsApi(apiClient);
    }

    /**
     * Create
     *
     * Creates a new bank account with the provided properties. Bank accounts created in live mode will need to be verified via micro deposits before being able to send live checks. The deposits will appear in the bank account in 2-3 business days and have the description \&quot;VERIFICATION\&quot;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewBankAccountTest() throws ApiException {
        String routingNumber = null;
        String accountNumber = null;
        String accountType = null;
        String signatory = null;
        String description = null;
        String checkTemplate = null;
        String fractionalRoutingNumber = null;
        String city = null;
        String state = null;
        String zipcode = null;
        Map<String, String> metadata = null;
        BankAccount response = api.createNewBankAccount(routingNumber, accountNumber, accountType, signatory)
                .description(description)
                .checkTemplate(checkTemplate)
                .fractionalRoutingNumber(fractionalRoutingNumber)
                .city(city)
                .state(state)
                .zipcode(zipcode)
                .metadata(metadata)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete
     *
     * Permanently deletes a bank account. It cannot be undone.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBankAccountTest() throws ApiException {
        BankId bankId = null;
        BankDeletion response = api.deleteBankAccount(bankId)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve
     *
     * Retrieves the details of an existing bank account. You need only supply the unique bank account identifier that was returned upon bank account creation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDetailsTest() throws ApiException {
        BankId bankId = null;
        BankAccount response = api.getDetails(bankId)
                .execute();
        // TODO: test validations
    }

    /**
     * List
     *
     * Returns a list of your bank accounts. The bank accounts are returned sorted by creation date, with the most recently created bank accounts appearing first.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getListTest() throws ApiException {
        Integer limit = null;
        AddressesListBeforeAfterParameter beforeAfter = null;
        List<String> include = null;
        Map<String, String> dateCreated = null;
        Map<String, String> metadata = null;
        BankAccountsGetListResponse response = api.getList()
                .limit(limit)
                .beforeAfter(beforeAfter)
                .include(include)
                .dateCreated(dateCreated)
                .metadata(metadata)
                .execute();
        // TODO: test validations
    }

    /**
     * Verify
     *
     * Verify a bank account in order to create a check.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void verifyBankAccountTest() throws ApiException {
        List<Integer> amounts = null;
        BankId bankId = null;
        BankAccount response = api.verifyBankAccount(amounts, bankId)
                .execute();
        // TODO: test validations
    }

}

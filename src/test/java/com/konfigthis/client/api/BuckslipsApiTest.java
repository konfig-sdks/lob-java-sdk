/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 
 *
 * The version of the OpenAPI document: 1.19.28
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AddressesListBeforeAfterParameterAllOf;
import com.konfigthis.client.model.Buckslip;
import com.konfigthis.client.model.BuckslipDeletion;
import com.konfigthis.client.model.BuckslipEditable;
import com.konfigthis.client.model.BuckslipUpdatable;
import com.konfigthis.client.model.BuckslipsListResponse;
import com.konfigthis.client.model.Error;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BuckslipsApi
 */
@Disabled
public class BuckslipsApiTest {

    private static BuckslipsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new BuckslipsApi(apiClient);
    }

    /**
     * Create
     *
     * Creates a new buckslip given information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTest() throws ApiException {
        String description = null;
        String size = null;
        Object front = null;
        Object back = null;
        Buckslip response = api.create()
                .description(description)
                .size(size)
                .front(front)
                .back(back)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete
     *
     * Delete an existing buckslip. You need only supply the unique identifier that was returned upon buckslip creation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTest() throws ApiException {
        String buckslipId = null;
        BuckslipDeletion response = api.delete(buckslipId)
                .execute();
        // TODO: test validations
    }

    /**
     * List
     *
     * Returns a list of your buckslips. The buckslips are returned sorted by creation date, with the most recently created buckslips appearing first.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTest() throws ApiException {
        Integer limit = null;
        AddressesListBeforeAfterParameter beforeAfter = null;
        List<String> include = null;
        BuckslipsListResponse response = api.list()
                .limit(limit)
                .beforeAfter(beforeAfter)
                .include(include)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve
     *
     * Retrieves the details of an existing buckslip. You need only supply the unique customer identifier that was returned upon buckslip creation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveTest() throws ApiException {
        String buckslipId = null;
        Buckslip response = api.retrieve(buckslipId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update
     *
     * Update the details of an existing buckslip. You need only supply the unique identifier that was returned upon buckslip creation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTest() throws ApiException {
        String buckslipId = null;
        String description = null;
        Boolean autoReorder = null;
        Double reorderQuantity = null;
        Buckslip response = api.update(buckslipId)
                .description(description)
                .autoReorder(autoReorder)
                .reorderQuantity(reorderQuantity)
                .execute();
        // TODO: test validations
    }

}

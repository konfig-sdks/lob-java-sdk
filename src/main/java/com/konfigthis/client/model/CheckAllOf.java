/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 
 *
 * The version of the OpenAPI document: 1.19.28
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.BankAccount;
import com.konfigthis.client.model.ChkUseType;
import com.konfigthis.client.model.FailureReason;
import com.konfigthis.client.model.Status;
import com.konfigthis.client.model.Thumbnail;
import com.konfigthis.client.model.ToAddressUsChk;
import com.konfigthis.client.model.TrackingEventNormal;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CheckAllOf
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CheckAllOf {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Float amount;

  public static final String SERIALIZED_NAME_BANK_ACCOUNT = "bank_account";
  @SerializedName(SERIALIZED_NAME_BANK_ACCOUNT)
  private BankAccount bankAccount;

  public static final String SERIALIZED_NAME_CHECK_BOTTOM_TEMPLATE_ID = "check_bottom_template_id";
  @SerializedName(SERIALIZED_NAME_CHECK_BOTTOM_TEMPLATE_ID)
  private Object checkBottomTemplateId;

  public static final String SERIALIZED_NAME_ATTACHMENT_TEMPLATE_ID = "attachment_template_id";
  @SerializedName(SERIALIZED_NAME_ATTACHMENT_TEMPLATE_ID)
  private Object attachmentTemplateId;

  public static final String SERIALIZED_NAME_CHECK_BOTTOM_TEMPLATE_VERSION_ID = "check_bottom_template_version_id";
  @SerializedName(SERIALIZED_NAME_CHECK_BOTTOM_TEMPLATE_VERSION_ID)
  private String checkBottomTemplateVersionId;

  public static final String SERIALIZED_NAME_ATTACHMENT_TEMPLATE_VERSION_ID = "attachment_template_version_id";
  @SerializedName(SERIALIZED_NAME_ATTACHMENT_TEMPLATE_VERSION_ID)
  private String attachmentTemplateVersionId;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private ToAddressUsChk to;

  /**
   * Gets or Sets carrier
   */
  @JsonAdapter(CarrierEnum.Adapter.class)
 public enum CarrierEnum {
    USPS("USPS");

    private String value;

    CarrierEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CarrierEnum fromValue(String value) {
      for (CarrierEnum b : CarrierEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CarrierEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CarrierEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CarrierEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CarrierEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CARRIER = "carrier";
  @SerializedName(SERIALIZED_NAME_CARRIER)
  private CarrierEnum carrier = CarrierEnum.USPS;

  public static final String SERIALIZED_NAME_THUMBNAILS = "thumbnails";
  @SerializedName(SERIALIZED_NAME_THUMBNAILS)
  private List<Thumbnail> thumbnails = null;

  public static final String SERIALIZED_NAME_EXPECTED_DELIVERY_DATE = "expected_delivery_date";
  @SerializedName(SERIALIZED_NAME_EXPECTED_DELIVERY_DATE)
  private LocalDate expectedDeliveryDate;

  public static final String SERIALIZED_NAME_TRACKING_EVENTS = "tracking_events";
  @SerializedName(SERIALIZED_NAME_TRACKING_EVENTS)
  private List<TrackingEventNormal> trackingEvents = null;

  public static final String SERIALIZED_NAME_USE_TYPE = "use_type";
  @SerializedName(SERIALIZED_NAME_USE_TYPE)
  private ChkUseType useType;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Status status;

  public static final String SERIALIZED_NAME_FAILURE_REASON = "failure_reason";
  @SerializedName(SERIALIZED_NAME_FAILURE_REASON)
  private FailureReason failureReason;

  /**
   * Value is resource type.
   */
  @JsonAdapter(ObjectEnum.Adapter.class)
 public enum ObjectEnum {
    CHECK("check");

    private String value;

    ObjectEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ObjectEnum fromValue(String value) {
      for (ObjectEnum b : ObjectEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ObjectEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ObjectEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ObjectEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ObjectEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  private ObjectEnum _object = ObjectEnum.CHECK;

  public static final String SERIALIZED_NAME_DATE_CREATED = "date_created";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_MODIFIED = "date_modified";
  @SerializedName(SERIALIZED_NAME_DATE_MODIFIED)
  private OffsetDateTime dateModified;

  public static final String SERIALIZED_NAME_DELETED = "deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  private Boolean deleted;

  public CheckAllOf() {
  }

  public CheckAllOf id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Unique identifier prefixed with &#x60;chk_&#x60;.
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Unique identifier prefixed with `chk_`.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public CheckAllOf amount(Float amount) {
    
    if (amount != null && amount > 999999.99) {
      throw new IllegalArgumentException("Invalid value for amount. Must be less than or equal to 999999.99.");
    }
    
    
    this.amount = amount;
    return this;
  }

   /**
   * The payment amount to be sent in US dollars.
   * maximum: 999999.99
   * @return amount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The payment amount to be sent in US dollars.")

  public Float getAmount() {
    return amount;
  }


  public void setAmount(Float amount) {
    
    if (amount != null && amount > 999999.99) {
      throw new IllegalArgumentException("Invalid value for amount. Must be less than or equal to 999999.99.");
    }
    
    this.amount = amount;
  }


  public CheckAllOf bankAccount(BankAccount bankAccount) {
    
    
    
    
    this.bankAccount = bankAccount;
    return this;
  }

   /**
   * Get bankAccount
   * @return bankAccount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public BankAccount getBankAccount() {
    return bankAccount;
  }


  public void setBankAccount(BankAccount bankAccount) {
    
    
    
    this.bankAccount = bankAccount;
  }


  public CheckAllOf checkBottomTemplateId(Object checkBottomTemplateId) {
    
    
    
    
    this.checkBottomTemplateId = checkBottomTemplateId;
    return this;
  }

   /**
   * Get checkBottomTemplateId
   * @return checkBottomTemplateId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getCheckBottomTemplateId() {
    return checkBottomTemplateId;
  }


  public void setCheckBottomTemplateId(Object checkBottomTemplateId) {
    
    
    
    this.checkBottomTemplateId = checkBottomTemplateId;
  }


  public CheckAllOf attachmentTemplateId(Object attachmentTemplateId) {
    
    
    
    
    this.attachmentTemplateId = attachmentTemplateId;
    return this;
  }

   /**
   * Get attachmentTemplateId
   * @return attachmentTemplateId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getAttachmentTemplateId() {
    return attachmentTemplateId;
  }


  public void setAttachmentTemplateId(Object attachmentTemplateId) {
    
    
    
    this.attachmentTemplateId = attachmentTemplateId;
  }


  public CheckAllOf checkBottomTemplateVersionId(String checkBottomTemplateVersionId) {
    
    
    
    
    this.checkBottomTemplateVersionId = checkBottomTemplateVersionId;
    return this;
  }

   /**
   * Get checkBottomTemplateVersionId
   * @return checkBottomTemplateVersionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCheckBottomTemplateVersionId() {
    return checkBottomTemplateVersionId;
  }


  public void setCheckBottomTemplateVersionId(String checkBottomTemplateVersionId) {
    
    
    
    this.checkBottomTemplateVersionId = checkBottomTemplateVersionId;
  }


  public CheckAllOf attachmentTemplateVersionId(String attachmentTemplateVersionId) {
    
    
    
    
    this.attachmentTemplateVersionId = attachmentTemplateVersionId;
    return this;
  }

   /**
   * Get attachmentTemplateVersionId
   * @return attachmentTemplateVersionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAttachmentTemplateVersionId() {
    return attachmentTemplateVersionId;
  }


  public void setAttachmentTemplateVersionId(String attachmentTemplateVersionId) {
    
    
    
    this.attachmentTemplateVersionId = attachmentTemplateVersionId;
  }


  public CheckAllOf url(String url) {
    
    
    
    
    this.url = url;
    return this;
  }

   /**
   * A [signed link](#section/Asset-URLs) served over HTTPS. The link returned will expire in 30 days to prevent mis-sharing. Each time a GET request is initiated, a new signed URL will be generated.
   * @return url
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A [signed link](#section/Asset-URLs) served over HTTPS. The link returned will expire in 30 days to prevent mis-sharing. Each time a GET request is initiated, a new signed URL will be generated.")

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    
    
    
    this.url = url;
  }


  public CheckAllOf to(ToAddressUsChk to) {
    
    
    
    
    this.to = to;
    return this;
  }

   /**
   * Get to
   * @return to
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ToAddressUsChk getTo() {
    return to;
  }


  public void setTo(ToAddressUsChk to) {
    
    
    
    this.to = to;
  }


  public CheckAllOf carrier(CarrierEnum carrier) {
    
    
    
    
    this.carrier = carrier;
    return this;
  }

   /**
   * Get carrier
   * @return carrier
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "USPS", required = true, value = "")

  public CarrierEnum getCarrier() {
    return carrier;
  }


  public void setCarrier(CarrierEnum carrier) {
    
    
    
    this.carrier = carrier;
  }


  public CheckAllOf thumbnails(List<Thumbnail> thumbnails) {
    
    
    
    
    this.thumbnails = thumbnails;
    return this;
  }

  public CheckAllOf addThumbnailsItem(Thumbnail thumbnailsItem) {
    if (this.thumbnails == null) {
      this.thumbnails = new ArrayList<>();
    }
    this.thumbnails.add(thumbnailsItem);
    return this;
  }

   /**
   * Get thumbnails
   * @return thumbnails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Thumbnail> getThumbnails() {
    return thumbnails;
  }


  public void setThumbnails(List<Thumbnail> thumbnails) {
    
    
    
    this.thumbnails = thumbnails;
  }


  public CheckAllOf expectedDeliveryDate(LocalDate expectedDeliveryDate) {
    
    
    
    
    this.expectedDeliveryDate = expectedDeliveryDate;
    return this;
  }

   /**
   * A date in YYYY-MM-DD format of the mailpiece&#39;s expected delivery date based on its &#x60;send_date&#x60;.
   * @return expectedDeliveryDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A date in YYYY-MM-DD format of the mailpiece's expected delivery date based on its `send_date`.")

  public LocalDate getExpectedDeliveryDate() {
    return expectedDeliveryDate;
  }


  public void setExpectedDeliveryDate(LocalDate expectedDeliveryDate) {
    
    
    
    this.expectedDeliveryDate = expectedDeliveryDate;
  }


  public CheckAllOf trackingEvents(List<TrackingEventNormal> trackingEvents) {
    
    
    
    
    this.trackingEvents = trackingEvents;
    return this;
  }

  public CheckAllOf addTrackingEventsItem(TrackingEventNormal trackingEventsItem) {
    if (this.trackingEvents == null) {
      this.trackingEvents = new ArrayList<>();
    }
    this.trackingEvents.add(trackingEventsItem);
    return this;
  }

   /**
   * An array of tracking_event objects ordered by ascending &#x60;time&#x60;. Will not be populated for checks created in test mode.
   * @return trackingEvents
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of tracking_event objects ordered by ascending `time`. Will not be populated for checks created in test mode.")

  public List<TrackingEventNormal> getTrackingEvents() {
    return trackingEvents;
  }


  public void setTrackingEvents(List<TrackingEventNormal> trackingEvents) {
    
    
    
    this.trackingEvents = trackingEvents;
  }


  public CheckAllOf useType(ChkUseType useType) {
    
    
    
    
    this.useType = useType;
    return this;
  }

   /**
   * Get useType
   * @return useType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public ChkUseType getUseType() {
    return useType;
  }


  public void setUseType(ChkUseType useType) {
    
    
    
    this.useType = useType;
  }


  public CheckAllOf status(Status status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Status getStatus() {
    return status;
  }


  public void setStatus(Status status) {
    
    
    
    this.status = status;
  }


  public CheckAllOf failureReason(FailureReason failureReason) {
    
    
    
    
    this.failureReason = failureReason;
    return this;
  }

   /**
   * Get failureReason
   * @return failureReason
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FailureReason getFailureReason() {
    return failureReason;
  }


  public void setFailureReason(FailureReason failureReason) {
    
    
    
    this.failureReason = failureReason;
  }


  public CheckAllOf _object(ObjectEnum _object) {
    
    
    
    
    this._object = _object;
    return this;
  }

   /**
   * Value is resource type.
   * @return _object
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "CHECK", value = "Value is resource type.")

  public ObjectEnum getObject() {
    return _object;
  }


  public void setObject(ObjectEnum _object) {
    
    
    
    this._object = _object;
  }


  public CheckAllOf dateCreated(OffsetDateTime dateCreated) {
    
    
    
    
    this.dateCreated = dateCreated;
    return this;
  }

   /**
   * A timestamp in ISO 8601 format of the date the resource was created.
   * @return dateCreated
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A timestamp in ISO 8601 format of the date the resource was created.")

  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }


  public void setDateCreated(OffsetDateTime dateCreated) {
    
    
    
    this.dateCreated = dateCreated;
  }


  public CheckAllOf dateModified(OffsetDateTime dateModified) {
    
    
    
    
    this.dateModified = dateModified;
    return this;
  }

   /**
   * A timestamp in ISO 8601 format of the date the resource was last modified.
   * @return dateModified
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A timestamp in ISO 8601 format of the date the resource was last modified.")

  public OffsetDateTime getDateModified() {
    return dateModified;
  }


  public void setDateModified(OffsetDateTime dateModified) {
    
    
    
    this.dateModified = dateModified;
  }


  public CheckAllOf deleted(Boolean deleted) {
    
    
    
    
    this.deleted = deleted;
    return this;
  }

   /**
   * Only returned if the resource has been successfully deleted.
   * @return deleted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Only returned if the resource has been successfully deleted.")

  public Boolean getDeleted() {
    return deleted;
  }


  public void setDeleted(Boolean deleted) {
    
    
    
    this.deleted = deleted;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CheckAllOf instance itself
   */
  public CheckAllOf putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckAllOf checkAllOf = (CheckAllOf) o;
    return Objects.equals(this.id, checkAllOf.id) &&
        Objects.equals(this.amount, checkAllOf.amount) &&
        Objects.equals(this.bankAccount, checkAllOf.bankAccount) &&
        Objects.equals(this.checkBottomTemplateId, checkAllOf.checkBottomTemplateId) &&
        Objects.equals(this.attachmentTemplateId, checkAllOf.attachmentTemplateId) &&
        Objects.equals(this.checkBottomTemplateVersionId, checkAllOf.checkBottomTemplateVersionId) &&
        Objects.equals(this.attachmentTemplateVersionId, checkAllOf.attachmentTemplateVersionId) &&
        Objects.equals(this.url, checkAllOf.url) &&
        Objects.equals(this.to, checkAllOf.to) &&
        Objects.equals(this.carrier, checkAllOf.carrier) &&
        Objects.equals(this.thumbnails, checkAllOf.thumbnails) &&
        Objects.equals(this.expectedDeliveryDate, checkAllOf.expectedDeliveryDate) &&
        Objects.equals(this.trackingEvents, checkAllOf.trackingEvents) &&
        Objects.equals(this.useType, checkAllOf.useType) &&
        Objects.equals(this.status, checkAllOf.status) &&
        Objects.equals(this.failureReason, checkAllOf.failureReason) &&
        Objects.equals(this._object, checkAllOf._object) &&
        Objects.equals(this.dateCreated, checkAllOf.dateCreated) &&
        Objects.equals(this.dateModified, checkAllOf.dateModified) &&
        Objects.equals(this.deleted, checkAllOf.deleted)&&
        Objects.equals(this.additionalProperties, checkAllOf.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, amount, bankAccount, checkBottomTemplateId, attachmentTemplateId, checkBottomTemplateVersionId, attachmentTemplateVersionId, url, to, carrier, thumbnails, expectedDeliveryDate, trackingEvents, useType, status, failureReason, _object, dateCreated, dateModified, deleted, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckAllOf {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    bankAccount: ").append(toIndentedString(bankAccount)).append("\n");
    sb.append("    checkBottomTemplateId: ").append(toIndentedString(checkBottomTemplateId)).append("\n");
    sb.append("    attachmentTemplateId: ").append(toIndentedString(attachmentTemplateId)).append("\n");
    sb.append("    checkBottomTemplateVersionId: ").append(toIndentedString(checkBottomTemplateVersionId)).append("\n");
    sb.append("    attachmentTemplateVersionId: ").append(toIndentedString(attachmentTemplateVersionId)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    carrier: ").append(toIndentedString(carrier)).append("\n");
    sb.append("    thumbnails: ").append(toIndentedString(thumbnails)).append("\n");
    sb.append("    expectedDeliveryDate: ").append(toIndentedString(expectedDeliveryDate)).append("\n");
    sb.append("    trackingEvents: ").append(toIndentedString(trackingEvents)).append("\n");
    sb.append("    useType: ").append(toIndentedString(useType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    failureReason: ").append(toIndentedString(failureReason)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateModified: ").append(toIndentedString(dateModified)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("amount");
    openapiFields.add("bank_account");
    openapiFields.add("check_bottom_template_id");
    openapiFields.add("attachment_template_id");
    openapiFields.add("check_bottom_template_version_id");
    openapiFields.add("attachment_template_version_id");
    openapiFields.add("url");
    openapiFields.add("to");
    openapiFields.add("carrier");
    openapiFields.add("thumbnails");
    openapiFields.add("expected_delivery_date");
    openapiFields.add("tracking_events");
    openapiFields.add("use_type");
    openapiFields.add("status");
    openapiFields.add("failure_reason");
    openapiFields.add("object");
    openapiFields.add("date_created");
    openapiFields.add("date_modified");
    openapiFields.add("deleted");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("bank_account");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("to");
    openapiRequiredFields.add("carrier");
    openapiRequiredFields.add("use_type");
    openapiRequiredFields.add("date_created");
    openapiRequiredFields.add("date_modified");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CheckAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CheckAllOf.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CheckAllOf is not found in the empty JSON string", CheckAllOf.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CheckAllOf.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the required field `bank_account`
      BankAccount.validateJsonObject(jsonObj.getAsJsonObject("bank_account"));
      // validate the optional field `check_bottom_template_id`
      if (jsonObj.get("check_bottom_template_id") != null && !jsonObj.get("check_bottom_template_id").isJsonNull()) {
        Object.validateJsonObject(jsonObj.getAsJsonObject("check_bottom_template_id"));
      }
      // validate the optional field `attachment_template_id`
      if (jsonObj.get("attachment_template_id") != null && !jsonObj.get("attachment_template_id").isJsonNull()) {
        Object.validateJsonObject(jsonObj.getAsJsonObject("attachment_template_id"));
      }
      // validate the optional field `check_bottom_template_version_id`
      if (jsonObj.get("check_bottom_template_version_id") != null && !jsonObj.get("check_bottom_template_version_id").isJsonNull()) {
        String.validateJsonObject(jsonObj.getAsJsonObject("check_bottom_template_version_id"));
      }
      // validate the optional field `attachment_template_version_id`
      if (jsonObj.get("attachment_template_version_id") != null && !jsonObj.get("attachment_template_version_id").isJsonNull()) {
        String.validateJsonObject(jsonObj.getAsJsonObject("attachment_template_version_id"));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      // validate the required field `to`
      ToAddressUsChk.validateJsonObject(jsonObj.getAsJsonObject("to"));
      if (!jsonObj.get("carrier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrier").toString()));
      }
      if (jsonObj.get("thumbnails") != null && !jsonObj.get("thumbnails").isJsonNull()) {
        JsonArray jsonArraythumbnails = jsonObj.getAsJsonArray("thumbnails");
        if (jsonArraythumbnails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("thumbnails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `thumbnails` to be an array in the JSON string but got `%s`", jsonObj.get("thumbnails").toString()));
          }

          // validate the optional field `thumbnails` (array)
          for (int i = 0; i < jsonArraythumbnails.size(); i++) {
            Thumbnail.validateJsonObject(jsonArraythumbnails.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("tracking_events") != null && !jsonObj.get("tracking_events").isJsonNull()) {
        JsonArray jsonArraytrackingEvents = jsonObj.getAsJsonArray("tracking_events");
        if (jsonArraytrackingEvents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tracking_events").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tracking_events` to be an array in the JSON string but got `%s`", jsonObj.get("tracking_events").toString()));
          }

          // validate the optional field `tracking_events` (array)
          for (int i = 0; i < jsonArraytrackingEvents.size(); i++) {
            TrackingEventNormal.validateJsonObject(jsonArraytrackingEvents.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `failure_reason`
      if (jsonObj.get("failure_reason") != null && !jsonObj.get("failure_reason").isJsonNull()) {
        FailureReason.validateJsonObject(jsonObj.getAsJsonObject("failure_reason"));
      }
      if ((jsonObj.get("object") != null && !jsonObj.get("object").isJsonNull()) && !jsonObj.get("object").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CheckAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CheckAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CheckAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CheckAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<CheckAllOf>() {
           @Override
           public void write(JsonWriter out, CheckAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CheckAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CheckAllOf instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CheckAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CheckAllOf
  * @throws IOException if the JSON string is invalid with respect to CheckAllOf
  */
  public static CheckAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CheckAllOf.class);
  }

 /**
  * Convert an instance of CheckAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


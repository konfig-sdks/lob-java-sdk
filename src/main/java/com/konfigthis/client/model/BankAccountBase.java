/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 
 *
 * The version of the OpenAPI document: 1.19.28
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * BankAccountBase
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class BankAccountBase {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ROUTING_NUMBER = "routing_number";
  @SerializedName(SERIALIZED_NAME_ROUTING_NUMBER)
  private String routingNumber;

  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER = "account_number";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER)
  private String accountNumber;

  /**
   * The type of entity that holds the account.
   */
  @JsonAdapter(AccountTypeEnum.Adapter.class)
 public enum AccountTypeEnum {
    COMPANY("company"),
    
    INDIVIDUAL("individual");

    private String value;

    AccountTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccountTypeEnum fromValue(String value) {
      for (AccountTypeEnum b : AccountTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AccountTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccountTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccountTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AccountTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ACCOUNT_TYPE = "account_type";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_TYPE)
  private AccountTypeEnum accountType;

  public static final String SERIALIZED_NAME_SIGNATORY = "signatory";
  @SerializedName(SERIALIZED_NAME_SIGNATORY)
  private String signatory;

  /**
   * The check template used for printing. The defualt value is &#x60;common&#x60;. If you bank with JP Morgan Chase and wish to use Positive Pay use the &#x60;jpm&#x60; template. &#x60;jpm&#x60; requires additional information to be provided.
   */
  @JsonAdapter(CheckTemplateEnum.Adapter.class)
 public enum CheckTemplateEnum {
    COMMON("common"),
    
    JPM("jpm");

    private String value;

    CheckTemplateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CheckTemplateEnum fromValue(String value) {
      for (CheckTemplateEnum b : CheckTemplateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CheckTemplateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CheckTemplateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CheckTemplateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CheckTemplateEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CHECK_TEMPLATE = "check_template";
  @SerializedName(SERIALIZED_NAME_CHECK_TEMPLATE)
  private CheckTemplateEnum checkTemplate;

  public static final String SERIALIZED_NAME_FRACTIONAL_ROUTING_NUMBER = "fractional_routing_number";
  @SerializedName(SERIALIZED_NAME_FRACTIONAL_ROUTING_NUMBER)
  private String fractionalRoutingNumber;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_ZIPCODE = "zipcode";
  @SerializedName(SERIALIZED_NAME_ZIPCODE)
  private String zipcode;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Map<String, String> metadata = null;

  public BankAccountBase() {
  }

  public BankAccountBase description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * An internal description that identifies this resource. Must be no longer than 255 characters. 
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Harry - Office", value = "An internal description that identifies this resource. Must be no longer than 255 characters. ")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public BankAccountBase routingNumber(String routingNumber) {
    
    
    if (routingNumber != null && routingNumber.length() < 9) {
      throw new IllegalArgumentException("Invalid value for routingNumber. Length must be greater than or equal to 9.");
    }
    
    this.routingNumber = routingNumber;
    return this;
  }

   /**
   * Must be a &lt;a href&#x3D;\&quot;https://www.frbservices.org/index.html\&quot; target&#x3D;\&quot;_blank\&quot;&gt;valid US routing number&lt;/a&gt;.
   * @return routingNumber
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Must be a <a href=\"https://www.frbservices.org/index.html\" target=\"_blank\">valid US routing number</a>.")

  public String getRoutingNumber() {
    return routingNumber;
  }


  public void setRoutingNumber(String routingNumber) {
    
    
    if (routingNumber != null && routingNumber.length() < 9) {
      throw new IllegalArgumentException("Invalid value for routingNumber. Length must be greater than or equal to 9.");
    }
    this.routingNumber = routingNumber;
  }


  public BankAccountBase accountNumber(String accountNumber) {
    
    
    
    
    this.accountNumber = accountNumber;
    return this;
  }

   /**
   * Get accountNumber
   * @return accountNumber
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getAccountNumber() {
    return accountNumber;
  }


  public void setAccountNumber(String accountNumber) {
    
    
    
    this.accountNumber = accountNumber;
  }


  public BankAccountBase accountType(AccountTypeEnum accountType) {
    
    
    
    
    this.accountType = accountType;
    return this;
  }

   /**
   * The type of entity that holds the account.
   * @return accountType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The type of entity that holds the account.")

  public AccountTypeEnum getAccountType() {
    return accountType;
  }


  public void setAccountType(AccountTypeEnum accountType) {
    
    
    
    this.accountType = accountType;
  }


  public BankAccountBase signatory(String signatory) {
    
    
    
    
    this.signatory = signatory;
    return this;
  }

   /**
   * The signatory associated with your account. This name will be printed on checks created with this bank account. If you prefer to use a custom signature image on your checks instead, please create your bank account from the &lt;a href&#x3D;\&quot;https://dashboard.lob.com/#/login\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Dashboard&lt;/a&gt;.
   * @return signatory
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The signatory associated with your account. This name will be printed on checks created with this bank account. If you prefer to use a custom signature image on your checks instead, please create your bank account from the <a href=\"https://dashboard.lob.com/#/login\" target=\"_blank\">Dashboard</a>.")

  public String getSignatory() {
    return signatory;
  }


  public void setSignatory(String signatory) {
    
    
    
    this.signatory = signatory;
  }


  public BankAccountBase checkTemplate(CheckTemplateEnum checkTemplate) {
    
    
    
    
    this.checkTemplate = checkTemplate;
    return this;
  }

   /**
   * The check template used for printing. The defualt value is &#x60;common&#x60;. If you bank with JP Morgan Chase and wish to use Positive Pay use the &#x60;jpm&#x60; template. &#x60;jpm&#x60; requires additional information to be provided.
   * @return checkTemplate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The check template used for printing. The defualt value is `common`. If you bank with JP Morgan Chase and wish to use Positive Pay use the `jpm` template. `jpm` requires additional information to be provided.")

  public CheckTemplateEnum getCheckTemplate() {
    return checkTemplate;
  }


  public void setCheckTemplate(CheckTemplateEnum checkTemplate) {
    
    
    
    this.checkTemplate = checkTemplate;
  }


  public BankAccountBase fractionalRoutingNumber(String fractionalRoutingNumber) {
    
    
    
    
    this.fractionalRoutingNumber = fractionalRoutingNumber;
    return this;
  }

   /**
   * The fractional routing number for your home bank account. Required for the &#x60;jpm&#x60; check template only. Please contact a bank representative if you do not know the fractional routing number associated with your home bank institution.
   * @return fractionalRoutingNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The fractional routing number for your home bank account. Required for the `jpm` check template only. Please contact a bank representative if you do not know the fractional routing number associated with your home bank institution.")

  public String getFractionalRoutingNumber() {
    return fractionalRoutingNumber;
  }


  public void setFractionalRoutingNumber(String fractionalRoutingNumber) {
    
    
    
    this.fractionalRoutingNumber = fractionalRoutingNumber;
  }


  public BankAccountBase city(String city) {
    
    
    
    
    this.city = city;
    return this;
  }

   /**
   * The city associated with your home bank account. Required for the &#x60;jpm&#x60; check template only. Please contact a bank representative if you do not know the city associated with your home bank institution.
   * @return city
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The city associated with your home bank account. Required for the `jpm` check template only. Please contact a bank representative if you do not know the city associated with your home bank institution.")

  public String getCity() {
    return city;
  }


  public void setCity(String city) {
    
    
    
    this.city = city;
  }


  public BankAccountBase state(String state) {
    
    
    
    
    this.state = state;
    return this;
  }

   /**
   * The state associated with your home bank account. Required for the &#x60;jpm&#x60; check template only. Please contact a bank representative if you do not know the state associated with your home bank institution.
   * @return state
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The state associated with your home bank account. Required for the `jpm` check template only. Please contact a bank representative if you do not know the state associated with your home bank institution.")

  public String getState() {
    return state;
  }


  public void setState(String state) {
    
    
    
    this.state = state;
  }


  public BankAccountBase zipcode(String zipcode) {
    
    
    
    
    this.zipcode = zipcode;
    return this;
  }

   /**
   * The zipcode associated with your home bank account. Required for the &#x60;jpm&#x60; check template only. Please contact a bank representative if you do not know the zipcode associated with your home bank institution.
   * @return zipcode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The zipcode associated with your home bank account. Required for the `jpm` check template only. Please contact a bank representative if you do not know the zipcode associated with your home bank institution.")

  public String getZipcode() {
    return zipcode;
  }


  public void setZipcode(String zipcode) {
    
    
    
    this.zipcode = zipcode;
  }


  public BankAccountBase metadata(Map<String, String> metadata) {
    
    
    
    
    this.metadata = metadata;
    return this;
  }

  public BankAccountBase putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

   /**
   * Use metadata to store custom information for tagging and labeling back to your internal systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must be at most 500 characters. Neither can contain the characters &#x60;\&quot;&#x60; and &#x60;\\&#x60;. i.e. &#39;{\&quot;customer_id\&quot; : \&quot;NEWYORK2015\&quot;}&#39; Nested objects are not supported.  See [Metadata](#section/Metadata) for more information.
   * @return metadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Use metadata to store custom information for tagging and labeling back to your internal systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must be at most 500 characters. Neither can contain the characters `\"` and `\\`. i.e. '{\"customer_id\" : \"NEWYORK2015\"}' Nested objects are not supported.  See [Metadata](#section/Metadata) for more information.")

  public Map<String, String> getMetadata() {
    return metadata;
  }


  public void setMetadata(Map<String, String> metadata) {
    
    
    
    this.metadata = metadata;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the BankAccountBase instance itself
   */
  public BankAccountBase putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BankAccountBase bankAccountBase = (BankAccountBase) o;
    return Objects.equals(this.description, bankAccountBase.description) &&
        Objects.equals(this.routingNumber, bankAccountBase.routingNumber) &&
        Objects.equals(this.accountNumber, bankAccountBase.accountNumber) &&
        Objects.equals(this.accountType, bankAccountBase.accountType) &&
        Objects.equals(this.signatory, bankAccountBase.signatory) &&
        Objects.equals(this.checkTemplate, bankAccountBase.checkTemplate) &&
        Objects.equals(this.fractionalRoutingNumber, bankAccountBase.fractionalRoutingNumber) &&
        Objects.equals(this.city, bankAccountBase.city) &&
        Objects.equals(this.state, bankAccountBase.state) &&
        Objects.equals(this.zipcode, bankAccountBase.zipcode) &&
        Objects.equals(this.metadata, bankAccountBase.metadata)&&
        Objects.equals(this.additionalProperties, bankAccountBase.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, routingNumber, accountNumber, accountType, signatory, checkTemplate, fractionalRoutingNumber, city, state, zipcode, metadata, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BankAccountBase {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    routingNumber: ").append(toIndentedString(routingNumber)).append("\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    accountType: ").append(toIndentedString(accountType)).append("\n");
    sb.append("    signatory: ").append(toIndentedString(signatory)).append("\n");
    sb.append("    checkTemplate: ").append(toIndentedString(checkTemplate)).append("\n");
    sb.append("    fractionalRoutingNumber: ").append(toIndentedString(fractionalRoutingNumber)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    zipcode: ").append(toIndentedString(zipcode)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("routing_number");
    openapiFields.add("account_number");
    openapiFields.add("account_type");
    openapiFields.add("signatory");
    openapiFields.add("check_template");
    openapiFields.add("fractional_routing_number");
    openapiFields.add("city");
    openapiFields.add("state");
    openapiFields.add("zipcode");
    openapiFields.add("metadata");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("routing_number");
    openapiRequiredFields.add("account_number");
    openapiRequiredFields.add("account_type");
    openapiRequiredFields.add("signatory");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BankAccountBase
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!BankAccountBase.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BankAccountBase is not found in the empty JSON string", BankAccountBase.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BankAccountBase.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("description").isJsonNull() && (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("routing_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routing_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routing_number").toString()));
      }
      if (!jsonObj.get("account_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_number").toString()));
      }
      if (!jsonObj.get("account_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_type").toString()));
      }
      if (!jsonObj.get("signatory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signatory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signatory").toString()));
      }
      if ((jsonObj.get("check_template") != null && !jsonObj.get("check_template").isJsonNull()) && !jsonObj.get("check_template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `check_template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("check_template").toString()));
      }
      if ((jsonObj.get("fractional_routing_number") != null && !jsonObj.get("fractional_routing_number").isJsonNull()) && !jsonObj.get("fractional_routing_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fractional_routing_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fractional_routing_number").toString()));
      }
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("zipcode") != null && !jsonObj.get("zipcode").isJsonNull()) && !jsonObj.get("zipcode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zipcode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zipcode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BankAccountBase.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BankAccountBase' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BankAccountBase> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BankAccountBase.class));

       return (TypeAdapter<T>) new TypeAdapter<BankAccountBase>() {
           @Override
           public void write(JsonWriter out, BankAccountBase value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public BankAccountBase read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             BankAccountBase instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BankAccountBase given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BankAccountBase
  * @throws IOException if the JSON string is invalid with respect to BankAccountBase
  */
  public static BankAccountBase fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BankAccountBase.class);
  }

 /**
  * Convert an instance of BankAccountBase to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


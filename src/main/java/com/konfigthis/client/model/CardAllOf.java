/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 
 *
 * The version of the OpenAPI document: 1.19.28
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Thumbnail;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CardAllOf
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CardAllOf {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public static final String SERIALIZED_NAME_AUTO_REORDER = "auto_reorder";
  @SerializedName(SERIALIZED_NAME_AUTO_REORDER)
  private Boolean autoReorder = false;

  public static final String SERIALIZED_NAME_REORDER_QUANTITY = "reorder_quantity";
  @SerializedName(SERIALIZED_NAME_REORDER_QUANTITY)
  private Integer reorderQuantity;

  public static final String SERIALIZED_NAME_RAW_URL = "raw_url";
  @SerializedName(SERIALIZED_NAME_RAW_URL)
  private URI rawUrl;

  public static final String SERIALIZED_NAME_FRONT_ORIGINAL_URL = "front_original_url";
  @SerializedName(SERIALIZED_NAME_FRONT_ORIGINAL_URL)
  private URI frontOriginalUrl;

  public static final String SERIALIZED_NAME_BACK_ORIGINAL_URL = "back_original_url";
  @SerializedName(SERIALIZED_NAME_BACK_ORIGINAL_URL)
  private URI backOriginalUrl;

  public static final String SERIALIZED_NAME_THUMBNAILS = "thumbnails";
  @SerializedName(SERIALIZED_NAME_THUMBNAILS)
  private List<Thumbnail> thumbnails = new ArrayList<>();

  public static final String SERIALIZED_NAME_AVAILABLE_QUANTITY = "available_quantity";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_QUANTITY)
  private Integer availableQuantity = 0;

  public static final String SERIALIZED_NAME_PENDING_QUANTITY = "pending_quantity";
  @SerializedName(SERIALIZED_NAME_PENDING_QUANTITY)
  private Integer pendingQuantity = 0;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    PROCESSED("processed"),
    
    RENDERED("rendered");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  /**
   * The orientation of the card.
   */
  @JsonAdapter(OrientationEnum.Adapter.class)
 public enum OrientationEnum {
    HORIZONTAL("horizontal"),
    
    VERTICAL("vertical");

    private String value;

    OrientationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OrientationEnum fromValue(String value) {
      for (OrientationEnum b : OrientationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OrientationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrientationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrientationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OrientationEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ORIENTATION = "orientation";
  @SerializedName(SERIALIZED_NAME_ORIENTATION)
  private OrientationEnum orientation = OrientationEnum.HORIZONTAL;

  public static final String SERIALIZED_NAME_THRESHOLD_AMOUNT = "threshold_amount";
  @SerializedName(SERIALIZED_NAME_THRESHOLD_AMOUNT)
  private Integer thresholdAmount = 0;

  /**
   * object
   */
  @JsonAdapter(ObjectEnum.Adapter.class)
 public enum ObjectEnum {
    CARD("card");

    private String value;

    ObjectEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ObjectEnum fromValue(String value) {
      for (ObjectEnum b : ObjectEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ObjectEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ObjectEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ObjectEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ObjectEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  private ObjectEnum _object = ObjectEnum.CARD;

  public CardAllOf() {
  }

  public CardAllOf id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Unique identifier prefixed with &#x60;card_&#x60;.
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Unique identifier prefixed with `card_`.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public CardAllOf url(URI url) {
    
    
    if (url != null && url.length() < 1) {
      throw new IllegalArgumentException("Invalid value for url. Length must be greater than or equal to 1.");
    }
    
    this.url = url;
    return this;
  }

   /**
   * The signed link for the card.
   * @return url
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The signed link for the card.")

  public URI getUrl() {
    return url;
  }


  public void setUrl(URI url) {
    
    
    if (url != null && url.length() < 1) {
      throw new IllegalArgumentException("Invalid value for url. Length must be greater than or equal to 1.");
    }
    this.url = url;
  }


  public CardAllOf autoReorder(Boolean autoReorder) {
    
    
    
    
    this.autoReorder = autoReorder;
    return this;
  }

   /**
   * True if the cards should be auto-reordered.
   * @return autoReorder
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "false", required = true, value = "True if the cards should be auto-reordered.")

  public Boolean getAutoReorder() {
    return autoReorder;
  }


  public void setAutoReorder(Boolean autoReorder) {
    
    
    
    this.autoReorder = autoReorder;
  }


  public CardAllOf reorderQuantity(Integer reorderQuantity) {
    
    
    
    
    this.reorderQuantity = reorderQuantity;
    return this;
  }

   /**
   * The number of cards to be reordered.
   * @return reorderQuantity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "The number of cards to be reordered.")

  public Integer getReorderQuantity() {
    return reorderQuantity;
  }


  public void setReorderQuantity(Integer reorderQuantity) {
    
    
    
    this.reorderQuantity = reorderQuantity;
  }


  public CardAllOf rawUrl(URI rawUrl) {
    
    
    if (rawUrl != null && rawUrl.length() < 1) {
      throw new IllegalArgumentException("Invalid value for rawUrl. Length must be greater than or equal to 1.");
    }
    
    this.rawUrl = rawUrl;
    return this;
  }

   /**
   * The raw URL of the card.
   * @return rawUrl
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The raw URL of the card.")

  public URI getRawUrl() {
    return rawUrl;
  }


  public void setRawUrl(URI rawUrl) {
    
    
    if (rawUrl != null && rawUrl.length() < 1) {
      throw new IllegalArgumentException("Invalid value for rawUrl. Length must be greater than or equal to 1.");
    }
    this.rawUrl = rawUrl;
  }


  public CardAllOf frontOriginalUrl(URI frontOriginalUrl) {
    
    
    if (frontOriginalUrl != null && frontOriginalUrl.length() < 1) {
      throw new IllegalArgumentException("Invalid value for frontOriginalUrl. Length must be greater than or equal to 1.");
    }
    
    this.frontOriginalUrl = frontOriginalUrl;
    return this;
  }

   /**
   * The original URL of the front template.
   * @return frontOriginalUrl
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The original URL of the front template.")

  public URI getFrontOriginalUrl() {
    return frontOriginalUrl;
  }


  public void setFrontOriginalUrl(URI frontOriginalUrl) {
    
    
    if (frontOriginalUrl != null && frontOriginalUrl.length() < 1) {
      throw new IllegalArgumentException("Invalid value for frontOriginalUrl. Length must be greater than or equal to 1.");
    }
    this.frontOriginalUrl = frontOriginalUrl;
  }


  public CardAllOf backOriginalUrl(URI backOriginalUrl) {
    
    
    if (backOriginalUrl != null && backOriginalUrl.length() < 1) {
      throw new IllegalArgumentException("Invalid value for backOriginalUrl. Length must be greater than or equal to 1.");
    }
    
    this.backOriginalUrl = backOriginalUrl;
    return this;
  }

   /**
   * The original URL of the back template.
   * @return backOriginalUrl
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The original URL of the back template.")

  public URI getBackOriginalUrl() {
    return backOriginalUrl;
  }


  public void setBackOriginalUrl(URI backOriginalUrl) {
    
    
    if (backOriginalUrl != null && backOriginalUrl.length() < 1) {
      throw new IllegalArgumentException("Invalid value for backOriginalUrl. Length must be greater than or equal to 1.");
    }
    this.backOriginalUrl = backOriginalUrl;
  }


  public CardAllOf thumbnails(List<Thumbnail> thumbnails) {
    
    
    
    
    this.thumbnails = thumbnails;
    return this;
  }

  public CardAllOf addThumbnailsItem(Thumbnail thumbnailsItem) {
    this.thumbnails.add(thumbnailsItem);
    return this;
  }

   /**
   * Get thumbnails
   * @return thumbnails
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<Thumbnail> getThumbnails() {
    return thumbnails;
  }


  public void setThumbnails(List<Thumbnail> thumbnails) {
    
    
    
    this.thumbnails = thumbnails;
  }


  public CardAllOf availableQuantity(Integer availableQuantity) {
    
    
    
    
    this.availableQuantity = availableQuantity;
    return this;
  }

   /**
   * The available quantity of cards.
   * @return availableQuantity
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0", required = true, value = "The available quantity of cards.")

  public Integer getAvailableQuantity() {
    return availableQuantity;
  }


  public void setAvailableQuantity(Integer availableQuantity) {
    
    
    
    this.availableQuantity = availableQuantity;
  }


  public CardAllOf pendingQuantity(Integer pendingQuantity) {
    
    
    
    
    this.pendingQuantity = pendingQuantity;
    return this;
  }

   /**
   * The pending quantity of cards.
   * @return pendingQuantity
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0", required = true, value = "The pending quantity of cards.")

  public Integer getPendingQuantity() {
    return pendingQuantity;
  }


  public void setPendingQuantity(Integer pendingQuantity) {
    
    
    
    this.pendingQuantity = pendingQuantity;
  }


  public CardAllOf status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public CardAllOf orientation(OrientationEnum orientation) {
    
    
    
    
    this.orientation = orientation;
    return this;
  }

   /**
   * The orientation of the card.
   * @return orientation
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "HORIZONTAL", required = true, value = "The orientation of the card.")

  public OrientationEnum getOrientation() {
    return orientation;
  }


  public void setOrientation(OrientationEnum orientation) {
    
    
    
    this.orientation = orientation;
  }


  public CardAllOf thresholdAmount(Integer thresholdAmount) {
    
    
    
    
    this.thresholdAmount = thresholdAmount;
    return this;
  }

   /**
   * The threshold amount of the card
   * @return thresholdAmount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0", required = true, value = "The threshold amount of the card")

  public Integer getThresholdAmount() {
    return thresholdAmount;
  }


  public void setThresholdAmount(Integer thresholdAmount) {
    
    
    
    this.thresholdAmount = thresholdAmount;
  }


  public CardAllOf _object(ObjectEnum _object) {
    
    
    
    
    this._object = _object;
    return this;
  }

   /**
   * object
   * @return _object
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "CARD", required = true, value = "object")

  public ObjectEnum getObject() {
    return _object;
  }


  public void setObject(ObjectEnum _object) {
    
    
    
    this._object = _object;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CardAllOf instance itself
   */
  public CardAllOf putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardAllOf cardAllOf = (CardAllOf) o;
    return Objects.equals(this.id, cardAllOf.id) &&
        Objects.equals(this.url, cardAllOf.url) &&
        Objects.equals(this.autoReorder, cardAllOf.autoReorder) &&
        Objects.equals(this.reorderQuantity, cardAllOf.reorderQuantity) &&
        Objects.equals(this.rawUrl, cardAllOf.rawUrl) &&
        Objects.equals(this.frontOriginalUrl, cardAllOf.frontOriginalUrl) &&
        Objects.equals(this.backOriginalUrl, cardAllOf.backOriginalUrl) &&
        Objects.equals(this.thumbnails, cardAllOf.thumbnails) &&
        Objects.equals(this.availableQuantity, cardAllOf.availableQuantity) &&
        Objects.equals(this.pendingQuantity, cardAllOf.pendingQuantity) &&
        Objects.equals(this.status, cardAllOf.status) &&
        Objects.equals(this.orientation, cardAllOf.orientation) &&
        Objects.equals(this.thresholdAmount, cardAllOf.thresholdAmount) &&
        Objects.equals(this._object, cardAllOf._object)&&
        Objects.equals(this.additionalProperties, cardAllOf.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, url, autoReorder, reorderQuantity, rawUrl, frontOriginalUrl, backOriginalUrl, thumbnails, availableQuantity, pendingQuantity, status, orientation, thresholdAmount, _object, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardAllOf {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    autoReorder: ").append(toIndentedString(autoReorder)).append("\n");
    sb.append("    reorderQuantity: ").append(toIndentedString(reorderQuantity)).append("\n");
    sb.append("    rawUrl: ").append(toIndentedString(rawUrl)).append("\n");
    sb.append("    frontOriginalUrl: ").append(toIndentedString(frontOriginalUrl)).append("\n");
    sb.append("    backOriginalUrl: ").append(toIndentedString(backOriginalUrl)).append("\n");
    sb.append("    thumbnails: ").append(toIndentedString(thumbnails)).append("\n");
    sb.append("    availableQuantity: ").append(toIndentedString(availableQuantity)).append("\n");
    sb.append("    pendingQuantity: ").append(toIndentedString(pendingQuantity)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    orientation: ").append(toIndentedString(orientation)).append("\n");
    sb.append("    thresholdAmount: ").append(toIndentedString(thresholdAmount)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("url");
    openapiFields.add("auto_reorder");
    openapiFields.add("reorder_quantity");
    openapiFields.add("raw_url");
    openapiFields.add("front_original_url");
    openapiFields.add("back_original_url");
    openapiFields.add("thumbnails");
    openapiFields.add("available_quantity");
    openapiFields.add("pending_quantity");
    openapiFields.add("status");
    openapiFields.add("orientation");
    openapiFields.add("threshold_amount");
    openapiFields.add("object");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("auto_reorder");
    openapiRequiredFields.add("reorder_quantity");
    openapiRequiredFields.add("raw_url");
    openapiRequiredFields.add("front_original_url");
    openapiRequiredFields.add("back_original_url");
    openapiRequiredFields.add("thumbnails");
    openapiRequiredFields.add("available_quantity");
    openapiRequiredFields.add("pending_quantity");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("orientation");
    openapiRequiredFields.add("threshold_amount");
    openapiRequiredFields.add("object");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CardAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CardAllOf.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CardAllOf is not found in the empty JSON string", CardAllOf.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CardAllOf.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if (!jsonObj.get("raw_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `raw_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("raw_url").toString()));
      }
      if (!jsonObj.get("front_original_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `front_original_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("front_original_url").toString()));
      }
      if (!jsonObj.get("back_original_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `back_original_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("back_original_url").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("thumbnails").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbnails` to be an array in the JSON string but got `%s`", jsonObj.get("thumbnails").toString()));
      }

      JsonArray jsonArraythumbnails = jsonObj.getAsJsonArray("thumbnails");
      // validate the required field `thumbnails` (array)
      for (int i = 0; i < jsonArraythumbnails.size(); i++) {
        Thumbnail.validateJsonObject(jsonArraythumbnails.get(i).getAsJsonObject());
      };
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (!jsonObj.get("orientation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orientation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orientation").toString()));
      }
      if (!jsonObj.get("object").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CardAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CardAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CardAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CardAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<CardAllOf>() {
           @Override
           public void write(JsonWriter out, CardAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CardAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CardAllOf instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CardAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CardAllOf
  * @throws IOException if the JSON string is invalid with respect to CardAllOf
  */
  public static CardAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CardAllOf.class);
  }

 /**
  * Convert an instance of CardAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 
 *
 * The version of the OpenAPI document: 1.19.28
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.DeliverabilityAnalysis;
import com.konfigthis.client.model.LobConfidenceScore;
import com.konfigthis.client.model.UsComponents;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * UsVerification
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class UsVerification {
  public static final String SERIALIZED_NAME_COMPONENTS = "components";
  @SerializedName(SERIALIZED_NAME_COMPONENTS)
  private UsComponents components;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_RECIPIENT = "recipient";
  @SerializedName(SERIALIZED_NAME_RECIPIENT)
  private String recipient;

  public static final String SERIALIZED_NAME_PRIMARY_LINE = "primary_line";
  @SerializedName(SERIALIZED_NAME_PRIMARY_LINE)
  private String primaryLine;

  public static final String SERIALIZED_NAME_SECONDARY_LINE = "secondary_line";
  @SerializedName(SERIALIZED_NAME_SECONDARY_LINE)
  private String secondaryLine;

  public static final String SERIALIZED_NAME_URBANIZATION = "urbanization";
  @SerializedName(SERIALIZED_NAME_URBANIZATION)
  private String urbanization;

  public static final String SERIALIZED_NAME_LAST_LINE = "last_line";
  @SerializedName(SERIALIZED_NAME_LAST_LINE)
  private String lastLine;

  /**
   * Summarizes the deliverability of the &#x60;us_verification&#x60; object. For full details, see the &#x60;deliverability_analysis&#x60; field. Possible values are: * &#x60;deliverable&#x60; – The address is deliverable by the USPS. * &#x60;deliverable_unnecessary_unit&#x60; – The address is deliverable, but the secondary unit information is unnecessary. * &#x60;deliverable_incorrect_unit&#x60; – The address is deliverable to the building&#39;s default address but the secondary unit provided may not exist. There is a chance the mail will not reach the intended recipient. * &#x60;deliverable_missing_unit&#x60; – The address is deliverable to the building&#39;s default address but is missing secondary unit information. There is a chance the mail will not reach the intended recipient. * &#x60;undeliverable&#x60; – The address is not deliverable according to the USPS. 
   */
  @JsonAdapter(DeliverabilityEnum.Adapter.class)
 public enum DeliverabilityEnum {
    DELIVERABLE("deliverable"),
    
    DELIVERABLE_UNNECESSARY_UNIT("deliverable_unnecessary_unit"),
    
    DELIVERABLE_INCORRECT_UNIT("deliverable_incorrect_unit"),
    
    DELIVERABLE_MISSING_UNIT("deliverable_missing_unit"),
    
    UNDELIVERABLE("undeliverable");

    private String value;

    DeliverabilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeliverabilityEnum fromValue(String value) {
      for (DeliverabilityEnum b : DeliverabilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DeliverabilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeliverabilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeliverabilityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DeliverabilityEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DELIVERABILITY = "deliverability";
  @SerializedName(SERIALIZED_NAME_DELIVERABILITY)
  private DeliverabilityEnum deliverability;

  /**
   * This field indicates whether an address was found in a more comprehensive address dataset that includes sources from the USPS, open source mapping data, and our proprietary mail delivery data. This field can be interpreted as a representation of whether an address is a real location or not. Additionally a valid address may contradict the deliverability field since an address can be a real valid location but the USPS may not deliver to that address. 
   */
  @JsonAdapter(ValidAddressEnum.Adapter.class)
 public enum ValidAddressEnum {
    TRUE("true"),
    
    FALSE("false");

    private Boolean value;

    ValidAddressEnum(Boolean value) {
      this.value = value;
    }

    public Boolean getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ValidAddressEnum fromValue(Boolean value) {
      for (ValidAddressEnum b : ValidAddressEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ValidAddressEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ValidAddressEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ValidAddressEnum read(final JsonReader jsonReader) throws IOException {
        Boolean value =  jsonReader.nextBoolean();
        return ValidAddressEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_VALID_ADDRESS = "valid_address";
  @SerializedName(SERIALIZED_NAME_VALID_ADDRESS)
  private ValidAddressEnum validAddress;

  public static final String SERIALIZED_NAME_DELIVERABILITY_ANALYSIS = "deliverability_analysis";
  @SerializedName(SERIALIZED_NAME_DELIVERABILITY_ANALYSIS)
  private DeliverabilityAnalysis deliverabilityAnalysis;

  public static final String SERIALIZED_NAME_LOB_CONFIDENCE_SCORE = "lob_confidence_score";
  @SerializedName(SERIALIZED_NAME_LOB_CONFIDENCE_SCORE)
  private LobConfidenceScore lobConfidenceScore;

  /**
   * Value is resource type.
   */
  @JsonAdapter(ObjectEnum.Adapter.class)
 public enum ObjectEnum {
    US_VERIFICATION("us_verification");

    private String value;

    ObjectEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ObjectEnum fromValue(String value) {
      for (ObjectEnum b : ObjectEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ObjectEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ObjectEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ObjectEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ObjectEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  private ObjectEnum _object = ObjectEnum.US_VERIFICATION;

  public UsVerification() {
  }

  public UsVerification components(UsComponents components) {
    
    
    
    
    this.components = components;
    return this;
  }

   /**
   * Get components
   * @return components
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UsComponents getComponents() {
    return components;
  }


  public void setComponents(UsComponents components) {
    
    
    
    this.components = components;
  }


  public UsVerification id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Unique identifier prefixed with &#x60;us_ver_&#x60;.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier prefixed with `us_ver_`.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public UsVerification recipient(String recipient) {
    
    
    
    
    this.recipient = recipient;
    return this;
  }

   /**
   * The intended recipient, typically a person&#39;s or firm&#39;s name.
   * @return recipient
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The intended recipient, typically a person's or firm's name.")

  public String getRecipient() {
    return recipient;
  }


  public void setRecipient(String recipient) {
    
    
    
    this.recipient = recipient;
  }


  public UsVerification primaryLine(String primaryLine) {
    
    
    
    
    this.primaryLine = primaryLine;
    return this;
  }

   /**
   * The primary delivery line (usually the street address) of the address. Combination of the following applicable &#x60;components&#x60;: * &#x60;primary_number&#x60; * &#x60;street_predirection&#x60; * &#x60;street_name&#x60; * &#x60;street_suffix&#x60; * &#x60;street_postdirection&#x60; * &#x60;secondary_designator&#x60; * &#x60;secondary_number&#x60; * &#x60;pmb_designator&#x60; * &#x60;pmb_number&#x60; 
   * @return primaryLine
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The primary delivery line (usually the street address) of the address. Combination of the following applicable `components`: * `primary_number` * `street_predirection` * `street_name` * `street_suffix` * `street_postdirection` * `secondary_designator` * `secondary_number` * `pmb_designator` * `pmb_number` ")

  public String getPrimaryLine() {
    return primaryLine;
  }


  public void setPrimaryLine(String primaryLine) {
    
    
    
    this.primaryLine = primaryLine;
  }


  public UsVerification secondaryLine(String secondaryLine) {
    
    
    
    
    this.secondaryLine = secondaryLine;
    return this;
  }

   /**
   * The secondary delivery line of the address. This field is typically empty but may contain information if &#x60;primary_line&#x60; is too long. 
   * @return secondaryLine
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The secondary delivery line of the address. This field is typically empty but may contain information if `primary_line` is too long. ")

  public String getSecondaryLine() {
    return secondaryLine;
  }


  public void setSecondaryLine(String secondaryLine) {
    
    
    
    this.secondaryLine = secondaryLine;
  }


  public UsVerification urbanization(String urbanization) {
    
    
    
    
    this.urbanization = urbanization;
    return this;
  }

   /**
   * Only present for addresses in Puerto Rico. An urbanization refers to an area, sector, or development within a city. See &lt;a href&#x3D;\&quot;https://pe.usps.com/text/pub28/28api_008.htm#:~:text&#x3D;I51.,-4%20Urbanizations&amp;text&#x3D;In%20Puerto%20Rico%2C%20identical%20street,placed%20before%20the%20urbanization%20name.\&quot; target&#x3D;\&quot;_blank\&quot;&gt;USPS documentation&lt;/a&gt; for clarification. 
   * @return urbanization
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Only present for addresses in Puerto Rico. An urbanization refers to an area, sector, or development within a city. See <a href=\"https://pe.usps.com/text/pub28/28api_008.htm#:~:text=I51.,-4%20Urbanizations&text=In%20Puerto%20Rico%2C%20identical%20street,placed%20before%20the%20urbanization%20name.\" target=\"_blank\">USPS documentation</a> for clarification. ")

  public String getUrbanization() {
    return urbanization;
  }


  public void setUrbanization(String urbanization) {
    
    
    
    this.urbanization = urbanization;
  }


  public UsVerification lastLine(String lastLine) {
    
    
    
    
    this.lastLine = lastLine;
    return this;
  }

   /**
   * Combination of the following applicable &#x60;components&#x60;: * City (&#x60;city&#x60;) * State (&#x60;state&#x60;) * ZIP code (&#x60;zip_code&#x60;) * ZIP+4 (&#x60;zip_code_plus_4&#x60;) 
   * @return lastLine
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Combination of the following applicable `components`: * City (`city`) * State (`state`) * ZIP code (`zip_code`) * ZIP+4 (`zip_code_plus_4`) ")

  public String getLastLine() {
    return lastLine;
  }


  public void setLastLine(String lastLine) {
    
    
    
    this.lastLine = lastLine;
  }


  public UsVerification deliverability(DeliverabilityEnum deliverability) {
    
    
    
    
    this.deliverability = deliverability;
    return this;
  }

   /**
   * Summarizes the deliverability of the &#x60;us_verification&#x60; object. For full details, see the &#x60;deliverability_analysis&#x60; field. Possible values are: * &#x60;deliverable&#x60; – The address is deliverable by the USPS. * &#x60;deliverable_unnecessary_unit&#x60; – The address is deliverable, but the secondary unit information is unnecessary. * &#x60;deliverable_incorrect_unit&#x60; – The address is deliverable to the building&#39;s default address but the secondary unit provided may not exist. There is a chance the mail will not reach the intended recipient. * &#x60;deliverable_missing_unit&#x60; – The address is deliverable to the building&#39;s default address but is missing secondary unit information. There is a chance the mail will not reach the intended recipient. * &#x60;undeliverable&#x60; – The address is not deliverable according to the USPS. 
   * @return deliverability
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Summarizes the deliverability of the `us_verification` object. For full details, see the `deliverability_analysis` field. Possible values are: * `deliverable` – The address is deliverable by the USPS. * `deliverable_unnecessary_unit` – The address is deliverable, but the secondary unit information is unnecessary. * `deliverable_incorrect_unit` – The address is deliverable to the building's default address but the secondary unit provided may not exist. There is a chance the mail will not reach the intended recipient. * `deliverable_missing_unit` – The address is deliverable to the building's default address but is missing secondary unit information. There is a chance the mail will not reach the intended recipient. * `undeliverable` – The address is not deliverable according to the USPS. ")

  public DeliverabilityEnum getDeliverability() {
    return deliverability;
  }


  public void setDeliverability(DeliverabilityEnum deliverability) {
    
    
    
    this.deliverability = deliverability;
  }


  public UsVerification validAddress(ValidAddressEnum validAddress) {
    
    
    
    
    this.validAddress = validAddress;
    return this;
  }

   /**
   * This field indicates whether an address was found in a more comprehensive address dataset that includes sources from the USPS, open source mapping data, and our proprietary mail delivery data. This field can be interpreted as a representation of whether an address is a real location or not. Additionally a valid address may contradict the deliverability field since an address can be a real valid location but the USPS may not deliver to that address. 
   * @return validAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This field indicates whether an address was found in a more comprehensive address dataset that includes sources from the USPS, open source mapping data, and our proprietary mail delivery data. This field can be interpreted as a representation of whether an address is a real location or not. Additionally a valid address may contradict the deliverability field since an address can be a real valid location but the USPS may not deliver to that address. ")

  public ValidAddressEnum getValidAddress() {
    return validAddress;
  }


  public void setValidAddress(ValidAddressEnum validAddress) {
    
    
    
    this.validAddress = validAddress;
  }


  public UsVerification deliverabilityAnalysis(DeliverabilityAnalysis deliverabilityAnalysis) {
    
    
    
    
    this.deliverabilityAnalysis = deliverabilityAnalysis;
    return this;
  }

   /**
   * Get deliverabilityAnalysis
   * @return deliverabilityAnalysis
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DeliverabilityAnalysis getDeliverabilityAnalysis() {
    return deliverabilityAnalysis;
  }


  public void setDeliverabilityAnalysis(DeliverabilityAnalysis deliverabilityAnalysis) {
    
    
    
    this.deliverabilityAnalysis = deliverabilityAnalysis;
  }


  public UsVerification lobConfidenceScore(LobConfidenceScore lobConfidenceScore) {
    
    
    
    
    this.lobConfidenceScore = lobConfidenceScore;
    return this;
  }

   /**
   * Get lobConfidenceScore
   * @return lobConfidenceScore
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LobConfidenceScore getLobConfidenceScore() {
    return lobConfidenceScore;
  }


  public void setLobConfidenceScore(LobConfidenceScore lobConfidenceScore) {
    
    
    
    this.lobConfidenceScore = lobConfidenceScore;
  }


  public UsVerification _object(ObjectEnum _object) {
    
    
    
    
    this._object = _object;
    return this;
  }

   /**
   * Value is resource type.
   * @return _object
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "US_VERIFICATION", value = "Value is resource type.")

  public ObjectEnum getObject() {
    return _object;
  }


  public void setObject(ObjectEnum _object) {
    
    
    
    this._object = _object;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the UsVerification instance itself
   */
  public UsVerification putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UsVerification usVerification = (UsVerification) o;
    return Objects.equals(this.components, usVerification.components) &&
        Objects.equals(this.id, usVerification.id) &&
        Objects.equals(this.recipient, usVerification.recipient) &&
        Objects.equals(this.primaryLine, usVerification.primaryLine) &&
        Objects.equals(this.secondaryLine, usVerification.secondaryLine) &&
        Objects.equals(this.urbanization, usVerification.urbanization) &&
        Objects.equals(this.lastLine, usVerification.lastLine) &&
        Objects.equals(this.deliverability, usVerification.deliverability) &&
        Objects.equals(this.validAddress, usVerification.validAddress) &&
        Objects.equals(this.deliverabilityAnalysis, usVerification.deliverabilityAnalysis) &&
        Objects.equals(this.lobConfidenceScore, usVerification.lobConfidenceScore) &&
        Objects.equals(this._object, usVerification._object)&&
        Objects.equals(this.additionalProperties, usVerification.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(components, id, recipient, primaryLine, secondaryLine, urbanization, lastLine, deliverability, validAddress, deliverabilityAnalysis, lobConfidenceScore, _object, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UsVerification {\n");
    sb.append("    components: ").append(toIndentedString(components)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    recipient: ").append(toIndentedString(recipient)).append("\n");
    sb.append("    primaryLine: ").append(toIndentedString(primaryLine)).append("\n");
    sb.append("    secondaryLine: ").append(toIndentedString(secondaryLine)).append("\n");
    sb.append("    urbanization: ").append(toIndentedString(urbanization)).append("\n");
    sb.append("    lastLine: ").append(toIndentedString(lastLine)).append("\n");
    sb.append("    deliverability: ").append(toIndentedString(deliverability)).append("\n");
    sb.append("    validAddress: ").append(toIndentedString(validAddress)).append("\n");
    sb.append("    deliverabilityAnalysis: ").append(toIndentedString(deliverabilityAnalysis)).append("\n");
    sb.append("    lobConfidenceScore: ").append(toIndentedString(lobConfidenceScore)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("components");
    openapiFields.add("id");
    openapiFields.add("recipient");
    openapiFields.add("primary_line");
    openapiFields.add("secondary_line");
    openapiFields.add("urbanization");
    openapiFields.add("last_line");
    openapiFields.add("deliverability");
    openapiFields.add("valid_address");
    openapiFields.add("deliverability_analysis");
    openapiFields.add("lob_confidence_score");
    openapiFields.add("object");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UsVerification
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UsVerification.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UsVerification is not found in the empty JSON string", UsVerification.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `components`
      if (jsonObj.get("components") != null && !jsonObj.get("components").isJsonNull()) {
        UsComponents.validateJsonObject(jsonObj.getAsJsonObject("components"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("recipient").isJsonNull() && (jsonObj.get("recipient") != null && !jsonObj.get("recipient").isJsonNull()) && !jsonObj.get("recipient").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipient` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipient").toString()));
      }
      if ((jsonObj.get("primary_line") != null && !jsonObj.get("primary_line").isJsonNull()) && !jsonObj.get("primary_line").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primary_line` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primary_line").toString()));
      }
      if ((jsonObj.get("secondary_line") != null && !jsonObj.get("secondary_line").isJsonNull()) && !jsonObj.get("secondary_line").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secondary_line` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secondary_line").toString()));
      }
      if ((jsonObj.get("urbanization") != null && !jsonObj.get("urbanization").isJsonNull()) && !jsonObj.get("urbanization").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `urbanization` to be a primitive type in the JSON string but got `%s`", jsonObj.get("urbanization").toString()));
      }
      if ((jsonObj.get("last_line") != null && !jsonObj.get("last_line").isJsonNull()) && !jsonObj.get("last_line").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_line` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_line").toString()));
      }
      if ((jsonObj.get("deliverability") != null && !jsonObj.get("deliverability").isJsonNull()) && !jsonObj.get("deliverability").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deliverability` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deliverability").toString()));
      }
      // validate the optional field `deliverability_analysis`
      if (jsonObj.get("deliverability_analysis") != null && !jsonObj.get("deliverability_analysis").isJsonNull()) {
        DeliverabilityAnalysis.validateJsonObject(jsonObj.getAsJsonObject("deliverability_analysis"));
      }
      // validate the optional field `lob_confidence_score`
      if (jsonObj.get("lob_confidence_score") != null && !jsonObj.get("lob_confidence_score").isJsonNull()) {
        LobConfidenceScore.validateJsonObject(jsonObj.getAsJsonObject("lob_confidence_score"));
      }
      if ((jsonObj.get("object") != null && !jsonObj.get("object").isJsonNull()) && !jsonObj.get("object").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UsVerification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UsVerification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UsVerification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UsVerification.class));

       return (TypeAdapter<T>) new TypeAdapter<UsVerification>() {
           @Override
           public void write(JsonWriter out, UsVerification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public UsVerification read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             UsVerification instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UsVerification given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UsVerification
  * @throws IOException if the JSON string is invalid with respect to UsVerification
  */
  public static UsVerification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UsVerification.class);
  }

 /**
  * Convert an instance of UsVerification to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 
 *
 * The version of the OpenAPI document: 1.19.28
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.DpvFootnote;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * A nested object containing a breakdown of the deliverability of an address.
 */
@ApiModel(description = "A nested object containing a breakdown of the deliverability of an address.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class DeliverabilityAnalysis {
  /**
   * Result of Delivery Point Validation (DPV), which determines whether or not the address is deliverable by the USPS. Possible values are: * &#x60;Y&#x60; –– The address is deliverable by the USPS. * &#x60;S&#x60; –– The address is deliverable by removing the provided secondary unit designator. This information may be incorrect or unnecessary. * &#x60;D&#x60; –– The address is deliverable to the building&#39;s default address but is missing a secondary unit designator and/or number.   There is a chance the mail will not reach the intended recipient. * &#x60;N&#x60; –– The address is not deliverable according to the USPS, but parts of the address are valid (such as the street and ZIP code). * &#x60;&#39;&#39;&#x60; –– This address is not deliverable. No matching street could be found within the city or ZIP code. 
   */
  @JsonAdapter(DpvConfirmationEnum.Adapter.class)
 public enum DpvConfirmationEnum {
    Y("Y"),
    
    S("S"),
    
    D("D"),
    
    N("N"),
    
    EMPTY("");

    private String value;

    DpvConfirmationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DpvConfirmationEnum fromValue(String value) {
      for (DpvConfirmationEnum b : DpvConfirmationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DpvConfirmationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DpvConfirmationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DpvConfirmationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DpvConfirmationEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DPV_CONFIRMATION = "dpv_confirmation";
  @SerializedName(SERIALIZED_NAME_DPV_CONFIRMATION)
  private DpvConfirmationEnum dpvConfirmation;

  /**
   * Indicates whether or not the address is &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/Commercial_mail_receiving_agency\&quot; target&#x3D;\&quot;_blank\&quot;&gt;CMRA-authorized&lt;/a&gt;. Possible values are: * &#x60;Y&#x60; –– Address is CMRA-authorized. * &#x60;N&#x60; –– Address is not CMRA-authorized. * &#x60;&#39;&#39;&#x60; –– A DPV match is not made (&#x60;deliverability_analysis[dpv_confirmation]&#x60; is &#x60;N&#x60; or an empty string). 
   */
  @JsonAdapter(DpvCmraEnum.Adapter.class)
 public enum DpvCmraEnum {
    Y("Y"),
    
    N("N"),
    
    EMPTY("");

    private String value;

    DpvCmraEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DpvCmraEnum fromValue(String value) {
      for (DpvCmraEnum b : DpvCmraEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DpvCmraEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DpvCmraEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DpvCmraEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DpvCmraEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DPV_CMRA = "dpv_cmra";
  @SerializedName(SERIALIZED_NAME_DPV_CMRA)
  private DpvCmraEnum dpvCmra;

  /**
   * Indicates that an address was once deliverable, but has become vacant and is no longer receiving deliveries. Possible values are: * &#x60;Y&#x60; –– Address is vacant. * &#x60;N&#x60; –– Address is not vacant. * &#x60;&#39;&#39;&#x60; –– A DPV match is not made (&#x60;deliverability_analysis[dpv_confirmation]&#x60; is &#x60;N&#x60; or an empty string). 
   */
  @JsonAdapter(DpvVacantEnum.Adapter.class)
 public enum DpvVacantEnum {
    Y("Y"),
    
    N("N"),
    
    EMPTY("");

    private String value;

    DpvVacantEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DpvVacantEnum fromValue(String value) {
      for (DpvVacantEnum b : DpvVacantEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DpvVacantEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DpvVacantEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DpvVacantEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DpvVacantEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DPV_VACANT = "dpv_vacant";
  @SerializedName(SERIALIZED_NAME_DPV_VACANT)
  private DpvVacantEnum dpvVacant;

  /**
   * Corresponds to the USPS field &#x60;dpv_no_stat&#x60;. Indicates that an address has been vacated in the recent past, and is no longer receiving deliveries. If it&#39;s been unoccupied for 90+ days, or temporarily vacant, this will be flagged. Possible values are: * &#x60;Y&#x60; –– Address is active. * &#x60;N&#x60; –– Address is not active. * &#x60;&#39;&#39;&#x60; –– A DPV match is not made (&#x60;deliverability_analysis[dpv_confirmation]&#x60; is &#x60;N&#x60; or an empty string). 
   */
  @JsonAdapter(DpvActiveEnum.Adapter.class)
 public enum DpvActiveEnum {
    Y("Y"),
    
    N("N"),
    
    EMPTY("");

    private String value;

    DpvActiveEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DpvActiveEnum fromValue(String value) {
      for (DpvActiveEnum b : DpvActiveEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DpvActiveEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DpvActiveEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DpvActiveEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DpvActiveEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DPV_ACTIVE = "dpv_active";
  @SerializedName(SERIALIZED_NAME_DPV_ACTIVE)
  private DpvActiveEnum dpvActive;

  /**
   * Indicates the reason why an address is vacant or no longer receiving deliveries. Possible values are: * &#x60;01&#x60; –– Address does not receive mail from the USPS directly, but is serviced by a drop address. * &#x60;02&#x60; –– Address not yet deliverable. * &#x60;03&#x60; –– A DPV match is not made (&#x60;deliverability_analysis[dpv_confirmation]&#x60; is &#x60;N&#x60; or an empty string). * &#x60;04&#x60; –– Address is a College, Military Zone, or other type. * &#x60;05&#x60; –– Address no longer receives deliveries. * &#x60;06&#x60; –– Address is missing required secondary information. * &#x60;&#39;&#39;&#x60; –– A DPV match is not made or the address is active. 
   */
  @JsonAdapter(DpvInactiveReasonEnum.Adapter.class)
 public enum DpvInactiveReasonEnum {
    _01("01"),
    
    _02("02"),
    
    _03("03"),
    
    _04("04"),
    
    _05("05"),
    
    _06("06"),
    
    EMPTY("");

    private String value;

    DpvInactiveReasonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DpvInactiveReasonEnum fromValue(String value) {
      for (DpvInactiveReasonEnum b : DpvInactiveReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DpvInactiveReasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DpvInactiveReasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DpvInactiveReasonEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DpvInactiveReasonEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DPV_INACTIVE_REASON = "dpv_inactive_reason";
  @SerializedName(SERIALIZED_NAME_DPV_INACTIVE_REASON)
  private DpvInactiveReasonEnum dpvInactiveReason;

  /**
   * Indicates a street address for which mail is delivered to a PO Box. Possible values are: * &#x60;Y&#x60; –– Address is a PO Box throwback delivery point. * &#x60;N&#x60; –– Address is not a PO Box throwback delivery point. * &#x60;&#39;&#39;&#x60; –– A DPV match is not made (&#x60;deliverability_analysis[dpv_confirmation]&#x60; is &#x60;N&#x60; or an empty string). 
   */
  @JsonAdapter(DpvThrowbackEnum.Adapter.class)
 public enum DpvThrowbackEnum {
    Y("Y"),
    
    N("N"),
    
    EMPTY("");

    private String value;

    DpvThrowbackEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DpvThrowbackEnum fromValue(String value) {
      for (DpvThrowbackEnum b : DpvThrowbackEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DpvThrowbackEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DpvThrowbackEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DpvThrowbackEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DpvThrowbackEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DPV_THROWBACK = "dpv_throwback";
  @SerializedName(SERIALIZED_NAME_DPV_THROWBACK)
  private DpvThrowbackEnum dpvThrowback;

  /**
   * Indicates whether deliveries are not performed on one or more days of the week at an address. Possible values are: * &#x60;Y&#x60; –– Mail delivery does not occur on some days of the week. * &#x60;N&#x60; –– Mail delivery occurs every day of the week. * &#x60;&#39;&#39;&#x60; –– A DPV match is not made (&#x60;deliverability_analysis[dpv_confirmation]&#x60; is &#x60;N&#x60; or an empty string). 
   */
  @JsonAdapter(DpvNonDeliveryDayFlagEnum.Adapter.class)
 public enum DpvNonDeliveryDayFlagEnum {
    Y("Y"),
    
    N("N"),
    
    EMPTY("");

    private String value;

    DpvNonDeliveryDayFlagEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DpvNonDeliveryDayFlagEnum fromValue(String value) {
      for (DpvNonDeliveryDayFlagEnum b : DpvNonDeliveryDayFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DpvNonDeliveryDayFlagEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DpvNonDeliveryDayFlagEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DpvNonDeliveryDayFlagEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DpvNonDeliveryDayFlagEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DPV_NON_DELIVERY_DAY_FLAG = "dpv_non_delivery_day_flag";
  @SerializedName(SERIALIZED_NAME_DPV_NON_DELIVERY_DAY_FLAG)
  private DpvNonDeliveryDayFlagEnum dpvNonDeliveryDayFlag;

  public static final String SERIALIZED_NAME_DPV_NON_DELIVERY_DAY_VALUES = "dpv_non_delivery_day_values";
  @SerializedName(SERIALIZED_NAME_DPV_NON_DELIVERY_DAY_VALUES)
  private String dpvNonDeliveryDayValues;

  /**
   * Indicates packages to this address will not be left due to security concerns. Possible values are: * &#x60;Y&#x60; –– Address does not have a secure mailbox. * &#x60;N&#x60; –– Address has a secure mailbox. * &#x60;&#39;&#39;&#x60; –– A DPV match is not made (&#x60;deliverability_analysis[dpv_confirmation]&#x60; is &#x60;N&#x60; or an empty string). 
   */
  @JsonAdapter(DpvNoSecureLocationEnum.Adapter.class)
 public enum DpvNoSecureLocationEnum {
    Y("Y"),
    
    N("N"),
    
    EMPTY("");

    private String value;

    DpvNoSecureLocationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DpvNoSecureLocationEnum fromValue(String value) {
      for (DpvNoSecureLocationEnum b : DpvNoSecureLocationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DpvNoSecureLocationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DpvNoSecureLocationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DpvNoSecureLocationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DpvNoSecureLocationEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DPV_NO_SECURE_LOCATION = "dpv_no_secure_location";
  @SerializedName(SERIALIZED_NAME_DPV_NO_SECURE_LOCATION)
  private DpvNoSecureLocationEnum dpvNoSecureLocation;

  /**
   * Indicates the door of the address is not accessible for mail delivery. Possible values are: * &#x60;Y&#x60; –– Door is not accessible. * &#x60;N&#x60; –– Door is accessible. * &#x60;&#39;&#39;&#x60; –– A DPV match is not made (&#x60;deliverability_analysis[dpv_confirmation]&#x60; is &#x60;N&#x60; or an empty string). 
   */
  @JsonAdapter(DpvDoorNotAccessibleEnum.Adapter.class)
 public enum DpvDoorNotAccessibleEnum {
    Y("Y"),
    
    N("N"),
    
    EMPTY("");

    private String value;

    DpvDoorNotAccessibleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DpvDoorNotAccessibleEnum fromValue(String value) {
      for (DpvDoorNotAccessibleEnum b : DpvDoorNotAccessibleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DpvDoorNotAccessibleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DpvDoorNotAccessibleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DpvDoorNotAccessibleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DpvDoorNotAccessibleEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DPV_DOOR_NOT_ACCESSIBLE = "dpv_door_not_accessible";
  @SerializedName(SERIALIZED_NAME_DPV_DOOR_NOT_ACCESSIBLE)
  private DpvDoorNotAccessibleEnum dpvDoorNotAccessible;

  public static final String SERIALIZED_NAME_DPV_FOOTNOTES = "dpv_footnotes";
  @SerializedName(SERIALIZED_NAME_DPV_FOOTNOTES)
  private List<DpvFootnote> dpvFootnotes = new ArrayList<>();

  public static final String SERIALIZED_NAME_EWS_MATCH = "ews_match";
  @SerializedName(SERIALIZED_NAME_EWS_MATCH)
  private Boolean ewsMatch;

  /**
   * Indicates whether this address has been converted by &lt;a href&#x3D;\&quot;https://postalpro.usps.com/address-quality/lacslink\&quot; target&#x3D;\&quot;_blank\&quot;&gt;LACS&lt;sup&gt;Link&lt;/sup&gt;&lt;/a&gt;. LACS&lt;sup&gt;Link&lt;/sup&gt; corrects outdated addresses into their modern counterparts. Possible values are: * &#x60;Y&#x60; –– New address produced with a matching record in LACS&lt;sup&gt;Link&lt;/sup&gt;. * &#x60;N&#x60; –– New address could not be produced with a matching record in LACS&lt;sup&gt;Link&lt;/sup&gt;. * &#x60;&#39;&#39;&#x60; –– A DPV match is not made (&#x60;deliverability_analysis[dpv_confirmation]&#x60; is &#x60;N&#x60; or an empty string). 
   */
  @JsonAdapter(LacsIndicatorEnum.Adapter.class)
 public enum LacsIndicatorEnum {
    Y("Y"),
    
    N("N"),
    
    EMPTY("");

    private String value;

    LacsIndicatorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LacsIndicatorEnum fromValue(String value) {
      for (LacsIndicatorEnum b : LacsIndicatorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LacsIndicatorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LacsIndicatorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LacsIndicatorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LacsIndicatorEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LACS_INDICATOR = "lacs_indicator";
  @SerializedName(SERIALIZED_NAME_LACS_INDICATOR)
  private LacsIndicatorEnum lacsIndicator;

  public static final String SERIALIZED_NAME_LACS_RETURN_CODE = "lacs_return_code";
  @SerializedName(SERIALIZED_NAME_LACS_RETURN_CODE)
  private String lacsReturnCode;

  /**
   * A return code that indicates whether the address was matched and corrected by &lt;a href&#x3D;\&quot;https://postalpro.usps.com/address-quality-solutions/suitelink\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Suite&lt;sup&gt;Link&lt;/sup&gt;&lt;/a&gt;. Suite&lt;sup&gt;Link&lt;/sup&gt; attempts to provide secondary information to business addresses. Possible values are: * &#x60;A&#x60; –– A Suite&lt;sup&gt;Link&lt;/sup&gt; match was found and secondary information was added. * &#x60;00&#x60; –– A Suite&lt;sup&gt;Link&lt;/sup&gt; match could not be found and no secondary information was added. * &#x60;&#39;&#39;&#x60; –– Suite&lt;sup&gt;Link&lt;/sup&gt; lookup was not attempted. 
   */
  @JsonAdapter(SuiteReturnCodeEnum.Adapter.class)
 public enum SuiteReturnCodeEnum {
    A("A"),
    
    _00("00"),
    
    EMPTY("");

    private String value;

    SuiteReturnCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SuiteReturnCodeEnum fromValue(String value) {
      for (SuiteReturnCodeEnum b : SuiteReturnCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SuiteReturnCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SuiteReturnCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SuiteReturnCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SuiteReturnCodeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SUITE_RETURN_CODE = "suite_return_code";
  @SerializedName(SERIALIZED_NAME_SUITE_RETURN_CODE)
  private SuiteReturnCodeEnum suiteReturnCode;

  public DeliverabilityAnalysis() {
  }

  public DeliverabilityAnalysis dpvConfirmation(DpvConfirmationEnum dpvConfirmation) {
    
    
    
    
    this.dpvConfirmation = dpvConfirmation;
    return this;
  }

   /**
   * Result of Delivery Point Validation (DPV), which determines whether or not the address is deliverable by the USPS. Possible values are: * &#x60;Y&#x60; –– The address is deliverable by the USPS. * &#x60;S&#x60; –– The address is deliverable by removing the provided secondary unit designator. This information may be incorrect or unnecessary. * &#x60;D&#x60; –– The address is deliverable to the building&#39;s default address but is missing a secondary unit designator and/or number.   There is a chance the mail will not reach the intended recipient. * &#x60;N&#x60; –– The address is not deliverable according to the USPS, but parts of the address are valid (such as the street and ZIP code). * &#x60;&#39;&#39;&#x60; –– This address is not deliverable. No matching street could be found within the city or ZIP code. 
   * @return dpvConfirmation
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Y", required = true, value = "Result of Delivery Point Validation (DPV), which determines whether or not the address is deliverable by the USPS. Possible values are: * `Y` –– The address is deliverable by the USPS. * `S` –– The address is deliverable by removing the provided secondary unit designator. This information may be incorrect or unnecessary. * `D` –– The address is deliverable to the building's default address but is missing a secondary unit designator and/or number.   There is a chance the mail will not reach the intended recipient. * `N` –– The address is not deliverable according to the USPS, but parts of the address are valid (such as the street and ZIP code). * `''` –– This address is not deliverable. No matching street could be found within the city or ZIP code. ")

  public DpvConfirmationEnum getDpvConfirmation() {
    return dpvConfirmation;
  }


  public void setDpvConfirmation(DpvConfirmationEnum dpvConfirmation) {
    
    
    
    this.dpvConfirmation = dpvConfirmation;
  }


  public DeliverabilityAnalysis dpvCmra(DpvCmraEnum dpvCmra) {
    
    
    
    
    this.dpvCmra = dpvCmra;
    return this;
  }

   /**
   * Indicates whether or not the address is &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/Commercial_mail_receiving_agency\&quot; target&#x3D;\&quot;_blank\&quot;&gt;CMRA-authorized&lt;/a&gt;. Possible values are: * &#x60;Y&#x60; –– Address is CMRA-authorized. * &#x60;N&#x60; –– Address is not CMRA-authorized. * &#x60;&#39;&#39;&#x60; –– A DPV match is not made (&#x60;deliverability_analysis[dpv_confirmation]&#x60; is &#x60;N&#x60; or an empty string). 
   * @return dpvCmra
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "N", required = true, value = "Indicates whether or not the address is <a href=\"https://en.wikipedia.org/wiki/Commercial_mail_receiving_agency\" target=\"_blank\">CMRA-authorized</a>. Possible values are: * `Y` –– Address is CMRA-authorized. * `N` –– Address is not CMRA-authorized. * `''` –– A DPV match is not made (`deliverability_analysis[dpv_confirmation]` is `N` or an empty string). ")

  public DpvCmraEnum getDpvCmra() {
    return dpvCmra;
  }


  public void setDpvCmra(DpvCmraEnum dpvCmra) {
    
    
    
    this.dpvCmra = dpvCmra;
  }


  public DeliverabilityAnalysis dpvVacant(DpvVacantEnum dpvVacant) {
    
    
    
    
    this.dpvVacant = dpvVacant;
    return this;
  }

   /**
   * Indicates that an address was once deliverable, but has become vacant and is no longer receiving deliveries. Possible values are: * &#x60;Y&#x60; –– Address is vacant. * &#x60;N&#x60; –– Address is not vacant. * &#x60;&#39;&#39;&#x60; –– A DPV match is not made (&#x60;deliverability_analysis[dpv_confirmation]&#x60; is &#x60;N&#x60; or an empty string). 
   * @return dpvVacant
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "N", required = true, value = "Indicates that an address was once deliverable, but has become vacant and is no longer receiving deliveries. Possible values are: * `Y` –– Address is vacant. * `N` –– Address is not vacant. * `''` –– A DPV match is not made (`deliverability_analysis[dpv_confirmation]` is `N` or an empty string). ")

  public DpvVacantEnum getDpvVacant() {
    return dpvVacant;
  }


  public void setDpvVacant(DpvVacantEnum dpvVacant) {
    
    
    
    this.dpvVacant = dpvVacant;
  }


  public DeliverabilityAnalysis dpvActive(DpvActiveEnum dpvActive) {
    
    
    
    
    this.dpvActive = dpvActive;
    return this;
  }

   /**
   * Corresponds to the USPS field &#x60;dpv_no_stat&#x60;. Indicates that an address has been vacated in the recent past, and is no longer receiving deliveries. If it&#39;s been unoccupied for 90+ days, or temporarily vacant, this will be flagged. Possible values are: * &#x60;Y&#x60; –– Address is active. * &#x60;N&#x60; –– Address is not active. * &#x60;&#39;&#39;&#x60; –– A DPV match is not made (&#x60;deliverability_analysis[dpv_confirmation]&#x60; is &#x60;N&#x60; or an empty string). 
   * @return dpvActive
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Y", required = true, value = "Corresponds to the USPS field `dpv_no_stat`. Indicates that an address has been vacated in the recent past, and is no longer receiving deliveries. If it's been unoccupied for 90+ days, or temporarily vacant, this will be flagged. Possible values are: * `Y` –– Address is active. * `N` –– Address is not active. * `''` –– A DPV match is not made (`deliverability_analysis[dpv_confirmation]` is `N` or an empty string). ")

  public DpvActiveEnum getDpvActive() {
    return dpvActive;
  }


  public void setDpvActive(DpvActiveEnum dpvActive) {
    
    
    
    this.dpvActive = dpvActive;
  }


  public DeliverabilityAnalysis dpvInactiveReason(DpvInactiveReasonEnum dpvInactiveReason) {
    
    
    
    
    this.dpvInactiveReason = dpvInactiveReason;
    return this;
  }

   /**
   * Indicates the reason why an address is vacant or no longer receiving deliveries. Possible values are: * &#x60;01&#x60; –– Address does not receive mail from the USPS directly, but is serviced by a drop address. * &#x60;02&#x60; –– Address not yet deliverable. * &#x60;03&#x60; –– A DPV match is not made (&#x60;deliverability_analysis[dpv_confirmation]&#x60; is &#x60;N&#x60; or an empty string). * &#x60;04&#x60; –– Address is a College, Military Zone, or other type. * &#x60;05&#x60; –– Address no longer receives deliveries. * &#x60;06&#x60; –– Address is missing required secondary information. * &#x60;&#39;&#39;&#x60; –– A DPV match is not made or the address is active. 
   * @return dpvInactiveReason
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "_06", required = true, value = "Indicates the reason why an address is vacant or no longer receiving deliveries. Possible values are: * `01` –– Address does not receive mail from the USPS directly, but is serviced by a drop address. * `02` –– Address not yet deliverable. * `03` –– A DPV match is not made (`deliverability_analysis[dpv_confirmation]` is `N` or an empty string). * `04` –– Address is a College, Military Zone, or other type. * `05` –– Address no longer receives deliveries. * `06` –– Address is missing required secondary information. * `''` –– A DPV match is not made or the address is active. ")

  public DpvInactiveReasonEnum getDpvInactiveReason() {
    return dpvInactiveReason;
  }


  public void setDpvInactiveReason(DpvInactiveReasonEnum dpvInactiveReason) {
    
    
    
    this.dpvInactiveReason = dpvInactiveReason;
  }


  public DeliverabilityAnalysis dpvThrowback(DpvThrowbackEnum dpvThrowback) {
    
    
    
    
    this.dpvThrowback = dpvThrowback;
    return this;
  }

   /**
   * Indicates a street address for which mail is delivered to a PO Box. Possible values are: * &#x60;Y&#x60; –– Address is a PO Box throwback delivery point. * &#x60;N&#x60; –– Address is not a PO Box throwback delivery point. * &#x60;&#39;&#39;&#x60; –– A DPV match is not made (&#x60;deliverability_analysis[dpv_confirmation]&#x60; is &#x60;N&#x60; or an empty string). 
   * @return dpvThrowback
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "N", required = true, value = "Indicates a street address for which mail is delivered to a PO Box. Possible values are: * `Y` –– Address is a PO Box throwback delivery point. * `N` –– Address is not a PO Box throwback delivery point. * `''` –– A DPV match is not made (`deliverability_analysis[dpv_confirmation]` is `N` or an empty string). ")

  public DpvThrowbackEnum getDpvThrowback() {
    return dpvThrowback;
  }


  public void setDpvThrowback(DpvThrowbackEnum dpvThrowback) {
    
    
    
    this.dpvThrowback = dpvThrowback;
  }


  public DeliverabilityAnalysis dpvNonDeliveryDayFlag(DpvNonDeliveryDayFlagEnum dpvNonDeliveryDayFlag) {
    
    
    
    
    this.dpvNonDeliveryDayFlag = dpvNonDeliveryDayFlag;
    return this;
  }

   /**
   * Indicates whether deliveries are not performed on one or more days of the week at an address. Possible values are: * &#x60;Y&#x60; –– Mail delivery does not occur on some days of the week. * &#x60;N&#x60; –– Mail delivery occurs every day of the week. * &#x60;&#39;&#39;&#x60; –– A DPV match is not made (&#x60;deliverability_analysis[dpv_confirmation]&#x60; is &#x60;N&#x60; or an empty string). 
   * @return dpvNonDeliveryDayFlag
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "N", required = true, value = "Indicates whether deliveries are not performed on one or more days of the week at an address. Possible values are: * `Y` –– Mail delivery does not occur on some days of the week. * `N` –– Mail delivery occurs every day of the week. * `''` –– A DPV match is not made (`deliverability_analysis[dpv_confirmation]` is `N` or an empty string). ")

  public DpvNonDeliveryDayFlagEnum getDpvNonDeliveryDayFlag() {
    return dpvNonDeliveryDayFlag;
  }


  public void setDpvNonDeliveryDayFlag(DpvNonDeliveryDayFlagEnum dpvNonDeliveryDayFlag) {
    
    
    
    this.dpvNonDeliveryDayFlag = dpvNonDeliveryDayFlag;
  }


  public DeliverabilityAnalysis dpvNonDeliveryDayValues(String dpvNonDeliveryDayValues) {
    
    
    
    
    this.dpvNonDeliveryDayValues = dpvNonDeliveryDayValues;
    return this;
  }

   /**
   * Indicates days of the week (starting on Sunday) deliveries are not performed at an address. For example: * &#x60;YNNNNNN&#x60; –– Mail delivery does not occur on Sunday&#39;s. * &#x60;NYNNNYN&#x60; –– Mail delivery does not occur on Monday&#39;s or Friday&#39;s. * &#x60;&#39;&#39;&#x60; –– A DPV match is not made (&#x60;deliverability_analysis[dpv_confirmation]&#x60; is &#x60;N&#x60; or an empty string) or address receives mail every day of the week (&#x60;deliverability_analysis[dpv_non_delivery_day_flag]&#x60; is &#x60;N&#x60; or an empty string). 
   * @return dpvNonDeliveryDayValues
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "YNNNNNN", required = true, value = "Indicates days of the week (starting on Sunday) deliveries are not performed at an address. For example: * `YNNNNNN` –– Mail delivery does not occur on Sunday's. * `NYNNNYN` –– Mail delivery does not occur on Monday's or Friday's. * `''` –– A DPV match is not made (`deliverability_analysis[dpv_confirmation]` is `N` or an empty string) or address receives mail every day of the week (`deliverability_analysis[dpv_non_delivery_day_flag]` is `N` or an empty string). ")

  public String getDpvNonDeliveryDayValues() {
    return dpvNonDeliveryDayValues;
  }


  public void setDpvNonDeliveryDayValues(String dpvNonDeliveryDayValues) {
    
    
    
    this.dpvNonDeliveryDayValues = dpvNonDeliveryDayValues;
  }


  public DeliverabilityAnalysis dpvNoSecureLocation(DpvNoSecureLocationEnum dpvNoSecureLocation) {
    
    
    
    
    this.dpvNoSecureLocation = dpvNoSecureLocation;
    return this;
  }

   /**
   * Indicates packages to this address will not be left due to security concerns. Possible values are: * &#x60;Y&#x60; –– Address does not have a secure mailbox. * &#x60;N&#x60; –– Address has a secure mailbox. * &#x60;&#39;&#39;&#x60; –– A DPV match is not made (&#x60;deliverability_analysis[dpv_confirmation]&#x60; is &#x60;N&#x60; or an empty string). 
   * @return dpvNoSecureLocation
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "N", required = true, value = "Indicates packages to this address will not be left due to security concerns. Possible values are: * `Y` –– Address does not have a secure mailbox. * `N` –– Address has a secure mailbox. * `''` –– A DPV match is not made (`deliverability_analysis[dpv_confirmation]` is `N` or an empty string). ")

  public DpvNoSecureLocationEnum getDpvNoSecureLocation() {
    return dpvNoSecureLocation;
  }


  public void setDpvNoSecureLocation(DpvNoSecureLocationEnum dpvNoSecureLocation) {
    
    
    
    this.dpvNoSecureLocation = dpvNoSecureLocation;
  }


  public DeliverabilityAnalysis dpvDoorNotAccessible(DpvDoorNotAccessibleEnum dpvDoorNotAccessible) {
    
    
    
    
    this.dpvDoorNotAccessible = dpvDoorNotAccessible;
    return this;
  }

   /**
   * Indicates the door of the address is not accessible for mail delivery. Possible values are: * &#x60;Y&#x60; –– Door is not accessible. * &#x60;N&#x60; –– Door is accessible. * &#x60;&#39;&#39;&#x60; –– A DPV match is not made (&#x60;deliverability_analysis[dpv_confirmation]&#x60; is &#x60;N&#x60; or an empty string). 
   * @return dpvDoorNotAccessible
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "N", required = true, value = "Indicates the door of the address is not accessible for mail delivery. Possible values are: * `Y` –– Door is not accessible. * `N` –– Door is accessible. * `''` –– A DPV match is not made (`deliverability_analysis[dpv_confirmation]` is `N` or an empty string). ")

  public DpvDoorNotAccessibleEnum getDpvDoorNotAccessible() {
    return dpvDoorNotAccessible;
  }


  public void setDpvDoorNotAccessible(DpvDoorNotAccessibleEnum dpvDoorNotAccessible) {
    
    
    
    this.dpvDoorNotAccessible = dpvDoorNotAccessible;
  }


  public DeliverabilityAnalysis dpvFootnotes(List<DpvFootnote> dpvFootnotes) {
    
    
    
    
    this.dpvFootnotes = dpvFootnotes;
    return this;
  }

  public DeliverabilityAnalysis addDpvFootnotesItem(DpvFootnote dpvFootnotesItem) {
    this.dpvFootnotes.add(dpvFootnotesItem);
    return this;
  }

   /**
   * An array of 2-character strings that gives more insight into how &#x60;deliverability_analysis[dpv_confirmation]&#x60; was determined. Will always include at least 1 string, and can include up to 3. For details, see [US Verification Details](#tag/US-Verification-Types). 
   * @return dpvFootnotes
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "[\"AA\",\"BB\"]", required = true, value = "An array of 2-character strings that gives more insight into how `deliverability_analysis[dpv_confirmation]` was determined. Will always include at least 1 string, and can include up to 3. For details, see [US Verification Details](#tag/US-Verification-Types). ")

  public List<DpvFootnote> getDpvFootnotes() {
    return dpvFootnotes;
  }


  public void setDpvFootnotes(List<DpvFootnote> dpvFootnotes) {
    
    
    
    this.dpvFootnotes = dpvFootnotes;
  }


  public DeliverabilityAnalysis ewsMatch(Boolean ewsMatch) {
    
    
    
    
    this.ewsMatch = ewsMatch;
    return this;
  }

   /**
   * Indicates whether or not an address has been flagged in the &lt;a href&#x3D;\&quot;https://docs.informatica.com/data-engineering/data-engineering-quality/10-4-0/address-validator-port-reference/postal-carrier-certification-data-ports/early-warning-system-return-code.html\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Early Warning System&lt;/a&gt;, meaning the address is under development and not yet ready to receive mail. However, it should become available in a few months. 
   * @return ewsMatch
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "false", required = true, value = "Indicates whether or not an address has been flagged in the <a href=\"https://docs.informatica.com/data-engineering/data-engineering-quality/10-4-0/address-validator-port-reference/postal-carrier-certification-data-ports/early-warning-system-return-code.html\" target=\"_blank\">Early Warning System</a>, meaning the address is under development and not yet ready to receive mail. However, it should become available in a few months. ")

  public Boolean getEwsMatch() {
    return ewsMatch;
  }


  public void setEwsMatch(Boolean ewsMatch) {
    
    
    
    this.ewsMatch = ewsMatch;
  }


  public DeliverabilityAnalysis lacsIndicator(LacsIndicatorEnum lacsIndicator) {
    
    
    
    
    this.lacsIndicator = lacsIndicator;
    return this;
  }

   /**
   * Indicates whether this address has been converted by &lt;a href&#x3D;\&quot;https://postalpro.usps.com/address-quality/lacslink\&quot; target&#x3D;\&quot;_blank\&quot;&gt;LACS&lt;sup&gt;Link&lt;/sup&gt;&lt;/a&gt;. LACS&lt;sup&gt;Link&lt;/sup&gt; corrects outdated addresses into their modern counterparts. Possible values are: * &#x60;Y&#x60; –– New address produced with a matching record in LACS&lt;sup&gt;Link&lt;/sup&gt;. * &#x60;N&#x60; –– New address could not be produced with a matching record in LACS&lt;sup&gt;Link&lt;/sup&gt;. * &#x60;&#39;&#39;&#x60; –– A DPV match is not made (&#x60;deliverability_analysis[dpv_confirmation]&#x60; is &#x60;N&#x60; or an empty string). 
   * @return lacsIndicator
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "EMPTY", required = true, value = "Indicates whether this address has been converted by <a href=\"https://postalpro.usps.com/address-quality/lacslink\" target=\"_blank\">LACS<sup>Link</sup></a>. LACS<sup>Link</sup> corrects outdated addresses into their modern counterparts. Possible values are: * `Y` –– New address produced with a matching record in LACS<sup>Link</sup>. * `N` –– New address could not be produced with a matching record in LACS<sup>Link</sup>. * `''` –– A DPV match is not made (`deliverability_analysis[dpv_confirmation]` is `N` or an empty string). ")

  public LacsIndicatorEnum getLacsIndicator() {
    return lacsIndicator;
  }


  public void setLacsIndicator(LacsIndicatorEnum lacsIndicator) {
    
    
    
    this.lacsIndicator = lacsIndicator;
  }


  public DeliverabilityAnalysis lacsReturnCode(String lacsReturnCode) {
    
    
    
    
    this.lacsReturnCode = lacsReturnCode;
    return this;
  }

   /**
   * A code indicating how &#x60;deliverability_analysis[lacs_indicator]&#x60; was determined. Possible values are: * &#x60;A&#x60; — A new address was produced because a match was found in LACS&lt;sup&gt;Link&lt;/sup&gt;. * &#x60;92&#x60; — A LACS&lt;sup&gt;Link&lt;/sup&gt; record was matched after dropping secondary information. * &#x60;14&#x60; — A match was found in LACS&lt;sup&gt;Link&lt;/sup&gt;, but could not be converted to a deliverable address. * &#x60;00&#x60; — A match was not found in LACS&lt;sup&gt;Link&lt;/sup&gt;, and no new address was produced. * &#x60;&#39;&#39;&#x60; — LACS&lt;sup&gt;Link&lt;/sup&gt; was not attempted. 
   * @return lacsReturnCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "", required = true, value = "A code indicating how `deliverability_analysis[lacs_indicator]` was determined. Possible values are: * `A` — A new address was produced because a match was found in LACS<sup>Link</sup>. * `92` — A LACS<sup>Link</sup> record was matched after dropping secondary information. * `14` — A match was found in LACS<sup>Link</sup>, but could not be converted to a deliverable address. * `00` — A match was not found in LACS<sup>Link</sup>, and no new address was produced. * `''` — LACS<sup>Link</sup> was not attempted. ")

  public String getLacsReturnCode() {
    return lacsReturnCode;
  }


  public void setLacsReturnCode(String lacsReturnCode) {
    
    
    
    this.lacsReturnCode = lacsReturnCode;
  }


  public DeliverabilityAnalysis suiteReturnCode(SuiteReturnCodeEnum suiteReturnCode) {
    
    
    
    
    this.suiteReturnCode = suiteReturnCode;
    return this;
  }

   /**
   * A return code that indicates whether the address was matched and corrected by &lt;a href&#x3D;\&quot;https://postalpro.usps.com/address-quality-solutions/suitelink\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Suite&lt;sup&gt;Link&lt;/sup&gt;&lt;/a&gt;. Suite&lt;sup&gt;Link&lt;/sup&gt; attempts to provide secondary information to business addresses. Possible values are: * &#x60;A&#x60; –– A Suite&lt;sup&gt;Link&lt;/sup&gt; match was found and secondary information was added. * &#x60;00&#x60; –– A Suite&lt;sup&gt;Link&lt;/sup&gt; match could not be found and no secondary information was added. * &#x60;&#39;&#39;&#x60; –– Suite&lt;sup&gt;Link&lt;/sup&gt; lookup was not attempted. 
   * @return suiteReturnCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "EMPTY", required = true, value = "A return code that indicates whether the address was matched and corrected by <a href=\"https://postalpro.usps.com/address-quality-solutions/suitelink\" target=\"_blank\">Suite<sup>Link</sup></a>. Suite<sup>Link</sup> attempts to provide secondary information to business addresses. Possible values are: * `A` –– A Suite<sup>Link</sup> match was found and secondary information was added. * `00` –– A Suite<sup>Link</sup> match could not be found and no secondary information was added. * `''` –– Suite<sup>Link</sup> lookup was not attempted. ")

  public SuiteReturnCodeEnum getSuiteReturnCode() {
    return suiteReturnCode;
  }


  public void setSuiteReturnCode(SuiteReturnCodeEnum suiteReturnCode) {
    
    
    
    this.suiteReturnCode = suiteReturnCode;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the DeliverabilityAnalysis instance itself
   */
  public DeliverabilityAnalysis putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeliverabilityAnalysis deliverabilityAnalysis = (DeliverabilityAnalysis) o;
    return Objects.equals(this.dpvConfirmation, deliverabilityAnalysis.dpvConfirmation) &&
        Objects.equals(this.dpvCmra, deliverabilityAnalysis.dpvCmra) &&
        Objects.equals(this.dpvVacant, deliverabilityAnalysis.dpvVacant) &&
        Objects.equals(this.dpvActive, deliverabilityAnalysis.dpvActive) &&
        Objects.equals(this.dpvInactiveReason, deliverabilityAnalysis.dpvInactiveReason) &&
        Objects.equals(this.dpvThrowback, deliverabilityAnalysis.dpvThrowback) &&
        Objects.equals(this.dpvNonDeliveryDayFlag, deliverabilityAnalysis.dpvNonDeliveryDayFlag) &&
        Objects.equals(this.dpvNonDeliveryDayValues, deliverabilityAnalysis.dpvNonDeliveryDayValues) &&
        Objects.equals(this.dpvNoSecureLocation, deliverabilityAnalysis.dpvNoSecureLocation) &&
        Objects.equals(this.dpvDoorNotAccessible, deliverabilityAnalysis.dpvDoorNotAccessible) &&
        Objects.equals(this.dpvFootnotes, deliverabilityAnalysis.dpvFootnotes) &&
        Objects.equals(this.ewsMatch, deliverabilityAnalysis.ewsMatch) &&
        Objects.equals(this.lacsIndicator, deliverabilityAnalysis.lacsIndicator) &&
        Objects.equals(this.lacsReturnCode, deliverabilityAnalysis.lacsReturnCode) &&
        Objects.equals(this.suiteReturnCode, deliverabilityAnalysis.suiteReturnCode)&&
        Objects.equals(this.additionalProperties, deliverabilityAnalysis.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dpvConfirmation, dpvCmra, dpvVacant, dpvActive, dpvInactiveReason, dpvThrowback, dpvNonDeliveryDayFlag, dpvNonDeliveryDayValues, dpvNoSecureLocation, dpvDoorNotAccessible, dpvFootnotes, ewsMatch, lacsIndicator, lacsReturnCode, suiteReturnCode, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeliverabilityAnalysis {\n");
    sb.append("    dpvConfirmation: ").append(toIndentedString(dpvConfirmation)).append("\n");
    sb.append("    dpvCmra: ").append(toIndentedString(dpvCmra)).append("\n");
    sb.append("    dpvVacant: ").append(toIndentedString(dpvVacant)).append("\n");
    sb.append("    dpvActive: ").append(toIndentedString(dpvActive)).append("\n");
    sb.append("    dpvInactiveReason: ").append(toIndentedString(dpvInactiveReason)).append("\n");
    sb.append("    dpvThrowback: ").append(toIndentedString(dpvThrowback)).append("\n");
    sb.append("    dpvNonDeliveryDayFlag: ").append(toIndentedString(dpvNonDeliveryDayFlag)).append("\n");
    sb.append("    dpvNonDeliveryDayValues: ").append(toIndentedString(dpvNonDeliveryDayValues)).append("\n");
    sb.append("    dpvNoSecureLocation: ").append(toIndentedString(dpvNoSecureLocation)).append("\n");
    sb.append("    dpvDoorNotAccessible: ").append(toIndentedString(dpvDoorNotAccessible)).append("\n");
    sb.append("    dpvFootnotes: ").append(toIndentedString(dpvFootnotes)).append("\n");
    sb.append("    ewsMatch: ").append(toIndentedString(ewsMatch)).append("\n");
    sb.append("    lacsIndicator: ").append(toIndentedString(lacsIndicator)).append("\n");
    sb.append("    lacsReturnCode: ").append(toIndentedString(lacsReturnCode)).append("\n");
    sb.append("    suiteReturnCode: ").append(toIndentedString(suiteReturnCode)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dpv_confirmation");
    openapiFields.add("dpv_cmra");
    openapiFields.add("dpv_vacant");
    openapiFields.add("dpv_active");
    openapiFields.add("dpv_inactive_reason");
    openapiFields.add("dpv_throwback");
    openapiFields.add("dpv_non_delivery_day_flag");
    openapiFields.add("dpv_non_delivery_day_values");
    openapiFields.add("dpv_no_secure_location");
    openapiFields.add("dpv_door_not_accessible");
    openapiFields.add("dpv_footnotes");
    openapiFields.add("ews_match");
    openapiFields.add("lacs_indicator");
    openapiFields.add("lacs_return_code");
    openapiFields.add("suite_return_code");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dpv_confirmation");
    openapiRequiredFields.add("dpv_cmra");
    openapiRequiredFields.add("dpv_vacant");
    openapiRequiredFields.add("dpv_active");
    openapiRequiredFields.add("dpv_inactive_reason");
    openapiRequiredFields.add("dpv_throwback");
    openapiRequiredFields.add("dpv_non_delivery_day_flag");
    openapiRequiredFields.add("dpv_non_delivery_day_values");
    openapiRequiredFields.add("dpv_no_secure_location");
    openapiRequiredFields.add("dpv_door_not_accessible");
    openapiRequiredFields.add("dpv_footnotes");
    openapiRequiredFields.add("ews_match");
    openapiRequiredFields.add("lacs_indicator");
    openapiRequiredFields.add("lacs_return_code");
    openapiRequiredFields.add("suite_return_code");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DeliverabilityAnalysis
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DeliverabilityAnalysis.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeliverabilityAnalysis is not found in the empty JSON string", DeliverabilityAnalysis.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DeliverabilityAnalysis.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("dpv_confirmation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dpv_confirmation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dpv_confirmation").toString()));
      }
      if (!jsonObj.get("dpv_cmra").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dpv_cmra` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dpv_cmra").toString()));
      }
      if (!jsonObj.get("dpv_vacant").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dpv_vacant` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dpv_vacant").toString()));
      }
      if (!jsonObj.get("dpv_active").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dpv_active` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dpv_active").toString()));
      }
      if (!jsonObj.get("dpv_inactive_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dpv_inactive_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dpv_inactive_reason").toString()));
      }
      if (!jsonObj.get("dpv_throwback").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dpv_throwback` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dpv_throwback").toString()));
      }
      if (!jsonObj.get("dpv_non_delivery_day_flag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dpv_non_delivery_day_flag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dpv_non_delivery_day_flag").toString()));
      }
      if (!jsonObj.get("dpv_non_delivery_day_values").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dpv_non_delivery_day_values` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dpv_non_delivery_day_values").toString()));
      }
      if (!jsonObj.get("dpv_no_secure_location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dpv_no_secure_location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dpv_no_secure_location").toString()));
      }
      if (!jsonObj.get("dpv_door_not_accessible").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dpv_door_not_accessible` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dpv_door_not_accessible").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("dpv_footnotes") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("dpv_footnotes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dpv_footnotes` to be an array in the JSON string but got `%s`", jsonObj.get("dpv_footnotes").toString()));
      }
      if (!jsonObj.get("lacs_indicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lacs_indicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lacs_indicator").toString()));
      }
      if (!jsonObj.get("lacs_return_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lacs_return_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lacs_return_code").toString()));
      }
      if (!jsonObj.get("suite_return_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `suite_return_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("suite_return_code").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeliverabilityAnalysis.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeliverabilityAnalysis' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeliverabilityAnalysis> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeliverabilityAnalysis.class));

       return (TypeAdapter<T>) new TypeAdapter<DeliverabilityAnalysis>() {
           @Override
           public void write(JsonWriter out, DeliverabilityAnalysis value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public DeliverabilityAnalysis read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             DeliverabilityAnalysis instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DeliverabilityAnalysis given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DeliverabilityAnalysis
  * @throws IOException if the JSON string is invalid with respect to DeliverabilityAnalysis
  */
  public static DeliverabilityAnalysis fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeliverabilityAnalysis.class);
  }

 /**
  * Convert an instance of DeliverabilityAnalysis to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 
 *
 * The version of the OpenAPI document: 1.19.28
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Customize and place a QR code on the creative at the required position. Not available for &#x60;us_legal&#x60; letter size and snap packs.
 */
@ApiModel(description = "Customize and place a QR code on the creative at the required position. Not available for `us_legal` letter size and snap packs.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class QrCode {
  /**
   * Sets how a QR code is being positioned in the document. Together with this, you should provide one of &#39;top&#39; or &#39;bottom&#39;, and one of &#39;left&#39; or &#39;right&#39;.
   */
  @JsonAdapter(PositionEnum.Adapter.class)
 public enum PositionEnum {
    RELATIVE("relative");

    private String value;

    PositionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PositionEnum fromValue(String value) {
      for (PositionEnum b : PositionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PositionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PositionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PositionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PositionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private PositionEnum position;

  public static final String SERIALIZED_NAME_TOP = "top";
  @SerializedName(SERIALIZED_NAME_TOP)
  private String top;

  public static final String SERIALIZED_NAME_RIGHT = "right";
  @SerializedName(SERIALIZED_NAME_RIGHT)
  private String right;

  public static final String SERIALIZED_NAME_LEFT = "left";
  @SerializedName(SERIALIZED_NAME_LEFT)
  private String left;

  public static final String SERIALIZED_NAME_BOTTOM = "bottom";
  @SerializedName(SERIALIZED_NAME_BOTTOM)
  private String bottom;

  public static final String SERIALIZED_NAME_REDIRECT_URL = "redirect_url";
  @SerializedName(SERIALIZED_NAME_REDIRECT_URL)
  private String redirectUrl;

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private String width;

  public static final String SERIALIZED_NAME_PAGES = "pages";
  @SerializedName(SERIALIZED_NAME_PAGES)
  private String pages;

  public QrCode() {
  }

  public QrCode position(PositionEnum position) {
    
    
    
    
    this.position = position;
    return this;
  }

   /**
   * Sets how a QR code is being positioned in the document. Together with this, you should provide one of &#39;top&#39; or &#39;bottom&#39;, and one of &#39;left&#39; or &#39;right&#39;.
   * @return position
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Sets how a QR code is being positioned in the document. Together with this, you should provide one of 'top' or 'bottom', and one of 'left' or 'right'.")

  public PositionEnum getPosition() {
    return position;
  }


  public void setPosition(PositionEnum position) {
    
    
    
    this.position = position;
  }


  public QrCode top(String top) {
    
    
    
    
    this.top = top;
    return this;
  }

   /**
   * Vertical distance (in inches) to place QR code from the top. Only allowed if \&quot;bottom\&quot; isn&#39;t provided.
   * @return top
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Vertical distance (in inches) to place QR code from the top. Only allowed if \"bottom\" isn't provided.")

  public String getTop() {
    return top;
  }


  public void setTop(String top) {
    
    
    
    this.top = top;
  }


  public QrCode right(String right) {
    
    
    
    
    this.right = right;
    return this;
  }

   /**
   * Horizontal distance (in inches) to place QR code from the right. Only allowed if \&quot;left\&quot; isn&#39;t provided.
   * @return right
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Horizontal distance (in inches) to place QR code from the right. Only allowed if \"left\" isn't provided.")

  public String getRight() {
    return right;
  }


  public void setRight(String right) {
    
    
    
    this.right = right;
  }


  public QrCode left(String left) {
    
    
    
    
    this.left = left;
    return this;
  }

   /**
   * Horizontal distance (in inches) to place QR code from the left. Only allowed if \&quot;right\&quot; isn&#39;t provided.
   * @return left
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Horizontal distance (in inches) to place QR code from the left. Only allowed if \"right\" isn't provided.")

  public String getLeft() {
    return left;
  }


  public void setLeft(String left) {
    
    
    
    this.left = left;
  }


  public QrCode bottom(String bottom) {
    
    
    
    
    this.bottom = bottom;
    return this;
  }

   /**
   * Vertical distance (in inches) to place QR code from the bottom. Only allowed if \&quot;top\&quot; isn&#39;t provided.
   * @return bottom
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Vertical distance (in inches) to place QR code from the bottom. Only allowed if \"top\" isn't provided.")

  public String getBottom() {
    return bottom;
  }


  public void setBottom(String bottom) {
    
    
    
    this.bottom = bottom;
  }


  public QrCode redirectUrl(String redirectUrl) {
    
    
    
    
    this.redirectUrl = redirectUrl;
    return this;
  }

   /**
   * The url to redirect the user when a QR code is scanned. The url must start with &#x60;https://&#x60;
   * @return redirectUrl
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The url to redirect the user when a QR code is scanned. The url must start with `https://`")

  public String getRedirectUrl() {
    return redirectUrl;
  }


  public void setRedirectUrl(String redirectUrl) {
    
    
    
    this.redirectUrl = redirectUrl;
  }


  public QrCode width(String width) {
    
    
    
    
    this.width = width;
    return this;
  }

   /**
   * The size (in inches) of the QR code with a minimum of 1 inch. All QR codes are generated as a square.
   * @return width
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The size (in inches) of the QR code with a minimum of 1 inch. All QR codes are generated as a square.")

  public String getWidth() {
    return width;
  }


  public void setWidth(String width) {
    
    
    
    this.width = width;
  }


  public QrCode pages(String pages) {
    
    
    
    
    this.pages = pages;
    return this;
  }

   /**
   * Specify the pages where the QR code should be stamped in a comma separated format. Your QR code can be printed in the same position on multiple pages. For postcards, the values should either be \&quot;front\&quot;, \&quot;back\&quot; (for either front or back) or \&quot;front,back\&quot; (for the QR code to be printed on both sides). For self-mailers, the values should either be \&quot;inside\&quot;, \&quot;outside\&quot; (for either inside or outside) or \&quot;inside,outside\&quot; (for the QR code to be printed on both sides). For letters, the values can be specific page numbers (\&quot;1\&quot;, \&quot;3\&quot;), page number ranges such as \&quot;1-3\&quot;, or a comma separated combination of both (\&quot;1,3,5-7\&quot;).
   * @return pages
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specify the pages where the QR code should be stamped in a comma separated format. Your QR code can be printed in the same position on multiple pages. For postcards, the values should either be \"front\", \"back\" (for either front or back) or \"front,back\" (for the QR code to be printed on both sides). For self-mailers, the values should either be \"inside\", \"outside\" (for either inside or outside) or \"inside,outside\" (for the QR code to be printed on both sides). For letters, the values can be specific page numbers (\"1\", \"3\"), page number ranges such as \"1-3\", or a comma separated combination of both (\"1,3,5-7\").")

  public String getPages() {
    return pages;
  }


  public void setPages(String pages) {
    
    
    
    this.pages = pages;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the QrCode instance itself
   */
  public QrCode putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QrCode qrCode = (QrCode) o;
    return Objects.equals(this.position, qrCode.position) &&
        Objects.equals(this.top, qrCode.top) &&
        Objects.equals(this.right, qrCode.right) &&
        Objects.equals(this.left, qrCode.left) &&
        Objects.equals(this.bottom, qrCode.bottom) &&
        Objects.equals(this.redirectUrl, qrCode.redirectUrl) &&
        Objects.equals(this.width, qrCode.width) &&
        Objects.equals(this.pages, qrCode.pages)&&
        Objects.equals(this.additionalProperties, qrCode.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(position, top, right, left, bottom, redirectUrl, width, pages, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QrCode {\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    top: ").append(toIndentedString(top)).append("\n");
    sb.append("    right: ").append(toIndentedString(right)).append("\n");
    sb.append("    left: ").append(toIndentedString(left)).append("\n");
    sb.append("    bottom: ").append(toIndentedString(bottom)).append("\n");
    sb.append("    redirectUrl: ").append(toIndentedString(redirectUrl)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("    pages: ").append(toIndentedString(pages)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("position");
    openapiFields.add("top");
    openapiFields.add("right");
    openapiFields.add("left");
    openapiFields.add("bottom");
    openapiFields.add("redirect_url");
    openapiFields.add("width");
    openapiFields.add("pages");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("position");
    openapiRequiredFields.add("redirect_url");
    openapiRequiredFields.add("width");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to QrCode
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!QrCode.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QrCode is not found in the empty JSON string", QrCode.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : QrCode.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("position").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `position` to be a primitive type in the JSON string but got `%s`", jsonObj.get("position").toString()));
      }
      if ((jsonObj.get("top") != null && !jsonObj.get("top").isJsonNull()) && !jsonObj.get("top").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `top` to be a primitive type in the JSON string but got `%s`", jsonObj.get("top").toString()));
      }
      if ((jsonObj.get("right") != null && !jsonObj.get("right").isJsonNull()) && !jsonObj.get("right").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `right` to be a primitive type in the JSON string but got `%s`", jsonObj.get("right").toString()));
      }
      if ((jsonObj.get("left") != null && !jsonObj.get("left").isJsonNull()) && !jsonObj.get("left").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `left` to be a primitive type in the JSON string but got `%s`", jsonObj.get("left").toString()));
      }
      if ((jsonObj.get("bottom") != null && !jsonObj.get("bottom").isJsonNull()) && !jsonObj.get("bottom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bottom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bottom").toString()));
      }
      if (!jsonObj.get("redirect_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirect_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirect_url").toString()));
      }
      if (!jsonObj.get("width").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `width` to be a primitive type in the JSON string but got `%s`", jsonObj.get("width").toString()));
      }
      if ((jsonObj.get("pages") != null && !jsonObj.get("pages").isJsonNull()) && !jsonObj.get("pages").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pages` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pages").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QrCode.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QrCode' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QrCode> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QrCode.class));

       return (TypeAdapter<T>) new TypeAdapter<QrCode>() {
           @Override
           public void write(JsonWriter out, QrCode value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public QrCode read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             QrCode instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of QrCode given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of QrCode
  * @throws IOException if the JSON string is invalid with respect to QrCode
  */
  public static QrCode fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QrCode.class);
  }

 /**
  * Convert an instance of QrCode to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 
 *
 * The version of the OpenAPI document: 1.19.28
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Unique identifier referring to status of check
 */
@JsonAdapter(CheckTypes.Adapter.class)public enum CheckTypes {
  
  CREATED("check.created"),
  
  RENDERED_PDF("check.rendered_pdf"),
  
  RENDERED_THUMBNAILS("check.rendered_thumbnails"),
  
  DELETED("check.deleted"),
  
  DELIVERED("check.delivered"),
  
  FAILED("check.failed"),
  
  MAILED("check.mailed"),
  
  IN_TRANSIT("check.in_transit"),
  
  IN_LOCAL_AREA("check.in_local_area"),
  
  INTERNATIONAL_EXIT("check.international_exit"),
  
  PROCESSED_FOR_DELIVERY("check.processed_for_delivery"),
  
  RE_ROUTED("check.re-routed"),
  
  RETURNED_TO_SENDER("check.returned_to_sender");

  private String value;

  CheckTypes(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static CheckTypes fromValue(String value) {
    for (CheckTypes b : CheckTypes.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<CheckTypes> {
    @Override
    public void write(final JsonWriter jsonWriter, final CheckTypes enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public CheckTypes read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return CheckTypes.fromValue(value);
    }
  }
}


/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 
 *
 * The version of the OpenAPI document: 1.19.28
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * LinkResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class LinkResponse {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_CAMPAIGN_ID = "campaign_id";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN_ID)
  private String campaignId;

  public static final String SERIALIZED_NAME_DOMAIN_ID = "domain_id";
  @SerializedName(SERIALIZED_NAME_DOMAIN_ID)
  private String domainId;

  public static final String SERIALIZED_NAME_RESOURCE_ID = "resource_id";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ID)
  private String resourceId;

  public static final String SERIALIZED_NAME_REDIRECT_LINK = "redirect_link";
  @SerializedName(SERIALIZED_NAME_REDIRECT_LINK)
  private String redirectLink;

  public static final String SERIALIZED_NAME_SHORT_LINK = "short_link";
  @SerializedName(SERIALIZED_NAME_SHORT_LINK)
  private String shortLink;

  public static final String SERIALIZED_NAME_METADATA_TAG = "metadata_tag";
  @SerializedName(SERIALIZED_NAME_METADATA_TAG)
  private Map<String, String> metadataTag = null;

  public static final String SERIALIZED_NAME_BILLING_GROUP_ID = "billing_group_id";
  @SerializedName(SERIALIZED_NAME_BILLING_GROUP_ID)
  private String billingGroupId;

  public LinkResponse() {
  }

  public LinkResponse id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Unique identifier prefixed with &#x60;lnk_&#x60;.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier prefixed with `lnk_`.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public LinkResponse campaignId(String campaignId) {
    
    
    
    
    this.campaignId = campaignId;
    return this;
  }

   /**
   * Unique identifier prefixed with &#x60;cmp_&#x60;.
   * @return campaignId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier prefixed with `cmp_`.")

  public String getCampaignId() {
    return campaignId;
  }


  public void setCampaignId(String campaignId) {
    
    
    
    this.campaignId = campaignId;
  }


  public LinkResponse domainId(String domainId) {
    
    
    
    
    this.domainId = domainId;
    return this;
  }

   /**
   * A unique identifier for the registered domain.
   * @return domainId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A unique identifier for the registered domain.")

  public String getDomainId() {
    return domainId;
  }


  public void setDomainId(String domainId) {
    
    
    
    this.domainId = domainId;
  }


  public LinkResponse resourceId(String resourceId) {
    
    
    
    
    this.resourceId = resourceId;
    return this;
  }

   /**
   * The unique ID of the associated resource where the link was used.
   * @return resourceId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The unique ID of the associated resource where the link was used.")

  public String getResourceId() {
    return resourceId;
  }


  public void setResourceId(String resourceId) {
    
    
    
    this.resourceId = resourceId;
  }


  public LinkResponse redirectLink(String redirectLink) {
    
    
    
    
    this.redirectLink = redirectLink;
    return this;
  }

   /**
   * The original target URL.
   * @return redirectLink
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The original target URL.")

  public String getRedirectLink() {
    return redirectLink;
  }


  public void setRedirectLink(String redirectLink) {
    
    
    
    this.redirectLink = redirectLink;
  }


  public LinkResponse shortLink(String shortLink) {
    
    
    
    
    this.shortLink = shortLink;
    return this;
  }

   /**
   * The shortened URL for the associated original URL.
   * @return shortLink
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The shortened URL for the associated original URL.")

  public String getShortLink() {
    return shortLink;
  }


  public void setShortLink(String shortLink) {
    
    
    
    this.shortLink = shortLink;
  }


  public LinkResponse metadataTag(Map<String, String> metadataTag) {
    
    
    
    
    this.metadataTag = metadataTag;
    return this;
  }

  public LinkResponse putMetadataTagItem(String key, String metadataTagItem) {
    if (this.metadataTag == null) {
      this.metadataTag = new HashMap<>();
    }
    this.metadataTag.put(key, metadataTagItem);
    return this;
  }

   /**
   * Use metadata to store custom information for tagging and labeling back to your internal systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must be at most 500 characters. Neither can contain the characters &#x60;\&quot;&#x60; and &#x60;\\&#x60;. i.e. &#39;{\&quot;customer_id\&quot; : \&quot;NEWYORK2015\&quot;}&#39; Nested objects are not supported.  See [Metadata](#section/Metadata) for more information.
   * @return metadataTag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Use metadata to store custom information for tagging and labeling back to your internal systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must be at most 500 characters. Neither can contain the characters `\"` and `\\`. i.e. '{\"customer_id\" : \"NEWYORK2015\"}' Nested objects are not supported.  See [Metadata](#section/Metadata) for more information.")

  public Map<String, String> getMetadataTag() {
    return metadataTag;
  }


  public void setMetadataTag(Map<String, String> metadataTag) {
    
    
    
    this.metadataTag = metadataTag;
  }


  public LinkResponse billingGroupId(String billingGroupId) {
    
    
    
    
    this.billingGroupId = billingGroupId;
    return this;
  }

   /**
   * An optional string with the billing group ID to tag your usage with. Is used for billing purposes. Requires special activation to use. See &lt;a href&#x3D;\&quot;#tag/Billing-Groups\&quot;&gt;Billing Group API&lt;/a&gt; for more information.
   * @return billingGroupId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An optional string with the billing group ID to tag your usage with. Is used for billing purposes. Requires special activation to use. See <a href=\"#tag/Billing-Groups\">Billing Group API</a> for more information.")

  public String getBillingGroupId() {
    return billingGroupId;
  }


  public void setBillingGroupId(String billingGroupId) {
    
    
    
    this.billingGroupId = billingGroupId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the LinkResponse instance itself
   */
  public LinkResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LinkResponse linkResponse = (LinkResponse) o;
    return Objects.equals(this.id, linkResponse.id) &&
        Objects.equals(this.campaignId, linkResponse.campaignId) &&
        Objects.equals(this.domainId, linkResponse.domainId) &&
        Objects.equals(this.resourceId, linkResponse.resourceId) &&
        Objects.equals(this.redirectLink, linkResponse.redirectLink) &&
        Objects.equals(this.shortLink, linkResponse.shortLink) &&
        Objects.equals(this.metadataTag, linkResponse.metadataTag) &&
        Objects.equals(this.billingGroupId, linkResponse.billingGroupId)&&
        Objects.equals(this.additionalProperties, linkResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, campaignId, domainId, resourceId, redirectLink, shortLink, metadataTag, billingGroupId, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LinkResponse {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    campaignId: ").append(toIndentedString(campaignId)).append("\n");
    sb.append("    domainId: ").append(toIndentedString(domainId)).append("\n");
    sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
    sb.append("    redirectLink: ").append(toIndentedString(redirectLink)).append("\n");
    sb.append("    shortLink: ").append(toIndentedString(shortLink)).append("\n");
    sb.append("    metadataTag: ").append(toIndentedString(metadataTag)).append("\n");
    sb.append("    billingGroupId: ").append(toIndentedString(billingGroupId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("campaign_id");
    openapiFields.add("domain_id");
    openapiFields.add("resource_id");
    openapiFields.add("redirect_link");
    openapiFields.add("short_link");
    openapiFields.add("metadata_tag");
    openapiFields.add("billing_group_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LinkResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LinkResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LinkResponse is not found in the empty JSON string", LinkResponse.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("campaign_id") != null && !jsonObj.get("campaign_id").isJsonNull()) && !jsonObj.get("campaign_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `campaign_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("campaign_id").toString()));
      }
      if ((jsonObj.get("domain_id") != null && !jsonObj.get("domain_id").isJsonNull()) && !jsonObj.get("domain_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain_id").toString()));
      }
      if ((jsonObj.get("resource_id") != null && !jsonObj.get("resource_id").isJsonNull()) && !jsonObj.get("resource_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource_id").toString()));
      }
      if ((jsonObj.get("redirect_link") != null && !jsonObj.get("redirect_link").isJsonNull()) && !jsonObj.get("redirect_link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirect_link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirect_link").toString()));
      }
      if ((jsonObj.get("short_link") != null && !jsonObj.get("short_link").isJsonNull()) && !jsonObj.get("short_link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `short_link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("short_link").toString()));
      }
      if ((jsonObj.get("billing_group_id") != null && !jsonObj.get("billing_group_id").isJsonNull()) && !jsonObj.get("billing_group_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billing_group_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billing_group_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LinkResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LinkResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LinkResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LinkResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<LinkResponse>() {
           @Override
           public void write(JsonWriter out, LinkResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public LinkResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             LinkResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LinkResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LinkResponse
  * @throws IOException if the JSON string is invalid with respect to LinkResponse
  */
  public static LinkResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LinkResponse.class);
  }

 /**
  * Convert an instance of LinkResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


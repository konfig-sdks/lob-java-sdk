/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 
 *
 * The version of the OpenAPI document: 1.19.28
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.CmpUseType;
import com.konfigthis.client.model.Creative;
import com.konfigthis.client.model.Upload;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CampaignAllOf
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CampaignAllOf {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_DRAFT = "is_draft";
  @SerializedName(SERIALIZED_NAME_IS_DRAFT)
  private Boolean isDraft = true;

  public static final String SERIALIZED_NAME_CREATIVES = "creatives";
  @SerializedName(SERIALIZED_NAME_CREATIVES)
  private List<Creative> creatives = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPLOADS = "uploads";
  @SerializedName(SERIALIZED_NAME_UPLOADS)
  private List<Upload> uploads = new ArrayList<>();

  /**
   * Value is resource type.
   */
  @JsonAdapter(ObjectEnum.Adapter.class)
 public enum ObjectEnum {
    CAMPAIGN("campaign");

    private String value;

    ObjectEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ObjectEnum fromValue(String value) {
      for (ObjectEnum b : ObjectEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ObjectEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ObjectEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ObjectEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ObjectEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  private ObjectEnum _object = ObjectEnum.CAMPAIGN;

  public static final String SERIALIZED_NAME_USE_TYPE = "use_type";
  @SerializedName(SERIALIZED_NAME_USE_TYPE)
  private CmpUseType useType;

  public CampaignAllOf() {
  }

  public CampaignAllOf id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Unique identifier prefixed with &#x60;cmp_&#x60;.
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Unique identifier prefixed with `cmp_`.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public CampaignAllOf isDraft(Boolean isDraft) {
    
    
    
    
    this.isDraft = isDraft;
    return this;
  }

   /**
   * Whether or not the campaign is still a draft.
   * @return isDraft
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether or not the campaign is still a draft.")

  public Boolean getIsDraft() {
    return isDraft;
  }


  public void setIsDraft(Boolean isDraft) {
    
    
    
    this.isDraft = isDraft;
  }


  public CampaignAllOf creatives(List<Creative> creatives) {
    
    
    
    
    this.creatives = creatives;
    return this;
  }

  public CampaignAllOf addCreativesItem(Creative creativesItem) {
    this.creatives.add(creativesItem);
    return this;
  }

   /**
   * An array of creatives that have been associated with this campaign.
   * @return creatives
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "An array of creatives that have been associated with this campaign.")

  public List<Creative> getCreatives() {
    return creatives;
  }


  public void setCreatives(List<Creative> creatives) {
    
    
    
    this.creatives = creatives;
  }


  public CampaignAllOf uploads(List<Upload> uploads) {
    
    
    
    
    this.uploads = uploads;
    return this;
  }

  public CampaignAllOf addUploadsItem(Upload uploadsItem) {
    this.uploads.add(uploadsItem);
    return this;
  }

   /**
   * A single-element array containing the upload object that is assocated with this campaign.
   * @return uploads
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A single-element array containing the upload object that is assocated with this campaign.")

  public List<Upload> getUploads() {
    return uploads;
  }


  public void setUploads(List<Upload> uploads) {
    
    
    
    this.uploads = uploads;
  }


  public CampaignAllOf _object(ObjectEnum _object) {
    
    
    
    
    this._object = _object;
    return this;
  }

   /**
   * Value is resource type.
   * @return _object
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "CAMPAIGN", required = true, value = "Value is resource type.")

  public ObjectEnum getObject() {
    return _object;
  }


  public void setObject(ObjectEnum _object) {
    
    
    
    this._object = _object;
  }


  public CampaignAllOf useType(CmpUseType useType) {
    
    
    
    
    this.useType = useType;
    return this;
  }

   /**
   * Get useType
   * @return useType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public CmpUseType getUseType() {
    return useType;
  }


  public void setUseType(CmpUseType useType) {
    
    
    
    this.useType = useType;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CampaignAllOf instance itself
   */
  public CampaignAllOf putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CampaignAllOf campaignAllOf = (CampaignAllOf) o;
    return Objects.equals(this.id, campaignAllOf.id) &&
        Objects.equals(this.isDraft, campaignAllOf.isDraft) &&
        Objects.equals(this.creatives, campaignAllOf.creatives) &&
        Objects.equals(this.uploads, campaignAllOf.uploads) &&
        Objects.equals(this._object, campaignAllOf._object) &&
        Objects.equals(this.useType, campaignAllOf.useType)&&
        Objects.equals(this.additionalProperties, campaignAllOf.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, isDraft, creatives, uploads, _object, useType, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CampaignAllOf {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isDraft: ").append(toIndentedString(isDraft)).append("\n");
    sb.append("    creatives: ").append(toIndentedString(creatives)).append("\n");
    sb.append("    uploads: ").append(toIndentedString(uploads)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    useType: ").append(toIndentedString(useType)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("is_draft");
    openapiFields.add("creatives");
    openapiFields.add("uploads");
    openapiFields.add("object");
    openapiFields.add("use_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("is_draft");
    openapiRequiredFields.add("creatives");
    openapiRequiredFields.add("uploads");
    openapiRequiredFields.add("object");
    openapiRequiredFields.add("use_type");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CampaignAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CampaignAllOf.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CampaignAllOf is not found in the empty JSON string", CampaignAllOf.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CampaignAllOf.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("creatives").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `creatives` to be an array in the JSON string but got `%s`", jsonObj.get("creatives").toString()));
      }

      JsonArray jsonArraycreatives = jsonObj.getAsJsonArray("creatives");
      // validate the required field `creatives` (array)
      for (int i = 0; i < jsonArraycreatives.size(); i++) {
        Creative.validateJsonObject(jsonArraycreatives.get(i).getAsJsonObject());
      };
      // ensure the json data is an array
      if (!jsonObj.get("uploads").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `uploads` to be an array in the JSON string but got `%s`", jsonObj.get("uploads").toString()));
      }

      JsonArray jsonArrayuploads = jsonObj.getAsJsonArray("uploads");
      // validate the required field `uploads` (array)
      for (int i = 0; i < jsonArrayuploads.size(); i++) {
        Upload.validateJsonObject(jsonArrayuploads.get(i).getAsJsonObject());
      };
      if (!jsonObj.get("object").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CampaignAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CampaignAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CampaignAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CampaignAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<CampaignAllOf>() {
           @Override
           public void write(JsonWriter out, CampaignAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CampaignAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CampaignAllOf instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CampaignAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CampaignAllOf
  * @throws IOException if the JSON string is invalid with respect to CampaignAllOf
  */
  public static CampaignAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CampaignAllOf.class);
  }

 /**
  * Convert an instance of CampaignAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


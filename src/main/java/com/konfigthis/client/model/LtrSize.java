/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 
 *
 * The version of the OpenAPI document: 1.19.28
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Specifies the size of the letter. It accepts two values &#x60;us_letter&#x60; and &#x60;us_legal&#x60;. If the [Lob-Version header](https://docs.lob.com/#tag/Versioning-and-Changelog) in the request is set to &#x60;2024-01-01&#x60; and above, the &#x60;size&#x60; property is automatically included with the default value of &#x60;us_letter&#x60;, unless explicitly specified.  Please note that attempting to include the &#x60;size&#x60; property in the request with the &#x60;Lob-Version&#x60; header predating to &#x60;2024-01-01&#x60; will result in an error. 
 */
@JsonAdapter(LtrSize.Adapter.class)public enum LtrSize {
  
  LETTER("us_letter"),
  
  LEGAL("us_legal");

  private String value;

  LtrSize(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static LtrSize fromValue(String value) {
    for (LtrSize b : LtrSize.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<LtrSize> {
    @Override
    public void write(final JsonWriter jsonWriter, final LtrSize enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public LtrSize read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return LtrSize.fromValue(value);
    }
  }
}


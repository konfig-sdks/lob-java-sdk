/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 
 *
 * The version of the OpenAPI document: 1.19.28
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ReportRetrieveResponseDataInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ReportRetrieveResponseDataInner {
  public static final String SERIALIZED_NAME_ROW_NUMBER = "rowNumber";
  @SerializedName(SERIALIZED_NAME_ROW_NUMBER)
  private Double rowNumber;

  /**
   * The processing status of line item.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    VALIDATED("Validated"),
    
    FAILED("Failed"),
    
    PROCESSING("Processing");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "errorMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  public static final String SERIALIZED_NAME_MAILPIECE_ID = "mailpieceId";
  @SerializedName(SERIALIZED_NAME_MAILPIECE_ID)
  private String mailpieceId;

  public static final String SERIALIZED_NAME_ORIGINAL_DATA = "originalData";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_DATA)
  private String originalData;

  public ReportRetrieveResponseDataInner() {
  }

  public ReportRetrieveResponseDataInner rowNumber(Double rowNumber) {
    
    
    
    
    this.rowNumber = rowNumber;
    return this;
  }

  public ReportRetrieveResponseDataInner rowNumber(Integer rowNumber) {
    
    
    
    
    this.rowNumber = rowNumber.doubleValue();
    return this;
  }

   /**
   * The row number of the csv file containing this data.
   * @return rowNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The row number of the csv file containing this data.")

  public Double getRowNumber() {
    return rowNumber;
  }


  public void setRowNumber(Double rowNumber) {
    
    
    
    this.rowNumber = rowNumber;
  }


  public ReportRetrieveResponseDataInner status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * The processing status of line item.
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The processing status of line item.")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public ReportRetrieveResponseDataInner errorMessage(String errorMessage) {
    
    
    
    
    this.errorMessage = errorMessage;
    return this;
  }

   /**
   * The error message detailing the reason why processing the line item failed.
   * @return errorMessage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The error message detailing the reason why processing the line item failed.")

  public String getErrorMessage() {
    return errorMessage;
  }


  public void setErrorMessage(String errorMessage) {
    
    
    
    this.errorMessage = errorMessage;
  }


  public ReportRetrieveResponseDataInner mailpieceId(String mailpieceId) {
    
    
    
    
    this.mailpieceId = mailpieceId;
    return this;
  }

   /**
   * The mailpiece id created from the line item when it was validated.
   * @return mailpieceId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The mailpiece id created from the line item when it was validated.")

  public String getMailpieceId() {
    return mailpieceId;
  }


  public void setMailpieceId(String mailpieceId) {
    
    
    
    this.mailpieceId = mailpieceId;
  }


  public ReportRetrieveResponseDataInner originalData(String originalData) {
    
    
    
    
    this.originalData = originalData;
    return this;
  }

   /**
   * Key-value pairs where each key is the column header and each value is the value of the column for the row.
   * @return originalData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Key-value pairs where each key is the column header and each value is the value of the column for the row.")

  public String getOriginalData() {
    return originalData;
  }


  public void setOriginalData(String originalData) {
    
    
    
    this.originalData = originalData;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ReportRetrieveResponseDataInner instance itself
   */
  public ReportRetrieveResponseDataInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportRetrieveResponseDataInner reportRetrieveResponseDataInner = (ReportRetrieveResponseDataInner) o;
    return Objects.equals(this.rowNumber, reportRetrieveResponseDataInner.rowNumber) &&
        Objects.equals(this.status, reportRetrieveResponseDataInner.status) &&
        Objects.equals(this.errorMessage, reportRetrieveResponseDataInner.errorMessage) &&
        Objects.equals(this.mailpieceId, reportRetrieveResponseDataInner.mailpieceId) &&
        Objects.equals(this.originalData, reportRetrieveResponseDataInner.originalData)&&
        Objects.equals(this.additionalProperties, reportRetrieveResponseDataInner.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(rowNumber, status, errorMessage, mailpieceId, originalData, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportRetrieveResponseDataInner {\n");
    sb.append("    rowNumber: ").append(toIndentedString(rowNumber)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    mailpieceId: ").append(toIndentedString(mailpieceId)).append("\n");
    sb.append("    originalData: ").append(toIndentedString(originalData)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("rowNumber");
    openapiFields.add("status");
    openapiFields.add("errorMessage");
    openapiFields.add("mailpieceId");
    openapiFields.add("originalData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ReportRetrieveResponseDataInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ReportRetrieveResponseDataInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportRetrieveResponseDataInner is not found in the empty JSON string", ReportRetrieveResponseDataInner.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (!jsonObj.get("errorMessage").isJsonNull() && (jsonObj.get("errorMessage") != null && !jsonObj.get("errorMessage").isJsonNull()) && !jsonObj.get("errorMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorMessage").toString()));
      }
      if (!jsonObj.get("mailpieceId").isJsonNull() && (jsonObj.get("mailpieceId") != null && !jsonObj.get("mailpieceId").isJsonNull()) && !jsonObj.get("mailpieceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mailpieceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mailpieceId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportRetrieveResponseDataInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportRetrieveResponseDataInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportRetrieveResponseDataInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportRetrieveResponseDataInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportRetrieveResponseDataInner>() {
           @Override
           public void write(JsonWriter out, ReportRetrieveResponseDataInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportRetrieveResponseDataInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ReportRetrieveResponseDataInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReportRetrieveResponseDataInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReportRetrieveResponseDataInner
  * @throws IOException if the JSON string is invalid with respect to ReportRetrieveResponseDataInner
  */
  public static ReportRetrieveResponseDataInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportRetrieveResponseDataInner.class);
  }

 /**
  * Convert an instance of ReportRetrieveResponseDataInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


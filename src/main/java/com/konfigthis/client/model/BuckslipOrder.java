/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 
 *
 * The version of the OpenAPI document: 1.19.28
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * BuckslipOrder
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class BuckslipOrder {
  public static final String SERIALIZED_NAME_DATE_CREATED = "date_created";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_MODIFIED = "date_modified";
  @SerializedName(SERIALIZED_NAME_DATE_MODIFIED)
  private OffsetDateTime dateModified;

  public static final String SERIALIZED_NAME_DELETED = "deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  private Boolean deleted;

  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  private String _object;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_BUCKSLIP_ID = "buckslip_id";
  @SerializedName(SERIALIZED_NAME_BUCKSLIP_ID)
  private String buckslipId;

  /**
   * The status of the buckslip order.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    PENDING("pending"),
    
    PRINTING("printing"),
    
    AVAILABLE("available"),
    
    CANCELLED("cancelled"),
    
    DEPLETED("depleted");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_QUANTITY_ORDERED = "quantity_ordered";
  @SerializedName(SERIALIZED_NAME_QUANTITY_ORDERED)
  private Double quantityOrdered = 0d;

  public static final String SERIALIZED_NAME_UNIT_PRICE = "unit_price";
  @SerializedName(SERIALIZED_NAME_UNIT_PRICE)
  private Double unitPrice = 0d;

  public static final String SERIALIZED_NAME_INVENTORY = "inventory";
  @SerializedName(SERIALIZED_NAME_INVENTORY)
  private Double inventory = 0d;

  public static final String SERIALIZED_NAME_CANCELLED_REASON = "cancelled_reason";
  @SerializedName(SERIALIZED_NAME_CANCELLED_REASON)
  private String cancelledReason;

  public static final String SERIALIZED_NAME_AVAILABILITY_DATE = "availability_date";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_DATE)
  private OffsetDateTime availabilityDate;

  public static final String SERIALIZED_NAME_EXPECTED_AVAILABILITY_DATE = "expected_availability_date";
  @SerializedName(SERIALIZED_NAME_EXPECTED_AVAILABILITY_DATE)
  private OffsetDateTime expectedAvailabilityDate;

  public BuckslipOrder() {
  }

  public BuckslipOrder dateCreated(OffsetDateTime dateCreated) {
    
    
    
    
    this.dateCreated = dateCreated;
    return this;
  }

   /**
   * A timestamp in ISO 8601 format of the date the resource was created.
   * @return dateCreated
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A timestamp in ISO 8601 format of the date the resource was created.")

  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }


  public void setDateCreated(OffsetDateTime dateCreated) {
    
    
    
    this.dateCreated = dateCreated;
  }


  public BuckslipOrder dateModified(OffsetDateTime dateModified) {
    
    
    
    
    this.dateModified = dateModified;
    return this;
  }

   /**
   * A timestamp in ISO 8601 format of the date the resource was last modified.
   * @return dateModified
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A timestamp in ISO 8601 format of the date the resource was last modified.")

  public OffsetDateTime getDateModified() {
    return dateModified;
  }


  public void setDateModified(OffsetDateTime dateModified) {
    
    
    
    this.dateModified = dateModified;
  }


  public BuckslipOrder deleted(Boolean deleted) {
    
    
    
    
    this.deleted = deleted;
    return this;
  }

   /**
   * Only returned if the resource has been successfully deleted.
   * @return deleted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Only returned if the resource has been successfully deleted.")

  public Boolean getDeleted() {
    return deleted;
  }


  public void setDeleted(Boolean deleted) {
    
    
    
    this.deleted = deleted;
  }


  public BuckslipOrder _object(String _object) {
    
    
    
    
    this._object = _object;
    return this;
  }

   /**
   * Value is resource type.
   * @return _object
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Value is resource type.")

  public String getObject() {
    return _object;
  }


  public void setObject(String _object) {
    
    
    
    this._object = _object;
  }


  public BuckslipOrder id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Unique identifier prefixed with &#x60;bo_&#x60;.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier prefixed with `bo_`.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public BuckslipOrder buckslipId(String buckslipId) {
    
    
    
    
    this.buckslipId = buckslipId;
    return this;
  }

   /**
   * Unique identifier prefixed with &#x60;bck_&#x60;.
   * @return buckslipId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier prefixed with `bck_`.")

  public String getBuckslipId() {
    return buckslipId;
  }


  public void setBuckslipId(String buckslipId) {
    
    
    
    this.buckslipId = buckslipId;
  }


  public BuckslipOrder status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * The status of the buckslip order.
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The status of the buckslip order.")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public BuckslipOrder quantityOrdered(Double quantityOrdered) {
    
    
    
    
    this.quantityOrdered = quantityOrdered;
    return this;
  }

  public BuckslipOrder quantityOrdered(Integer quantityOrdered) {
    
    
    
    
    this.quantityOrdered = quantityOrdered.doubleValue();
    return this;
  }

   /**
   * The quantity of buckslips ordered.
   * @return quantityOrdered
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "The quantity of buckslips ordered.")

  public Double getQuantityOrdered() {
    return quantityOrdered;
  }


  public void setQuantityOrdered(Double quantityOrdered) {
    
    
    
    this.quantityOrdered = quantityOrdered;
  }


  public BuckslipOrder unitPrice(Double unitPrice) {
    
    
    
    
    this.unitPrice = unitPrice;
    return this;
  }

  public BuckslipOrder unitPrice(Integer unitPrice) {
    
    
    
    
    this.unitPrice = unitPrice.doubleValue();
    return this;
  }

   /**
   * The unit price for the buckslip order.
   * @return unitPrice
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "The unit price for the buckslip order.")

  public Double getUnitPrice() {
    return unitPrice;
  }


  public void setUnitPrice(Double unitPrice) {
    
    
    
    this.unitPrice = unitPrice;
  }


  public BuckslipOrder inventory(Double inventory) {
    
    
    
    
    this.inventory = inventory;
    return this;
  }

  public BuckslipOrder inventory(Integer inventory) {
    
    
    
    
    this.inventory = inventory.doubleValue();
    return this;
  }

   /**
   * The inventory of the buckslip order.
   * @return inventory
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "The inventory of the buckslip order.")

  public Double getInventory() {
    return inventory;
  }


  public void setInventory(Double inventory) {
    
    
    
    this.inventory = inventory;
  }


  public BuckslipOrder cancelledReason(String cancelledReason) {
    
    
    
    
    this.cancelledReason = cancelledReason;
    return this;
  }

   /**
   * The reason for cancellation.
   * @return cancelledReason
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The reason for cancellation.")

  public String getCancelledReason() {
    return cancelledReason;
  }


  public void setCancelledReason(String cancelledReason) {
    
    
    
    this.cancelledReason = cancelledReason;
  }


  public BuckslipOrder availabilityDate(OffsetDateTime availabilityDate) {
    
    
    
    
    this.availabilityDate = availabilityDate;
    return this;
  }

   /**
   * A timestamp in ISO 8601 format of the date the resource was created.
   * @return availabilityDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A timestamp in ISO 8601 format of the date the resource was created.")

  public OffsetDateTime getAvailabilityDate() {
    return availabilityDate;
  }


  public void setAvailabilityDate(OffsetDateTime availabilityDate) {
    
    
    
    this.availabilityDate = availabilityDate;
  }


  public BuckslipOrder expectedAvailabilityDate(OffsetDateTime expectedAvailabilityDate) {
    
    
    
    
    this.expectedAvailabilityDate = expectedAvailabilityDate;
    return this;
  }

   /**
   * The fixed deadline for the buckslips to be printed.
   * @return expectedAvailabilityDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The fixed deadline for the buckslips to be printed.")

  public OffsetDateTime getExpectedAvailabilityDate() {
    return expectedAvailabilityDate;
  }


  public void setExpectedAvailabilityDate(OffsetDateTime expectedAvailabilityDate) {
    
    
    
    this.expectedAvailabilityDate = expectedAvailabilityDate;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the BuckslipOrder instance itself
   */
  public BuckslipOrder putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BuckslipOrder buckslipOrder = (BuckslipOrder) o;
    return Objects.equals(this.dateCreated, buckslipOrder.dateCreated) &&
        Objects.equals(this.dateModified, buckslipOrder.dateModified) &&
        Objects.equals(this.deleted, buckslipOrder.deleted) &&
        Objects.equals(this._object, buckslipOrder._object) &&
        Objects.equals(this.id, buckslipOrder.id) &&
        Objects.equals(this.buckslipId, buckslipOrder.buckslipId) &&
        Objects.equals(this.status, buckslipOrder.status) &&
        Objects.equals(this.quantityOrdered, buckslipOrder.quantityOrdered) &&
        Objects.equals(this.unitPrice, buckslipOrder.unitPrice) &&
        Objects.equals(this.inventory, buckslipOrder.inventory) &&
        Objects.equals(this.cancelledReason, buckslipOrder.cancelledReason) &&
        Objects.equals(this.availabilityDate, buckslipOrder.availabilityDate) &&
        Objects.equals(this.expectedAvailabilityDate, buckslipOrder.expectedAvailabilityDate)&&
        Objects.equals(this.additionalProperties, buckslipOrder.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dateCreated, dateModified, deleted, _object, id, buckslipId, status, quantityOrdered, unitPrice, inventory, cancelledReason, availabilityDate, expectedAvailabilityDate, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BuckslipOrder {\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateModified: ").append(toIndentedString(dateModified)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    buckslipId: ").append(toIndentedString(buckslipId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    quantityOrdered: ").append(toIndentedString(quantityOrdered)).append("\n");
    sb.append("    unitPrice: ").append(toIndentedString(unitPrice)).append("\n");
    sb.append("    inventory: ").append(toIndentedString(inventory)).append("\n");
    sb.append("    cancelledReason: ").append(toIndentedString(cancelledReason)).append("\n");
    sb.append("    availabilityDate: ").append(toIndentedString(availabilityDate)).append("\n");
    sb.append("    expectedAvailabilityDate: ").append(toIndentedString(expectedAvailabilityDate)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("date_created");
    openapiFields.add("date_modified");
    openapiFields.add("deleted");
    openapiFields.add("object");
    openapiFields.add("id");
    openapiFields.add("buckslip_id");
    openapiFields.add("status");
    openapiFields.add("quantity_ordered");
    openapiFields.add("unit_price");
    openapiFields.add("inventory");
    openapiFields.add("cancelled_reason");
    openapiFields.add("availability_date");
    openapiFields.add("expected_availability_date");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("date_created");
    openapiRequiredFields.add("date_modified");
    openapiRequiredFields.add("object");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BuckslipOrder
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!BuckslipOrder.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BuckslipOrder is not found in the empty JSON string", BuckslipOrder.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BuckslipOrder.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("object").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("buckslip_id") != null && !jsonObj.get("buckslip_id").isJsonNull()) && !jsonObj.get("buckslip_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buckslip_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buckslip_id").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("cancelled_reason") != null && !jsonObj.get("cancelled_reason").isJsonNull()) && !jsonObj.get("cancelled_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cancelled_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cancelled_reason").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BuckslipOrder.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BuckslipOrder' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BuckslipOrder> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BuckslipOrder.class));

       return (TypeAdapter<T>) new TypeAdapter<BuckslipOrder>() {
           @Override
           public void write(JsonWriter out, BuckslipOrder value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public BuckslipOrder read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             BuckslipOrder instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BuckslipOrder given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BuckslipOrder
  * @throws IOException if the JSON string is invalid with respect to BuckslipOrder
  */
  public static BuckslipOrder fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BuckslipOrder.class);
  }

 /**
  * Convert an instance of BuckslipOrder to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


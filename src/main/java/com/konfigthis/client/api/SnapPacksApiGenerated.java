/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 
 *
 * The version of the OpenAPI document: 1.19.28
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Error;
import com.konfigthis.client.model.MailType;
import com.konfigthis.client.model.SnapPack;
import com.konfigthis.client.model.SnapPackEditable;
import com.konfigthis.client.model.SnapPackSize;
import com.konfigthis.client.model.SnapPackUseType;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SnapPacksApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SnapPacksApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public SnapPacksApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewSnapPackCall(SnapPackEditable snapPackEditable, String idempotencyKey, String idempotencyKey2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = snapPackEditable;

        // create path and map variables
        String localVarPath = "/snap_packs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idempotency_key", idempotencyKey2));
        }

        if (idempotencyKey != null) {
            localVarHeaderParams.put("Idempotency-Key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewSnapPackValidateBeforeCall(SnapPackEditable snapPackEditable, String idempotencyKey, String idempotencyKey2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'snapPackEditable' is set
        if (snapPackEditable == null) {
            throw new ApiException("Missing the required parameter 'snapPackEditable' when calling createNewSnapPack(Async)");
        }

        return createNewSnapPackCall(snapPackEditable, idempotencyKey, idempotencyKey2, _callback);

    }


    private ApiResponse<SnapPack> createNewSnapPackWithHttpInfo(SnapPackEditable snapPackEditable, String idempotencyKey, String idempotencyKey2) throws ApiException {
        okhttp3.Call localVarCall = createNewSnapPackValidateBeforeCall(snapPackEditable, idempotencyKey, idempotencyKey2, null);
        Type localVarReturnType = new TypeToken<SnapPack>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewSnapPackAsync(SnapPackEditable snapPackEditable, String idempotencyKey, String idempotencyKey2, final ApiCallback<SnapPack> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewSnapPackValidateBeforeCall(snapPackEditable, idempotencyKey, idempotencyKey2, _callback);
        Type localVarReturnType = new TypeToken<SnapPack>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewSnapPackRequestBuilder {
        private String description;
        private Map<String, String> metadata;
        private MailType mailType;
        private String mergeVariables;
        private Object sendDate;
        private SnapPackSize size;
        private Object to;
        private Object from;
        private Object inside;
        private Object outside;
        private String billingGroupId;
        private SnapPackUseType useType;
        private Boolean color;
        private String idempotencyKey;
        private String idempotencyKey2;
        private SnapPackEditable snapPackEditable;

        private CreateNewSnapPackRequestBuilder() {
        }

        /**
         * Set snapPackEditable
         * @param snapPackEditable  (optional)
         * @return CreateNewSnapPackRequestBuilder
         */
        public CreateNewSnapPackRequestBuilder snapPackEditable(SnapPackEditable snapPackEditable) {
            this.snapPackEditable = snapPackEditable;
            return this;
        }

        /**
         * Set description
         * @param description An internal description that identifies this resource. Must be no longer than 255 characters.  (optional)
         * @return CreateNewSnapPackRequestBuilder
         */
        public CreateNewSnapPackRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set metadata
         * @param metadata Use metadata to store custom information for tagging and labeling back to your internal systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must be at most 500 characters. Neither can contain the characters &#x60;\\\&quot;&#x60; and &#x60;\\\\&#x60;. i.e. &#39;{\\\&quot;customer_id\\\&quot; : \\\&quot;NEWYORK2015\\\&quot;}&#39; Nested objects are not supported.  See [Metadata](#section/Metadata) for more information. (optional)
         * @return CreateNewSnapPackRequestBuilder
         */
        public CreateNewSnapPackRequestBuilder metadata(Map<String, String> metadata) {
            this.metadata = metadata;
            return this;
        }
        
        /**
         * Set mailType
         * @param mailType  (optional, default to usps_first_class)
         * @return CreateNewSnapPackRequestBuilder
         */
        public CreateNewSnapPackRequestBuilder mailType(MailType mailType) {
            this.mailType = mailType;
            return this;
        }
        
        /**
         * Set mergeVariables
         * @param mergeVariables You can input a merge variable payload object to your template to render dynamic content. For example, if you have a template like: &#x60;{{variable_name}}&#x60;, pass in &#x60;{\\\&quot;variable_name\\\&quot;: \\\&quot;Harry\\\&quot;}&#x60; to render &#x60;Harry&#x60;. &#x60;merge_variables&#x60; must be an object. Any type of value is accepted as long as the object is valid JSON; you can use &#x60;strings&#x60;, &#x60;numbers&#x60;, &#x60;booleans&#x60;, &#x60;arrays&#x60;, &#x60;objects&#x60;, or &#x60;null&#x60;. The max length of the object is 25,000 characters. If you call &#x60;JSON.stringify&#x60; on your object, it can be no longer than 25,000 characters. Your variable names cannot contain any whitespace or any of the following special characters: &#x60;!&#x60;, &#x60;\\\&quot;&#x60;, &#x60;#&#x60;, &#x60;%&#x60;, &#x60;&amp;&#x60;, &#x60;&#39;&#x60;, &#x60;(&#x60;, &#x60;)&#x60;, &#x60;*&#x60;, &#x60;+&#x60;, &#x60;,&#x60;, &#x60;/&#x60;, &#x60;;&#x60;, &#x60;&lt;&#x60;, &#x60;&#x3D;&#x60;, &#x60;&gt;&#x60;, &#x60;@&#x60;, &#x60;[&#x60;, &#x60;\\\\&#x60;, &#x60;]&#x60;, &#x60;^&#x60;, &#x60;&#x60; &#x60; &#x60;&#x60;, &#x60;{&#x60;, &#x60;|&#x60;, &#x60;}&#x60;, &#x60;~&#x60;. More instructions can be found in &lt;a href&#x3D;\\\&quot;https://help.lob.com/print-and-mail/designing-mail-creatives/dynamic-personalization#using-html-and-merge-variables-10\\\&quot; target&#x3D;\\\&quot;_blank\\\&quot;&gt;our guide to using html and merge variables&lt;/a&gt;. Depending on your &lt;a href&#x3D;\\\&quot;https://dashboard.lob.com/#/settings/account\\\&quot; target&#x3D;\\\&quot;_blank\\\&quot;&gt;Merge Variable strictness&lt;/a&gt; setting, if you define variables in your HTML but do not pass them here, you will either receive an error or the variable will render as an empty string. (optional)
         * @return CreateNewSnapPackRequestBuilder
         */
        public CreateNewSnapPackRequestBuilder mergeVariables(String mergeVariables) {
            this.mergeVariables = mergeVariables;
            return this;
        }
        
        /**
         * Set sendDate
         * @param sendDate  (optional)
         * @return CreateNewSnapPackRequestBuilder
         */
        public CreateNewSnapPackRequestBuilder sendDate(Object sendDate) {
            this.sendDate = sendDate;
            return this;
        }
        
        /**
         * Set size
         * @param size  (optional, default to 8.5x11)
         * @return CreateNewSnapPackRequestBuilder
         */
        public CreateNewSnapPackRequestBuilder size(SnapPackSize size) {
            this.size = size;
            return this;
        }
        
        /**
         * Set to
         * @param to  (optional)
         * @return CreateNewSnapPackRequestBuilder
         */
        public CreateNewSnapPackRequestBuilder to(Object to) {
            this.to = to;
            return this;
        }
        
        /**
         * Set from
         * @param from  (optional)
         * @return CreateNewSnapPackRequestBuilder
         */
        public CreateNewSnapPackRequestBuilder from(Object from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set inside
         * @param inside  (optional)
         * @return CreateNewSnapPackRequestBuilder
         */
        public CreateNewSnapPackRequestBuilder inside(Object inside) {
            this.inside = inside;
            return this;
        }
        
        /**
         * Set outside
         * @param outside  (optional)
         * @return CreateNewSnapPackRequestBuilder
         */
        public CreateNewSnapPackRequestBuilder outside(Object outside) {
            this.outside = outside;
            return this;
        }
        
        /**
         * Set billingGroupId
         * @param billingGroupId An optional string with the billing group ID to tag your usage with. Is used for billing purposes. Requires special activation to use. See &lt;a href&#x3D;\\\&quot;#tag/Billing-Groups\\\&quot;&gt;Billing Group API&lt;/a&gt; for more information. (optional)
         * @return CreateNewSnapPackRequestBuilder
         */
        public CreateNewSnapPackRequestBuilder billingGroupId(String billingGroupId) {
            this.billingGroupId = billingGroupId;
            return this;
        }
        
        /**
         * Set useType
         * @param useType  (optional)
         * @return CreateNewSnapPackRequestBuilder
         */
        public CreateNewSnapPackRequestBuilder useType(SnapPackUseType useType) {
            this.useType = useType;
            return this;
        }
        
        /**
         * Set color
         * @param color  (optional)
         * @return CreateNewSnapPackRequestBuilder
         */
        public CreateNewSnapPackRequestBuilder color(Boolean color) {
            this.color = color;
            return this;
        }
        
        /**
         * Set idempotencyKey
         * @param idempotencyKey A string of no longer than 256 characters that uniquely identifies this resource. For more help integrating idempotency keys, refer to our &lt;a href&#x3D;\&quot;https://help.lob.com/print-and-mail/building-a-mail-strategy/managing-mail-settings#idempotent-requests-12\&quot; target&#x3D;\&quot;_blank\&quot;&gt;implementation guide&lt;/a&gt;.  (optional)
         * @return CreateNewSnapPackRequestBuilder
         */
        public CreateNewSnapPackRequestBuilder idempotencyKey(String idempotencyKey) {
            this.idempotencyKey = idempotencyKey;
            return this;
        }
        
        /**
         * Set idempotencyKey2
         * @param idempotencyKey2 A string of no longer than 256 characters that uniquely identifies this resource. For more help integrating idempotency keys, refer to our &lt;a href&#x3D;\&quot;https://help.lob.com/print-and-mail/building-a-mail-strategy/managing-mail-settings#idempotent-requests-12\&quot; target&#x3D;\&quot;_blank\&quot;&gt;implementation guide&lt;/a&gt;.  (optional)
         * @return CreateNewSnapPackRequestBuilder
         */
        public CreateNewSnapPackRequestBuilder idempotencyKey2(String idempotencyKey2) {
            this.idempotencyKey2 = idempotencyKey2;
            return this;
        }
        
        /**
         * Build call for createNewSnapPack
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a snap_pack object </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SnapPackEditable snapPackEditable = buildBodyParams();
            return createNewSnapPackCall(snapPackEditable, idempotencyKey, idempotencyKey2, _callback);
        }

        private SnapPackEditable buildBodyParams() {
            return this.snapPackEditable;
        }

        /**
         * Execute createNewSnapPack request
         * @return SnapPack
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a snap_pack object </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public SnapPack execute() throws ApiException {
            SnapPackEditable snapPackEditable = buildBodyParams();
            ApiResponse<SnapPack> localVarResp = createNewSnapPackWithHttpInfo(snapPackEditable, idempotencyKey, idempotencyKey2);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewSnapPack request with HTTP info returned
         * @return ApiResponse&lt;SnapPack&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a snap_pack object </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SnapPack> executeWithHttpInfo() throws ApiException {
            SnapPackEditable snapPackEditable = buildBodyParams();
            return createNewSnapPackWithHttpInfo(snapPackEditable, idempotencyKey, idempotencyKey2);
        }

        /**
         * Execute createNewSnapPack request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a snap_pack object </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SnapPack> _callback) throws ApiException {
            SnapPackEditable snapPackEditable = buildBodyParams();
            return createNewSnapPackAsync(snapPackEditable, idempotencyKey, idempotencyKey2, _callback);
        }
    }

    /**
     * Create
     * Creates a new snap_pack given information
     * @param snapPackEditable  (required)
     * @return CreateNewSnapPackRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a snap_pack object </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewSnapPackRequestBuilder createNewSnapPack() throws IllegalArgumentException {
        return new CreateNewSnapPackRequestBuilder();
    }
}

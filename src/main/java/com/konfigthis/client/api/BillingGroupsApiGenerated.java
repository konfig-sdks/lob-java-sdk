/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 
 *
 * The version of the OpenAPI document: 1.19.28
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.BillingGroup;
import com.konfigthis.client.model.BillingGroupBase;
import com.konfigthis.client.model.BillingGroupEditable;
import com.konfigthis.client.model.BillingGroupsListResponse;
import com.konfigthis.client.model.BillingGroupsListSortByParameterAllOf;
import com.konfigthis.client.model.Error;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class BillingGroupsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BillingGroupsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public BillingGroupsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewGroupCall(BillingGroupEditable billingGroupEditable, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = billingGroupEditable;

        // create path and map variables
        String localVarPath = "/billing_groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewGroupValidateBeforeCall(BillingGroupEditable billingGroupEditable, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'billingGroupEditable' is set
        if (billingGroupEditable == null) {
            throw new ApiException("Missing the required parameter 'billingGroupEditable' when calling createNewGroup(Async)");
        }

        return createNewGroupCall(billingGroupEditable, _callback);

    }


    private ApiResponse<BillingGroup> createNewGroupWithHttpInfo(BillingGroupEditable billingGroupEditable) throws ApiException {
        okhttp3.Call localVarCall = createNewGroupValidateBeforeCall(billingGroupEditable, null);
        Type localVarReturnType = new TypeToken<BillingGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewGroupAsync(BillingGroupEditable billingGroupEditable, final ApiCallback<BillingGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewGroupValidateBeforeCall(billingGroupEditable, _callback);
        Type localVarReturnType = new TypeToken<BillingGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewGroupRequestBuilder {
        private String description;
        private String name;
        private BillingGroupEditable billingGroupEditable;

        private CreateNewGroupRequestBuilder() {
        }

        /**
         * Set billingGroupEditable
         * @param billingGroupEditable  (optional)
         * @return CreateNewGroupRequestBuilder
         */
        public CreateNewGroupRequestBuilder billingGroupEditable(BillingGroupEditable billingGroupEditable) {
            this.billingGroupEditable = billingGroupEditable;
            return this;
        }

        /**
         * Set description
         * @param description Description of the billing group. (optional)
         * @return CreateNewGroupRequestBuilder
         */
        public CreateNewGroupRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name Name of the billing group. (optional)
         * @return CreateNewGroupRequestBuilder
         */
        public CreateNewGroupRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for createNewGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a billing group object </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BillingGroupEditable billingGroupEditable = buildBodyParams();
            return createNewGroupCall(billingGroupEditable, _callback);
        }

        private BillingGroupEditable buildBodyParams() {
            return this.billingGroupEditable;
        }

        /**
         * Execute createNewGroup request
         * @return BillingGroup
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a billing group object </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public BillingGroup execute() throws ApiException {
            BillingGroupEditable billingGroupEditable = buildBodyParams();
            ApiResponse<BillingGroup> localVarResp = createNewGroupWithHttpInfo(billingGroupEditable);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewGroup request with HTTP info returned
         * @return ApiResponse&lt;BillingGroup&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a billing group object </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BillingGroup> executeWithHttpInfo() throws ApiException {
            BillingGroupEditable billingGroupEditable = buildBodyParams();
            return createNewGroupWithHttpInfo(billingGroupEditable);
        }

        /**
         * Execute createNewGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a billing group object </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BillingGroup> _callback) throws ApiException {
            BillingGroupEditable billingGroupEditable = buildBodyParams();
            return createNewGroupAsync(billingGroupEditable, _callback);
        }
    }

    /**
     * Create
     * Creates a new billing_group with the provided properties.
     * @param billingGroupEditable  (required)
     * @return CreateNewGroupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a billing group object </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewGroupRequestBuilder createNewGroup() throws IllegalArgumentException {
        return new CreateNewGroupRequestBuilder();
    }
    private okhttp3.Call getDetailsCall(String bgId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/billing_groups/{bg_id}"
            .replace("{" + "bg_id" + "}", localVarApiClient.escapeString(bgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailsValidateBeforeCall(String bgId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bgId' is set
        if (bgId == null) {
            throw new ApiException("Missing the required parameter 'bgId' when calling getDetails(Async)");
        }

        return getDetailsCall(bgId, _callback);

    }


    private ApiResponse<BillingGroup> getDetailsWithHttpInfo(String bgId) throws ApiException {
        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(bgId, null);
        Type localVarReturnType = new TypeToken<BillingGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetailsAsync(String bgId, final ApiCallback<BillingGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(bgId, _callback);
        Type localVarReturnType = new TypeToken<BillingGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetailsRequestBuilder {
        private final String bgId;

        private GetDetailsRequestBuilder(String bgId) {
            this.bgId = bgId;
        }

        /**
         * Build call for getDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a billing_group object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetailsCall(bgId, _callback);
        }


        /**
         * Execute getDetails request
         * @return BillingGroup
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a billing_group object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public BillingGroup execute() throws ApiException {
            ApiResponse<BillingGroup> localVarResp = getDetailsWithHttpInfo(bgId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetails request with HTTP info returned
         * @return ApiResponse&lt;BillingGroup&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a billing_group object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BillingGroup> executeWithHttpInfo() throws ApiException {
            return getDetailsWithHttpInfo(bgId);
        }

        /**
         * Execute getDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a billing_group object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BillingGroup> _callback) throws ApiException {
            return getDetailsAsync(bgId, _callback);
        }
    }

    /**
     * Retrieve
     * Retrieves the details of an existing billing_group. You need only supply the unique billing_group identifier that was returned upon billing_group creation.
     * @param bgId id of the billing_group (required)
     * @return GetDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a billing_group object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public GetDetailsRequestBuilder getDetails(String bgId) throws IllegalArgumentException {
        if (bgId == null) throw new IllegalArgumentException("\"bgId\" is required but got null");
            

        return new GetDetailsRequestBuilder(bgId);
    }
    private okhttp3.Call listCall(Integer limit, Integer offset, List<String> include, Map<String, String> dateCreated, Map<String, String> dateModified, BillingGroupsListSortByParameter sortBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/billing_groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        if (dateCreated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_created", dateCreated));
        }

        if (dateModified != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_modified", dateModified));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(Integer limit, Integer offset, List<String> include, Map<String, String> dateCreated, Map<String, String> dateModified, BillingGroupsListSortByParameter sortBy, final ApiCallback _callback) throws ApiException {
        return listCall(limit, offset, include, dateCreated, dateModified, sortBy, _callback);

    }


    private ApiResponse<BillingGroupsListResponse> listWithHttpInfo(Integer limit, Integer offset, List<String> include, Map<String, String> dateCreated, Map<String, String> dateModified, BillingGroupsListSortByParameter sortBy) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(limit, offset, include, dateCreated, dateModified, sortBy, null);
        Type localVarReturnType = new TypeToken<BillingGroupsListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(Integer limit, Integer offset, List<String> include, Map<String, String> dateCreated, Map<String, String> dateModified, BillingGroupsListSortByParameter sortBy, final ApiCallback<BillingGroupsListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(limit, offset, include, dateCreated, dateModified, sortBy, _callback);
        Type localVarReturnType = new TypeToken<BillingGroupsListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private Integer limit;
        private Integer offset;
        private List<String> include;
        private Map<String, String> dateCreated;
        private Map<String, String> dateModified;
        private BillingGroupsListSortByParameter sortBy;

        private ListRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit How many results to return. (optional, default to 10)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset An integer that designates the offset at which to begin returning results. Defaults to 0. (optional, default to 0)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set include
         * @param include Request that the response include the total count by specifying &#x60;include&#x3D;[\&quot;total_count\&quot;]&#x60;.  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder include(List<String> include) {
            this.include = include;
            return this;
        }
        
        /**
         * Set dateCreated
         * @param dateCreated Filter by date created. Accepted formats are ISO-8601 date or datetime, e.g. &#x60;{ \&quot;gt\&quot;: \&quot;2012-01-01\&quot;, \&quot;lt\&quot;: \&quot;2012-01-31T12:34:56Z\&quot; }&#x60; where &#x60;gt&#x60; is &gt;, &#x60;lt&#x60; is &lt;, &#x60;gte&#x60; is ≥, and &#x60;lte&#x60; is ≤. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder dateCreated(Map<String, String> dateCreated) {
            this.dateCreated = dateCreated;
            return this;
        }
        
        /**
         * Set dateModified
         * @param dateModified Filter by date modified. Accepted formats are ISO-8601 date or datetime, e.g. &#x60;{ \&quot;gt\&quot;: \&quot;2012-01-01\&quot;, \&quot;lt\&quot;: \&quot;2012-01-31T12:34:56Z\&quot; }&#x60; where &#x60;gt&#x60; is &gt;, &#x60;lt&#x60; is &lt;, &#x60;gte&#x60; is ≥, and &#x60;lte&#x60; is ≤. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder dateModified(Map<String, String> dateModified) {
            this.dateModified = dateModified;
            return this;
        }
        
        /**
         * Set sortBy
         * @param sortBy Sorts items by ascending or descending dates. Use either &#x60;date_created&#x60; or &#x60;date_modified&#x60;, not both.  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder sortBy(BillingGroupsListSortByParameter sortBy) {
            this.sortBy = sortBy;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of billing_groups. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(limit, offset, include, dateCreated, dateModified, sortBy, _callback);
        }


        /**
         * Execute list request
         * @return BillingGroupsListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of billing_groups. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public BillingGroupsListResponse execute() throws ApiException {
            ApiResponse<BillingGroupsListResponse> localVarResp = listWithHttpInfo(limit, offset, include, dateCreated, dateModified, sortBy);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;BillingGroupsListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of billing_groups. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BillingGroupsListResponse> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(limit, offset, include, dateCreated, dateModified, sortBy);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of billing_groups. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BillingGroupsListResponse> _callback) throws ApiException {
            return listAsync(limit, offset, include, dateCreated, dateModified, sortBy, _callback);
        }
    }

    /**
     * List
     * Returns a list of your billing_groups. The billing_groups are returned sorted by creation date, with the most recently created billing_groups appearing first.
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of billing_groups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list() throws IllegalArgumentException {
        return new ListRequestBuilder();
    }
    private okhttp3.Call updateAttributesCall(String bgId, BillingGroupBase billingGroupBase, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = billingGroupBase;

        // create path and map variables
        String localVarPath = "/billing_groups/{bg_id}"
            .replace("{" + "bg_id" + "}", localVarApiClient.escapeString(bgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAttributesValidateBeforeCall(String bgId, BillingGroupBase billingGroupBase, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bgId' is set
        if (bgId == null) {
            throw new ApiException("Missing the required parameter 'bgId' when calling updateAttributes(Async)");
        }

        // verify the required parameter 'billingGroupBase' is set
        if (billingGroupBase == null) {
            throw new ApiException("Missing the required parameter 'billingGroupBase' when calling updateAttributes(Async)");
        }

        return updateAttributesCall(bgId, billingGroupBase, _callback);

    }


    private ApiResponse<BillingGroup> updateAttributesWithHttpInfo(String bgId, BillingGroupBase billingGroupBase) throws ApiException {
        okhttp3.Call localVarCall = updateAttributesValidateBeforeCall(bgId, billingGroupBase, null);
        Type localVarReturnType = new TypeToken<BillingGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateAttributesAsync(String bgId, BillingGroupBase billingGroupBase, final ApiCallback<BillingGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAttributesValidateBeforeCall(bgId, billingGroupBase, _callback);
        Type localVarReturnType = new TypeToken<BillingGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateAttributesRequestBuilder {
        private final String bgId;
        private String description;
        private String name;

        private UpdateAttributesRequestBuilder(String bgId) {
            this.bgId = bgId;
        }

        /**
         * Set description
         * @param description Description of the billing group. (optional)
         * @return UpdateAttributesRequestBuilder
         */
        public UpdateAttributesRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name Name of the billing group. (optional)
         * @return UpdateAttributesRequestBuilder
         */
        public UpdateAttributesRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for updateAttributes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a billing group object </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BillingGroupBase billingGroupBase = buildBodyParams();
            return updateAttributesCall(bgId, billingGroupBase, _callback);
        }

        private BillingGroupBase buildBodyParams() {
            BillingGroupBase billingGroupBase = new BillingGroupBase();
            billingGroupBase.description(this.description);
            billingGroupBase.name(this.name);
            return billingGroupBase;
        }

        /**
         * Execute updateAttributes request
         * @return BillingGroup
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a billing group object </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public BillingGroup execute() throws ApiException {
            BillingGroupBase billingGroupBase = buildBodyParams();
            ApiResponse<BillingGroup> localVarResp = updateAttributesWithHttpInfo(bgId, billingGroupBase);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateAttributes request with HTTP info returned
         * @return ApiResponse&lt;BillingGroup&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a billing group object </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BillingGroup> executeWithHttpInfo() throws ApiException {
            BillingGroupBase billingGroupBase = buildBodyParams();
            return updateAttributesWithHttpInfo(bgId, billingGroupBase);
        }

        /**
         * Execute updateAttributes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a billing group object </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BillingGroup> _callback) throws ApiException {
            BillingGroupBase billingGroupBase = buildBodyParams();
            return updateAttributesAsync(bgId, billingGroupBase, _callback);
        }
    }

    /**
     * Update
     * Updates all editable attributes of the billing_group with the given id.
     * @param bgId id of the billing_group (required)
     * @param billingGroupBase  (required)
     * @return UpdateAttributesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a billing group object </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public UpdateAttributesRequestBuilder updateAttributes(String bgId) throws IllegalArgumentException {
        if (bgId == null) throw new IllegalArgumentException("\"bgId\" is required but got null");
            

        return new UpdateAttributesRequestBuilder(bgId);
    }
}

/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 
 *
 * The version of the OpenAPI document: 1.19.28
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Error;
import com.konfigthis.client.model.IntlVerification;
import com.konfigthis.client.model.IntlVerifications;
import com.konfigthis.client.model.IntlVerificationsPayload;
import com.konfigthis.client.model.MultipleComponentsIntl;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class IntlVerificationsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IntlVerificationsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public IntlVerificationsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call verificationCall(Object body, String xLangOutput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/intl_verifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xLangOutput != null) {
            localVarHeaderParams.put("x-lang-output", localVarApiClient.parameterToString(xLangOutput));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verificationValidateBeforeCall(Object body, String xLangOutput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling verification(Async)");
        }

        return verificationCall(body, xLangOutput, _callback);

    }


    private ApiResponse<IntlVerification> verificationWithHttpInfo(Object body, String xLangOutput) throws ApiException {
        okhttp3.Call localVarCall = verificationValidateBeforeCall(body, xLangOutput, null);
        Type localVarReturnType = new TypeToken<IntlVerification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call verificationAsync(Object body, String xLangOutput, final ApiCallback<IntlVerification> _callback) throws ApiException {

        okhttp3.Call localVarCall = verificationValidateBeforeCall(body, xLangOutput, _callback);
        Type localVarReturnType = new TypeToken<IntlVerification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class VerificationRequestBuilder {
        private String xLangOutput;
        private Object body;

        private VerificationRequestBuilder() {
        }

        /**
         * Set body
         * @param body  (optional)
         * @return VerificationRequestBuilder
         */
        public VerificationRequestBuilder body(Object body) {
            this.body = body;
            return this;
        }

        /**
         * Set xLangOutput
         * @param xLangOutput * &#x60;native&#x60; - Translate response to the native language of the country in the request * &#x60;match&#x60; - match the response to the language in the request  Default response is in English.  (optional)
         * @return VerificationRequestBuilder
         */
        public VerificationRequestBuilder xLangOutput(String xLangOutput) {
            this.xLangOutput = xLangOutput;
            return this;
        }
        
        /**
         * Build call for verification
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an international verification object. </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Object body = buildBodyParams();
            return verificationCall(body, xLangOutput, _callback);
        }

        private Object buildBodyParams() {
            return this.body;
        }

        /**
         * Execute verification request
         * @return IntlVerification
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an international verification object. </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public IntlVerification execute() throws ApiException {
            Object body = buildBodyParams();
            ApiResponse<IntlVerification> localVarResp = verificationWithHttpInfo(body, xLangOutput);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute verification request with HTTP info returned
         * @return ApiResponse&lt;IntlVerification&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an international verification object. </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<IntlVerification> executeWithHttpInfo() throws ApiException {
            Object body = buildBodyParams();
            return verificationWithHttpInfo(body, xLangOutput);
        }

        /**
         * Execute verification request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an international verification object. </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IntlVerification> _callback) throws ApiException {
            Object body = buildBodyParams();
            return verificationAsync(body, xLangOutput, _callback);
        }
    }

    /**
     * Single Verify
     * Verify an international (except US or US territories) address _with a live API key_. Requests to this endpoint with a test API key will return a dummy response based on the primary line you input.
     * @param body  (required)
     * @return VerificationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an international verification object. </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public VerificationRequestBuilder verification() throws IllegalArgumentException {
        return new VerificationRequestBuilder();
    }
    private okhttp3.Call verifyBulkAddressesCall(IntlVerificationsPayload intlVerificationsPayload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = intlVerificationsPayload;

        // create path and map variables
        String localVarPath = "/bulk/intl_verifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyBulkAddressesValidateBeforeCall(IntlVerificationsPayload intlVerificationsPayload, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'intlVerificationsPayload' is set
        if (intlVerificationsPayload == null) {
            throw new ApiException("Missing the required parameter 'intlVerificationsPayload' when calling verifyBulkAddresses(Async)");
        }

        return verifyBulkAddressesCall(intlVerificationsPayload, _callback);

    }


    private ApiResponse<IntlVerifications> verifyBulkAddressesWithHttpInfo(IntlVerificationsPayload intlVerificationsPayload) throws ApiException {
        okhttp3.Call localVarCall = verifyBulkAddressesValidateBeforeCall(intlVerificationsPayload, null);
        Type localVarReturnType = new TypeToken<IntlVerifications>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call verifyBulkAddressesAsync(IntlVerificationsPayload intlVerificationsPayload, final ApiCallback<IntlVerifications> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyBulkAddressesValidateBeforeCall(intlVerificationsPayload, _callback);
        Type localVarReturnType = new TypeToken<IntlVerifications>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class VerifyBulkAddressesRequestBuilder {
        private final List<MultipleComponentsIntl> addresses;

        private VerifyBulkAddressesRequestBuilder(List<MultipleComponentsIntl> addresses) {
            this.addresses = addresses;
        }

        /**
         * Build call for verifyBulkAddresses
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an array of international verification objects. </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            IntlVerificationsPayload intlVerificationsPayload = buildBodyParams();
            return verifyBulkAddressesCall(intlVerificationsPayload, _callback);
        }

        private IntlVerificationsPayload buildBodyParams() {
            IntlVerificationsPayload intlVerificationsPayload = new IntlVerificationsPayload();
            intlVerificationsPayload.addresses(this.addresses);
            return intlVerificationsPayload;
        }

        /**
         * Execute verifyBulkAddresses request
         * @return IntlVerifications
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an array of international verification objects. </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public IntlVerifications execute() throws ApiException {
            IntlVerificationsPayload intlVerificationsPayload = buildBodyParams();
            ApiResponse<IntlVerifications> localVarResp = verifyBulkAddressesWithHttpInfo(intlVerificationsPayload);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute verifyBulkAddresses request with HTTP info returned
         * @return ApiResponse&lt;IntlVerifications&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an array of international verification objects. </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<IntlVerifications> executeWithHttpInfo() throws ApiException {
            IntlVerificationsPayload intlVerificationsPayload = buildBodyParams();
            return verifyBulkAddressesWithHttpInfo(intlVerificationsPayload);
        }

        /**
         * Execute verifyBulkAddresses request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an array of international verification objects. </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IntlVerifications> _callback) throws ApiException {
            IntlVerificationsPayload intlVerificationsPayload = buildBodyParams();
            return verifyBulkAddressesAsync(intlVerificationsPayload, _callback);
        }
    }

    /**
     * Bulk Verify
     * Verify a list of international (except US or US territories) address _with a live API key_. Requests to this endpoint with a test API key will return a dummy response based on the primary line you input.
     * @param intlVerificationsPayload  (required)
     * @return VerifyBulkAddressesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an array of international verification objects. </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public VerifyBulkAddressesRequestBuilder verifyBulkAddresses(List<MultipleComponentsIntl> addresses) throws IllegalArgumentException {
        if (addresses == null) throw new IllegalArgumentException("\"addresses\" is required but got null");
        return new VerifyBulkAddressesRequestBuilder(addresses);
    }
}

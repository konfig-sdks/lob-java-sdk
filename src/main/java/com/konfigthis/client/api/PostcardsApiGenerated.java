/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 
 *
 * The version of the OpenAPI document: 1.19.28
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddressesListBeforeAfterParameterAllOf;
import com.konfigthis.client.model.ChecksListSortByParameterAllOf;
import com.konfigthis.client.model.Error;
import com.konfigthis.client.model.MailType;
import com.konfigthis.client.model.Postcard;
import com.konfigthis.client.model.PostcardDeletion;
import com.konfigthis.client.model.PostcardEditable;
import com.konfigthis.client.model.PostcardSize;
import com.konfigthis.client.model.PostcardsListResponse;
import com.konfigthis.client.model.PscUseType;
import com.konfigthis.client.model.QrCode;
import com.konfigthis.client.model.Status;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PostcardsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PostcardsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PostcardsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createCall(PostcardEditable postcardEditable, String idempotencyKey, String idempotencyKey2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postcardEditable;

        // create path and map variables
        String localVarPath = "/postcards";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idempotency_key", idempotencyKey2));
        }

        if (idempotencyKey != null) {
            localVarHeaderParams.put("Idempotency-Key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createValidateBeforeCall(PostcardEditable postcardEditable, String idempotencyKey, String idempotencyKey2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'postcardEditable' is set
        if (postcardEditable == null) {
            throw new ApiException("Missing the required parameter 'postcardEditable' when calling create(Async)");
        }

        return createCall(postcardEditable, idempotencyKey, idempotencyKey2, _callback);

    }


    private ApiResponse<Postcard> createWithHttpInfo(PostcardEditable postcardEditable, String idempotencyKey, String idempotencyKey2) throws ApiException {
        okhttp3.Call localVarCall = createValidateBeforeCall(postcardEditable, idempotencyKey, idempotencyKey2, null);
        Type localVarReturnType = new TypeToken<Postcard>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createAsync(PostcardEditable postcardEditable, String idempotencyKey, String idempotencyKey2, final ApiCallback<Postcard> _callback) throws ApiException {

        okhttp3.Call localVarCall = createValidateBeforeCall(postcardEditable, idempotencyKey, idempotencyKey2, _callback);
        Type localVarReturnType = new TypeToken<Postcard>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateRequestBuilder {
        private String description;
        private Map<String, String> metadata;
        private MailType mailType;
        private String mergeVariables;
        private Object sendDate;
        private PostcardSize size;
        private Object to;
        private Object from;
        private Object front;
        private Object back;
        private String billingGroupId;
        private QrCode qrCode;
        private PscUseType useType;
        private Boolean fsc;
        private String idempotencyKey;
        private String idempotencyKey2;
        private PostcardEditable postcardEditable;

        private CreateRequestBuilder() {
        }

        /**
         * Set postcardEditable
         * @param postcardEditable  (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder postcardEditable(PostcardEditable postcardEditable) {
            this.postcardEditable = postcardEditable;
            return this;
        }

        /**
         * Set description
         * @param description An internal description that identifies this resource. Must be no longer than 255 characters.  (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set metadata
         * @param metadata Use metadata to store custom information for tagging and labeling back to your internal systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must be at most 500 characters. Neither can contain the characters &#x60;\\\&quot;&#x60; and &#x60;\\\\&#x60;. i.e. &#39;{\\\&quot;customer_id\\\&quot; : \\\&quot;NEWYORK2015\\\&quot;}&#39; Nested objects are not supported.  See [Metadata](#section/Metadata) for more information. (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder metadata(Map<String, String> metadata) {
            this.metadata = metadata;
            return this;
        }
        
        /**
         * Set mailType
         * @param mailType  (optional, default to usps_first_class)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder mailType(MailType mailType) {
            this.mailType = mailType;
            return this;
        }
        
        /**
         * Set mergeVariables
         * @param mergeVariables You can input a merge variable payload object to your template to render dynamic content. For example, if you have a template like: &#x60;{{variable_name}}&#x60;, pass in &#x60;{\\\&quot;variable_name\\\&quot;: \\\&quot;Harry\\\&quot;}&#x60; to render &#x60;Harry&#x60;. &#x60;merge_variables&#x60; must be an object. Any type of value is accepted as long as the object is valid JSON; you can use &#x60;strings&#x60;, &#x60;numbers&#x60;, &#x60;booleans&#x60;, &#x60;arrays&#x60;, &#x60;objects&#x60;, or &#x60;null&#x60;. The max length of the object is 25,000 characters. If you call &#x60;JSON.stringify&#x60; on your object, it can be no longer than 25,000 characters. Your variable names cannot contain any whitespace or any of the following special characters: &#x60;!&#x60;, &#x60;\\\&quot;&#x60;, &#x60;#&#x60;, &#x60;%&#x60;, &#x60;&amp;&#x60;, &#x60;&#39;&#x60;, &#x60;(&#x60;, &#x60;)&#x60;, &#x60;*&#x60;, &#x60;+&#x60;, &#x60;,&#x60;, &#x60;/&#x60;, &#x60;;&#x60;, &#x60;&lt;&#x60;, &#x60;&#x3D;&#x60;, &#x60;&gt;&#x60;, &#x60;@&#x60;, &#x60;[&#x60;, &#x60;\\\\&#x60;, &#x60;]&#x60;, &#x60;^&#x60;, &#x60;&#x60; &#x60; &#x60;&#x60;, &#x60;{&#x60;, &#x60;|&#x60;, &#x60;}&#x60;, &#x60;~&#x60;. More instructions can be found in &lt;a href&#x3D;\\\&quot;https://help.lob.com/print-and-mail/designing-mail-creatives/dynamic-personalization#using-html-and-merge-variables-10\\\&quot; target&#x3D;\\\&quot;_blank\\\&quot;&gt;our guide to using html and merge variables&lt;/a&gt;. Depending on your &lt;a href&#x3D;\\\&quot;https://dashboard.lob.com/#/settings/account\\\&quot; target&#x3D;\\\&quot;_blank\\\&quot;&gt;Merge Variable strictness&lt;/a&gt; setting, if you define variables in your HTML but do not pass them here, you will either receive an error or the variable will render as an empty string. (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder mergeVariables(String mergeVariables) {
            this.mergeVariables = mergeVariables;
            return this;
        }
        
        /**
         * Set sendDate
         * @param sendDate  (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder sendDate(Object sendDate) {
            this.sendDate = sendDate;
            return this;
        }
        
        /**
         * Set size
         * @param size  (optional, default to 4x6)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder size(PostcardSize size) {
            this.size = size;
            return this;
        }
        
        /**
         * Set to
         * @param to  (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder to(Object to) {
            this.to = to;
            return this;
        }
        
        /**
         * Set from
         * @param from  (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder from(Object from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set front
         * @param front  (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder front(Object front) {
            this.front = front;
            return this;
        }
        
        /**
         * Set back
         * @param back  (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder back(Object back) {
            this.back = back;
            return this;
        }
        
        /**
         * Set billingGroupId
         * @param billingGroupId An optional string with the billing group ID to tag your usage with. Is used for billing purposes. Requires special activation to use. See &lt;a href&#x3D;\\\&quot;#tag/Billing-Groups\\\&quot;&gt;Billing Group API&lt;/a&gt; for more information. (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder billingGroupId(String billingGroupId) {
            this.billingGroupId = billingGroupId;
            return this;
        }
        
        /**
         * Set qrCode
         * @param qrCode  (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder qrCode(QrCode qrCode) {
            this.qrCode = qrCode;
            return this;
        }
        
        /**
         * Set useType
         * @param useType  (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder useType(PscUseType useType) {
            this.useType = useType;
            return this;
        }
        
        /**
         * Set fsc
         * @param fsc This is in beta. Contact support@lob.com or your account contact to learn more. Not available for &#x60;4x6&#x60; or &#x60;A5&#x60; postcard sizes. (optional, default to false)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder fsc(Boolean fsc) {
            this.fsc = fsc;
            return this;
        }
        
        /**
         * Set idempotencyKey
         * @param idempotencyKey A string of no longer than 256 characters that uniquely identifies this resource. For more help integrating idempotency keys, refer to our &lt;a href&#x3D;\&quot;https://help.lob.com/print-and-mail/building-a-mail-strategy/managing-mail-settings#idempotent-requests-12\&quot; target&#x3D;\&quot;_blank\&quot;&gt;implementation guide&lt;/a&gt;.  (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder idempotencyKey(String idempotencyKey) {
            this.idempotencyKey = idempotencyKey;
            return this;
        }
        
        /**
         * Set idempotencyKey2
         * @param idempotencyKey2 A string of no longer than 256 characters that uniquely identifies this resource. For more help integrating idempotency keys, refer to our &lt;a href&#x3D;\&quot;https://help.lob.com/print-and-mail/building-a-mail-strategy/managing-mail-settings#idempotent-requests-12\&quot; target&#x3D;\&quot;_blank\&quot;&gt;implementation guide&lt;/a&gt;.  (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder idempotencyKey2(String idempotencyKey2) {
            this.idempotencyKey2 = idempotencyKey2;
            return this;
        }
        
        /**
         * Build call for create
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a postcard object </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PostcardEditable postcardEditable = buildBodyParams();
            return createCall(postcardEditable, idempotencyKey, idempotencyKey2, _callback);
        }

        private PostcardEditable buildBodyParams() {
            return this.postcardEditable;
        }

        /**
         * Execute create request
         * @return Postcard
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a postcard object </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public Postcard execute() throws ApiException {
            PostcardEditable postcardEditable = buildBodyParams();
            ApiResponse<Postcard> localVarResp = createWithHttpInfo(postcardEditable, idempotencyKey, idempotencyKey2);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute create request with HTTP info returned
         * @return ApiResponse&lt;Postcard&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a postcard object </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Postcard> executeWithHttpInfo() throws ApiException {
            PostcardEditable postcardEditable = buildBodyParams();
            return createWithHttpInfo(postcardEditable, idempotencyKey, idempotencyKey2);
        }

        /**
         * Execute create request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a postcard object </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Postcard> _callback) throws ApiException {
            PostcardEditable postcardEditable = buildBodyParams();
            return createAsync(postcardEditable, idempotencyKey, idempotencyKey2, _callback);
        }
    }

    /**
     * Create
     * Creates a new postcard given information
     * @param postcardEditable  (required)
     * @return CreateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a postcard object </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public CreateRequestBuilder create() throws IllegalArgumentException {
        return new CreateRequestBuilder();
    }
    private okhttp3.Call deleteCall(String pscId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/postcards/{psc_id}"
            .replace("{" + "psc_id" + "}", localVarApiClient.escapeString(pscId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteValidateBeforeCall(String pscId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pscId' is set
        if (pscId == null) {
            throw new ApiException("Missing the required parameter 'pscId' when calling delete(Async)");
        }

        return deleteCall(pscId, _callback);

    }


    private ApiResponse<PostcardDeletion> deleteWithHttpInfo(String pscId) throws ApiException {
        okhttp3.Call localVarCall = deleteValidateBeforeCall(pscId, null);
        Type localVarReturnType = new TypeToken<PostcardDeletion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteAsync(String pscId, final ApiCallback<PostcardDeletion> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteValidateBeforeCall(pscId, _callback);
        Type localVarReturnType = new TypeToken<PostcardDeletion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteRequestBuilder {
        private final String pscId;

        private DeleteRequestBuilder(String pscId) {
            this.pscId = pscId;
        }

        /**
         * Build call for delete
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCall(pscId, _callback);
        }


        /**
         * Execute delete request
         * @return PostcardDeletion
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public PostcardDeletion execute() throws ApiException {
            ApiResponse<PostcardDeletion> localVarResp = deleteWithHttpInfo(pscId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute delete request with HTTP info returned
         * @return ApiResponse&lt;PostcardDeletion&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PostcardDeletion> executeWithHttpInfo() throws ApiException {
            return deleteWithHttpInfo(pscId);
        }

        /**
         * Execute delete request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PostcardDeletion> _callback) throws ApiException {
            return deleteAsync(pscId, _callback);
        }
    }

    /**
     * Cancel
     * Completely removes a postcard from production. This can only be done if the postcard has a &#x60;send_date&#x60; and the &#x60;send_date&#x60; has not yet passed. If the postcard is successfully canceled, you will not be charged for it. Read more on [cancellation windows](#section/Cancellation-Windows) and [scheduling](#section/Scheduled-Mailings). Scheduling and cancellation is a premium feature. Upgrade to the appropriate &lt;a href&#x3D;\&quot;https://dashboard.lob.com/#/settings/editions\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Print &amp; Mail Edition&lt;/a&gt; to gain access.
     * @param pscId id of the postcard (required)
     * @return DeleteRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public DeleteRequestBuilder delete(String pscId) throws IllegalArgumentException {
        if (pscId == null) throw new IllegalArgumentException("\"pscId\" is required but got null");
            

        return new DeleteRequestBuilder(pscId);
    }
    private okhttp3.Call listCall(Integer limit, AddressesListBeforeAfterParameter beforeAfter, List<String> include, Map<String, String> dateCreated, Map<String, String> metadata, String campaignId, Status status, List<PostcardSize> size, Boolean scheduled, Object sendDate, MailType mailType, ChecksListSortByParameter sortBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/postcards";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (beforeAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before/after", beforeAfter));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        if (dateCreated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_created", dateCreated));
        }

        if (metadata != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metadata", metadata));
        }

        if (campaignId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("campaign_id", campaignId));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (size != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "size", size));
        }

        if (scheduled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scheduled", scheduled));
        }

        if (sendDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("send_date", sendDate));
        }

        if (mailType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mail_type", mailType));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(Integer limit, AddressesListBeforeAfterParameter beforeAfter, List<String> include, Map<String, String> dateCreated, Map<String, String> metadata, String campaignId, Status status, List<PostcardSize> size, Boolean scheduled, Object sendDate, MailType mailType, ChecksListSortByParameter sortBy, final ApiCallback _callback) throws ApiException {
        return listCall(limit, beforeAfter, include, dateCreated, metadata, campaignId, status, size, scheduled, sendDate, mailType, sortBy, _callback);

    }


    private ApiResponse<PostcardsListResponse> listWithHttpInfo(Integer limit, AddressesListBeforeAfterParameter beforeAfter, List<String> include, Map<String, String> dateCreated, Map<String, String> metadata, String campaignId, Status status, List<PostcardSize> size, Boolean scheduled, Object sendDate, MailType mailType, ChecksListSortByParameter sortBy) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(limit, beforeAfter, include, dateCreated, metadata, campaignId, status, size, scheduled, sendDate, mailType, sortBy, null);
        Type localVarReturnType = new TypeToken<PostcardsListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(Integer limit, AddressesListBeforeAfterParameter beforeAfter, List<String> include, Map<String, String> dateCreated, Map<String, String> metadata, String campaignId, Status status, List<PostcardSize> size, Boolean scheduled, Object sendDate, MailType mailType, ChecksListSortByParameter sortBy, final ApiCallback<PostcardsListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(limit, beforeAfter, include, dateCreated, metadata, campaignId, status, size, scheduled, sendDate, mailType, sortBy, _callback);
        Type localVarReturnType = new TypeToken<PostcardsListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private Integer limit;
        private AddressesListBeforeAfterParameter beforeAfter;
        private List<String> include;
        private Map<String, String> dateCreated;
        private Map<String, String> metadata;
        private String campaignId;
        private Status status;
        private List<PostcardSize> size;
        private Boolean scheduled;
        private Object sendDate;
        private MailType mailType;
        private ChecksListSortByParameter sortBy;

        private ListRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit How many results to return. (optional, default to 10)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set beforeAfter
         * @param beforeAfter &#x60;before&#x60; and &#x60;after&#x60; are both optional but only one of them can be in the query at a time.  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder beforeAfter(AddressesListBeforeAfterParameter beforeAfter) {
            this.beforeAfter = beforeAfter;
            return this;
        }
        
        /**
         * Set include
         * @param include Request that the response include the total count by specifying &#x60;include&#x3D;[\&quot;total_count\&quot;]&#x60;.  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder include(List<String> include) {
            this.include = include;
            return this;
        }
        
        /**
         * Set dateCreated
         * @param dateCreated Filter by date created. Accepted formats are ISO-8601 date or datetime, e.g. &#x60;{ \&quot;gt\&quot;: \&quot;2012-01-01\&quot;, \&quot;lt\&quot;: \&quot;2012-01-31T12:34:56Z\&quot; }&#x60; where &#x60;gt&#x60; is &gt;, &#x60;lt&#x60; is &lt;, &#x60;gte&#x60; is ≥, and &#x60;lte&#x60; is ≤. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder dateCreated(Map<String, String> dateCreated) {
            this.dateCreated = dateCreated;
            return this;
        }
        
        /**
         * Set metadata
         * @param metadata Filter by metadata key-value pair&#x60;. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder metadata(Map<String, String> metadata) {
            this.metadata = metadata;
            return this;
        }
        
        /**
         * Set campaignId
         * @param campaignId Filters resources created by the provided campaign id, prefixed with &#x60;cmp_&#x60;. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder campaignId(String campaignId) {
            this.campaignId = campaignId;
            return this;
        }
        
        /**
         * Set status
         * @param status A string describing the render status: * &#x60;processed&#x60; - the rendering process is currently underway. * &#x60;rendered&#x60; - the rendering process has completed successfully. * &#x60;failed&#x60; - the rendering process has failed.  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder status(Status status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set size
         * @param size Specifies the size of the postcard. Only &#x60;4x6&#x60; postcards can be sent to international destinations. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder size(List<PostcardSize> size) {
            this.size = size;
            return this;
        }
        
        /**
         * Set scheduled
         * @param scheduled * &#x60;true&#x60; - only return orders (past or future) where &#x60;send_date&#x60; is greater than &#x60;date_created&#x60; * &#x60;false&#x60; - only return orders where &#x60;send_date&#x60; is equal to &#x60;date_created&#x60;  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder scheduled(Boolean scheduled) {
            this.scheduled = scheduled;
            return this;
        }
        
        /**
         * Set sendDate
         * @param sendDate Filter by ISO-8601 date or datetime, e.g. &#x60;{ \&quot;gt\&quot;: \&quot;2012-01-01\&quot;, \&quot;lt\&quot;: \&quot;2012-01-31T12:34:56Z\&quot; }&#x60; where &#x60;gt&#x60; is &gt;, &#x60;lt&#x60; is &lt;, &#x60;gte&#x60; is ≥, and &#x60;lte&#x60; is ≤.  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder sendDate(Object sendDate) {
            this.sendDate = sendDate;
            return this;
        }
        
        /**
         * Set mailType
         * @param mailType A string designating the mail postage type: * &#x60;usps_first_class&#x60; - (default) * &#x60;usps_standard&#x60; - a &lt;a href&#x3D;\&quot;https://lob.com/pricing/print-mail#compare\&quot; target&#x3D;\&quot;_blank\&quot;&gt;cheaper option&lt;/a&gt; which is less predictable and takes longer to deliver. &#x60;usps_standard&#x60; cannot be used with &#x60;4x6&#x60; postcards or for any postcards sent outside of the United States.  (optional, default to usps_first_class)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder mailType(MailType mailType) {
            this.mailType = mailType;
            return this;
        }
        
        /**
         * Set sortBy
         * @param sortBy Sorts items by ascending or descending dates. Use either &#x60;date_created&#x60; or &#x60;send_date&#x60;, not both.  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder sortBy(ChecksListSortByParameter sortBy) {
            this.sortBy = sortBy;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A dictionary with a data property that contains an array of up to &#x60;limit&#x60; postcards. Each entry in the array is a separate postcard. The previous and next page of postcards can be retrieved by calling the endpoint contained in the &#x60;previous_url&#x60; and &#x60;next_url&#x60; fields in the API response respectively.&lt;br&gt;If no more postcards are available beyond the current set of returned results, the &#x60;next_url&#x60; field will be empty. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(limit, beforeAfter, include, dateCreated, metadata, campaignId, status, size, scheduled, sendDate, mailType, sortBy, _callback);
        }


        /**
         * Execute list request
         * @return PostcardsListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A dictionary with a data property that contains an array of up to &#x60;limit&#x60; postcards. Each entry in the array is a separate postcard. The previous and next page of postcards can be retrieved by calling the endpoint contained in the &#x60;previous_url&#x60; and &#x60;next_url&#x60; fields in the API response respectively.&lt;br&gt;If no more postcards are available beyond the current set of returned results, the &#x60;next_url&#x60; field will be empty. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public PostcardsListResponse execute() throws ApiException {
            ApiResponse<PostcardsListResponse> localVarResp = listWithHttpInfo(limit, beforeAfter, include, dateCreated, metadata, campaignId, status, size, scheduled, sendDate, mailType, sortBy);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;PostcardsListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A dictionary with a data property that contains an array of up to &#x60;limit&#x60; postcards. Each entry in the array is a separate postcard. The previous and next page of postcards can be retrieved by calling the endpoint contained in the &#x60;previous_url&#x60; and &#x60;next_url&#x60; fields in the API response respectively.&lt;br&gt;If no more postcards are available beyond the current set of returned results, the &#x60;next_url&#x60; field will be empty. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PostcardsListResponse> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(limit, beforeAfter, include, dateCreated, metadata, campaignId, status, size, scheduled, sendDate, mailType, sortBy);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A dictionary with a data property that contains an array of up to &#x60;limit&#x60; postcards. Each entry in the array is a separate postcard. The previous and next page of postcards can be retrieved by calling the endpoint contained in the &#x60;previous_url&#x60; and &#x60;next_url&#x60; fields in the API response respectively.&lt;br&gt;If no more postcards are available beyond the current set of returned results, the &#x60;next_url&#x60; field will be empty. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PostcardsListResponse> _callback) throws ApiException {
            return listAsync(limit, beforeAfter, include, dateCreated, metadata, campaignId, status, size, scheduled, sendDate, mailType, sortBy, _callback);
        }
    }

    /**
     * List
     * Returns a list of your postcards. The addresses are returned sorted by creation date, with the most recently created addresses appearing first.
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A dictionary with a data property that contains an array of up to &#x60;limit&#x60; postcards. Each entry in the array is a separate postcard. The previous and next page of postcards can be retrieved by calling the endpoint contained in the &#x60;previous_url&#x60; and &#x60;next_url&#x60; fields in the API response respectively.&lt;br&gt;If no more postcards are available beyond the current set of returned results, the &#x60;next_url&#x60; field will be empty. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list() throws IllegalArgumentException {
        return new ListRequestBuilder();
    }
    private okhttp3.Call retrieveCall(String pscId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/postcards/{psc_id}"
            .replace("{" + "psc_id" + "}", localVarApiClient.escapeString(pscId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveValidateBeforeCall(String pscId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pscId' is set
        if (pscId == null) {
            throw new ApiException("Missing the required parameter 'pscId' when calling retrieve(Async)");
        }

        return retrieveCall(pscId, _callback);

    }


    private ApiResponse<Postcard> retrieveWithHttpInfo(String pscId) throws ApiException {
        okhttp3.Call localVarCall = retrieveValidateBeforeCall(pscId, null);
        Type localVarReturnType = new TypeToken<Postcard>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call retrieveAsync(String pscId, final ApiCallback<Postcard> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveValidateBeforeCall(pscId, _callback);
        Type localVarReturnType = new TypeToken<Postcard>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RetrieveRequestBuilder {
        private final String pscId;

        private RetrieveRequestBuilder(String pscId) {
            this.pscId = pscId;
        }

        /**
         * Build call for retrieve
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a postcard object </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return retrieveCall(pscId, _callback);
        }


        /**
         * Execute retrieve request
         * @return Postcard
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a postcard object </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public Postcard execute() throws ApiException {
            ApiResponse<Postcard> localVarResp = retrieveWithHttpInfo(pscId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute retrieve request with HTTP info returned
         * @return ApiResponse&lt;Postcard&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a postcard object </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Postcard> executeWithHttpInfo() throws ApiException {
            return retrieveWithHttpInfo(pscId);
        }

        /**
         * Execute retrieve request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a postcard object </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Postcard> _callback) throws ApiException {
            return retrieveAsync(pscId, _callback);
        }
    }

    /**
     * Retrieve
     * Retrieves the details of an existing postcard. You need only supply the unique customer identifier that was returned upon postcard creation.
     * @param pscId id of the postcard (required)
     * @return RetrieveRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a postcard object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveRequestBuilder retrieve(String pscId) throws IllegalArgumentException {
        if (pscId == null) throw new IllegalArgumentException("\"pscId\" is required but got null");
            

        return new RetrieveRequestBuilder(pscId);
    }
}

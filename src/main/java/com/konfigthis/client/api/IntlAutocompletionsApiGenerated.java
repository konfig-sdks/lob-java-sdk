/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 
 *
 * The version of the OpenAPI document: 1.19.28
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CountryExtended;
import com.konfigthis.client.model.Error;
import com.konfigthis.client.model.IntlAutocompletions;
import com.konfigthis.client.model.IntlAutocompletionsWritable;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class IntlAutocompletionsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IntlAutocompletionsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public IntlAutocompletionsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call autocompletionsCall(IntlAutocompletionsWritable intlAutocompletionsWritable, String xLangOutput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = intlAutocompletionsWritable;

        // create path and map variables
        String localVarPath = "/intl_autocompletions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xLangOutput != null) {
            localVarHeaderParams.put("x-lang-output", localVarApiClient.parameterToString(xLangOutput));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call autocompletionsValidateBeforeCall(IntlAutocompletionsWritable intlAutocompletionsWritable, String xLangOutput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'intlAutocompletionsWritable' is set
        if (intlAutocompletionsWritable == null) {
            throw new ApiException("Missing the required parameter 'intlAutocompletionsWritable' when calling autocompletions(Async)");
        }

        return autocompletionsCall(intlAutocompletionsWritable, xLangOutput, _callback);

    }


    private ApiResponse<IntlAutocompletions> autocompletionsWithHttpInfo(IntlAutocompletionsWritable intlAutocompletionsWritable, String xLangOutput) throws ApiException {
        okhttp3.Call localVarCall = autocompletionsValidateBeforeCall(intlAutocompletionsWritable, xLangOutput, null);
        Type localVarReturnType = new TypeToken<IntlAutocompletions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call autocompletionsAsync(IntlAutocompletionsWritable intlAutocompletionsWritable, String xLangOutput, final ApiCallback<IntlAutocompletions> _callback) throws ApiException {

        okhttp3.Call localVarCall = autocompletionsValidateBeforeCall(intlAutocompletionsWritable, xLangOutput, _callback);
        Type localVarReturnType = new TypeToken<IntlAutocompletions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AutocompletionsRequestBuilder {
        private final String addressPrefix;
        private final CountryExtended country;
        private String city;
        private String state;
        private String zipCode;
        private Boolean geoIpSort;
        private String xLangOutput;

        private AutocompletionsRequestBuilder(String addressPrefix, CountryExtended country) {
            this.addressPrefix = addressPrefix;
            this.country = country;
        }

        /**
         * Set city
         * @param city An optional city input used to filter suggestions. Case insensitive and does not match partial abbreviations.  (optional)
         * @return AutocompletionsRequestBuilder
         */
        public AutocompletionsRequestBuilder city(String city) {
            this.city = city;
            return this;
        }
        
        /**
         * Set state
         * @param state An optional state input used to filter suggestions. Case insensitive and does not match partial abbreviations.  (optional)
         * @return AutocompletionsRequestBuilder
         */
        public AutocompletionsRequestBuilder state(String state) {
            this.state = state;
            return this;
        }
        
        /**
         * Set zipCode
         * @param zipCode An optional Zip Code input used to filter suggestions. Matches partial entries.  (optional)
         * @return AutocompletionsRequestBuilder
         */
        public AutocompletionsRequestBuilder zipCode(String zipCode) {
            this.zipCode = zipCode;
            return this;
        }
        
        /**
         * Set geoIpSort
         * @param geoIpSort If &#x60;true&#x60;, sort suggestions by proximity to the IP set in the &#x60;X-Forwarded-For&#x60; header.  (optional)
         * @return AutocompletionsRequestBuilder
         */
        public AutocompletionsRequestBuilder geoIpSort(Boolean geoIpSort) {
            this.geoIpSort = geoIpSort;
            return this;
        }
        
        /**
         * Set xLangOutput
         * @param xLangOutput * &#x60;native&#x60; - Translate response to the native language of the country in the request * &#x60;match&#x60; - match the response to the language in the request  Default response is in English.  (optional)
         * @return AutocompletionsRequestBuilder
         */
        public AutocompletionsRequestBuilder xLangOutput(String xLangOutput) {
            this.xLangOutput = xLangOutput;
            return this;
        }
        
        /**
         * Build call for autocompletions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an international autocompletions object. </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            IntlAutocompletionsWritable intlAutocompletionsWritable = buildBodyParams();
            return autocompletionsCall(intlAutocompletionsWritable, xLangOutput, _callback);
        }

        private IntlAutocompletionsWritable buildBodyParams() {
            IntlAutocompletionsWritable intlAutocompletionsWritable = new IntlAutocompletionsWritable();
            intlAutocompletionsWritable.addressPrefix(this.addressPrefix);
            intlAutocompletionsWritable.city(this.city);
            intlAutocompletionsWritable.state(this.state);
            intlAutocompletionsWritable.zipCode(this.zipCode);
            intlAutocompletionsWritable.country(this.country);
            intlAutocompletionsWritable.geoIpSort(this.geoIpSort);
            return intlAutocompletionsWritable;
        }

        /**
         * Execute autocompletions request
         * @return IntlAutocompletions
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an international autocompletions object. </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public IntlAutocompletions execute() throws ApiException {
            IntlAutocompletionsWritable intlAutocompletionsWritable = buildBodyParams();
            ApiResponse<IntlAutocompletions> localVarResp = autocompletionsWithHttpInfo(intlAutocompletionsWritable, xLangOutput);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute autocompletions request with HTTP info returned
         * @return ApiResponse&lt;IntlAutocompletions&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an international autocompletions object. </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<IntlAutocompletions> executeWithHttpInfo() throws ApiException {
            IntlAutocompletionsWritable intlAutocompletionsWritable = buildBodyParams();
            return autocompletionsWithHttpInfo(intlAutocompletionsWritable, xLangOutput);
        }

        /**
         * Execute autocompletions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an international autocompletions object. </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IntlAutocompletions> _callback) throws ApiException {
            IntlAutocompletionsWritable intlAutocompletionsWritable = buildBodyParams();
            return autocompletionsAsync(intlAutocompletionsWritable, xLangOutput, _callback);
        }
    }

    /**
     * Autocomplete
     * Given an address prefix consisting of a partial primary line and country, as well as optional input of city, state, and zip code, this functionality returns up to 10 full International address suggestions. Not all of them will turn out to be valid addresses; they&#39;ll need to be [verified](#operation/intl_verification).
     * @param intlAutocompletionsWritable  (required)
     * @return AutocompletionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an international autocompletions object. </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public AutocompletionsRequestBuilder autocompletions(String addressPrefix, CountryExtended country) throws IllegalArgumentException {
        if (addressPrefix == null) throw new IllegalArgumentException("\"addressPrefix\" is required but got null");
            

        if (country == null) throw new IllegalArgumentException("\"country\" is required but got null");
        return new AutocompletionsRequestBuilder(addressPrefix, country);
    }
}

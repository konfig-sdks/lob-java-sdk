/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 
 *
 * The version of the OpenAPI document: 1.19.28
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.DomainResponse;
import com.konfigthis.client.model.Domains;
import com.konfigthis.client.model.DomainsResponse;
import com.konfigthis.client.model.Error;
import com.konfigthis.client.model.LinkResponse;
import com.konfigthis.client.model.LinkSingle;
import com.konfigthis.client.model.LinksResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UrlShortenerApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UrlShortenerApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public UrlShortenerApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call bulkShortenLinksCall(List<LinkSingle> linkSingle, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = linkSingle;

        // create path and map variables
        String localVarPath = "/links/shorten/bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkShortenLinksValidateBeforeCall(List<LinkSingle> linkSingle, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'linkSingle' is set
        if (linkSingle == null) {
            throw new ApiException("Missing the required parameter 'linkSingle' when calling bulkShortenLinks(Async)");
        }

        return bulkShortenLinksCall(linkSingle, _callback);

    }


    private ApiResponse<LinksResponse> bulkShortenLinksWithHttpInfo(List<LinkSingle> linkSingle) throws ApiException {
        okhttp3.Call localVarCall = bulkShortenLinksValidateBeforeCall(linkSingle, null);
        Type localVarReturnType = new TypeToken<LinksResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call bulkShortenLinksAsync(List<LinkSingle> linkSingle, final ApiCallback<LinksResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkShortenLinksValidateBeforeCall(linkSingle, _callback);
        Type localVarReturnType = new TypeToken<LinksResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class BulkShortenLinksRequestBuilder {
        private List<LinkSingle> linkSingle;

        private BulkShortenLinksRequestBuilder() {
        }

        /**
         * Set linkSingle
         * @param linkSingle  (optional)
         * @return BulkShortenLinksRequestBuilder
         */
        public BulkShortenLinksRequestBuilder linkSingle(List<LinkSingle> linkSingle) {
            this.linkSingle = linkSingle;
            return this;
        }

        /**
         * Build call for bulkShortenLinks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns all successfully created links </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<LinkSingle> linkSingle = buildBodyParams();
            return bulkShortenLinksCall(linkSingle, _callback);
        }

        private List<LinkSingle> buildBodyParams() {
            return this.linkSingle;
        }

        /**
         * Execute bulkShortenLinks request
         * @return LinksResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns all successfully created links </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public LinksResponse execute() throws ApiException {
            List<LinkSingle> linkSingle = buildBodyParams();
            ApiResponse<LinksResponse> localVarResp = bulkShortenLinksWithHttpInfo(linkSingle);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute bulkShortenLinks request with HTTP info returned
         * @return ApiResponse&lt;LinksResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns all successfully created links </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LinksResponse> executeWithHttpInfo() throws ApiException {
            List<LinkSingle> linkSingle = buildBodyParams();
            return bulkShortenLinksWithHttpInfo(linkSingle);
        }

        /**
         * Execute bulkShortenLinks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns all successfully created links </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LinksResponse> _callback) throws ApiException {
            List<LinkSingle> linkSingle = buildBodyParams();
            return bulkShortenLinksAsync(linkSingle, _callback);
        }
    }

    /**
     * Bulk Create Links
     * Shortens a list of links in a single request.
     * @param linkSingle  (required)
     * @return BulkShortenLinksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns all successfully created links </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public BulkShortenLinksRequestBuilder bulkShortenLinks() throws IllegalArgumentException {
        return new BulkShortenLinksRequestBuilder();
    }
    private okhttp3.Call createCall(Domains domains, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = domains;

        // create path and map variables
        String localVarPath = "/domains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createValidateBeforeCall(Domains domains, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domains' is set
        if (domains == null) {
            throw new ApiException("Missing the required parameter 'domains' when calling create(Async)");
        }

        return createCall(domains, _callback);

    }


    private ApiResponse<DomainResponse> createWithHttpInfo(Domains domains) throws ApiException {
        okhttp3.Call localVarCall = createValidateBeforeCall(domains, null);
        Type localVarReturnType = new TypeToken<DomainResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createAsync(Domains domains, final ApiCallback<DomainResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createValidateBeforeCall(domains, _callback);
        Type localVarReturnType = new TypeToken<DomainResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateRequestBuilder {
        private final String domain;

        private CreateRequestBuilder(String domain) {
            this.domain = domain;
        }

        /**
         * Build call for create
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a domain object with details. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Domains domains = buildBodyParams();
            return createCall(domains, _callback);
        }

        private Domains buildBodyParams() {
            Domains domains = new Domains();
            domains.domain(this.domain);
            return domains;
        }

        /**
         * Execute create request
         * @return DomainResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a domain object with details. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public DomainResponse execute() throws ApiException {
            Domains domains = buildBodyParams();
            ApiResponse<DomainResponse> localVarResp = createWithHttpInfo(domains);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute create request with HTTP info returned
         * @return ApiResponse&lt;DomainResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a domain object with details. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DomainResponse> executeWithHttpInfo() throws ApiException {
            Domains domains = buildBodyParams();
            return createWithHttpInfo(domains);
        }

        /**
         * Execute create request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a domain object with details. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DomainResponse> _callback) throws ApiException {
            Domains domains = buildBodyParams();
            return createAsync(domains, _callback);
        }
    }

    /**
     * Create Domain
     * Add a new custom domain that can be used to create custom links.
     * @param domains  (required)
     * @return CreateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a domain object with details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public CreateRequestBuilder create(String domain) throws IllegalArgumentException {
        if (domain == null) throw new IllegalArgumentException("\"domain\" is required but got null");
            

        return new CreateRequestBuilder(domain);
    }
    private okhttp3.Call create_0Call(LinkSingle linkSingle, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = linkSingle;

        // create path and map variables
        String localVarPath = "/links/shorten";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call create_0ValidateBeforeCall(LinkSingle linkSingle, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'linkSingle' is set
        if (linkSingle == null) {
            throw new ApiException("Missing the required parameter 'linkSingle' when calling create_0(Async)");
        }

        return create_0Call(linkSingle, _callback);

    }


    private ApiResponse<LinkResponse> create_0WithHttpInfo(LinkSingle linkSingle) throws ApiException {
        okhttp3.Call localVarCall = create_0ValidateBeforeCall(linkSingle, null);
        Type localVarReturnType = new TypeToken<LinkResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call create_0Async(LinkSingle linkSingle, final ApiCallback<LinkResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = create_0ValidateBeforeCall(linkSingle, _callback);
        Type localVarReturnType = new TypeToken<LinkResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class Create0RequestBuilder {
        private final String redirectLink;
        private String domain;
        private String slug;
        private Map<String, String> metadataTag;
        private String billingGroupId;

        private Create0RequestBuilder(String redirectLink) {
            this.redirectLink = redirectLink;
        }

        /**
         * Set domain
         * @param domain The registered domain to be used for the short URL. (optional)
         * @return Create0RequestBuilder
         */
        public Create0RequestBuilder domain(String domain) {
            this.domain = domain;
            return this;
        }
        
        /**
         * Set slug
         * @param slug The unique path for the shortened URL, if empty a unique path will be used. (optional)
         * @return Create0RequestBuilder
         */
        public Create0RequestBuilder slug(String slug) {
            this.slug = slug;
            return this;
        }
        
        /**
         * Set metadataTag
         * @param metadataTag Use metadata to store custom information for tagging and labeling back to your internal systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must be at most 500 characters. Neither can contain the characters &#x60;\\\&quot;&#x60; and &#x60;\\\\&#x60;. i.e. &#39;{\\\&quot;customer_id\\\&quot; : \\\&quot;NEWYORK2015\\\&quot;}&#39; Nested objects are not supported.  See [Metadata](#section/Metadata) for more information. (optional)
         * @return Create0RequestBuilder
         */
        public Create0RequestBuilder metadataTag(Map<String, String> metadataTag) {
            this.metadataTag = metadataTag;
            return this;
        }
        
        /**
         * Set billingGroupId
         * @param billingGroupId An optional string with the billing group ID to tag your usage with. Is used for billing purposes. Requires special activation to use. See &lt;a href&#x3D;\\\&quot;#tag/Billing-Groups\\\&quot;&gt;Billing Group API&lt;/a&gt; for more information. (optional)
         * @return Create0RequestBuilder
         */
        public Create0RequestBuilder billingGroupId(String billingGroupId) {
            this.billingGroupId = billingGroupId;
            return this;
        }
        
        /**
         * Build call for create_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a successfully created link. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LinkSingle linkSingle = buildBodyParams();
            return create_0Call(linkSingle, _callback);
        }

        private LinkSingle buildBodyParams() {
            LinkSingle linkSingle = new LinkSingle();
            linkSingle.redirectLink(this.redirectLink);
            linkSingle.domain(this.domain);
            linkSingle.slug(this.slug);
            linkSingle.metadataTag(this.metadataTag);
            linkSingle.billingGroupId(this.billingGroupId);
            return linkSingle;
        }

        /**
         * Execute create_0 request
         * @return LinkResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a successfully created link. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public LinkResponse execute() throws ApiException {
            LinkSingle linkSingle = buildBodyParams();
            ApiResponse<LinkResponse> localVarResp = create_0WithHttpInfo(linkSingle);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute create_0 request with HTTP info returned
         * @return ApiResponse&lt;LinkResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a successfully created link. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LinkResponse> executeWithHttpInfo() throws ApiException {
            LinkSingle linkSingle = buildBodyParams();
            return create_0WithHttpInfo(linkSingle);
        }

        /**
         * Execute create_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a successfully created link. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LinkResponse> _callback) throws ApiException {
            LinkSingle linkSingle = buildBodyParams();
            return create_0Async(linkSingle, _callback);
        }
    }

    /**
     * Create Link
     * Given a long URL, shorten your URL either by using a custom domain or Lob&#39;s own short domain.
     * @param linkSingle  (required)
     * @return Create0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a successfully created link. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Create0RequestBuilder create_0(String redirectLink) throws IllegalArgumentException {
        if (redirectLink == null) throw new IllegalArgumentException("\"redirectLink\" is required but got null");
            

        return new Create0RequestBuilder(redirectLink);
    }
    private okhttp3.Call deleteCall(String domainId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/domains/{domain_id}"
            .replace("{" + "domain_id" + "}", localVarApiClient.escapeString(domainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteValidateBeforeCall(String domainId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling delete(Async)");
        }

        return deleteCall(domainId, _callback);

    }


    private ApiResponse<DomainResponse> deleteWithHttpInfo(String domainId) throws ApiException {
        okhttp3.Call localVarCall = deleteValidateBeforeCall(domainId, null);
        Type localVarReturnType = new TypeToken<DomainResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteAsync(String domainId, final ApiCallback<DomainResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteValidateBeforeCall(domainId, _callback);
        Type localVarReturnType = new TypeToken<DomainResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteRequestBuilder {
        private final String domainId;

        private DeleteRequestBuilder(String domainId) {
            this.domainId = domainId;
        }

        /**
         * Build call for delete
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the deleted link object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCall(domainId, _callback);
        }


        /**
         * Execute delete request
         * @return DomainResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the deleted link object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public DomainResponse execute() throws ApiException {
            ApiResponse<DomainResponse> localVarResp = deleteWithHttpInfo(domainId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute delete request with HTTP info returned
         * @return ApiResponse&lt;DomainResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the deleted link object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DomainResponse> executeWithHttpInfo() throws ApiException {
            return deleteWithHttpInfo(domainId);
        }

        /**
         * Execute delete request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the deleted link object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DomainResponse> _callback) throws ApiException {
            return deleteAsync(domainId, _callback);
        }
    }

    /**
     * Delete a Domain
     * Delete a registered domain. This operation can only be performed if all associated links with the domain are deleted.
     * @param domainId Unique identifier for a domain. (required)
     * @return DeleteRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the deleted link object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public DeleteRequestBuilder delete(String domainId) throws IllegalArgumentException {
        if (domainId == null) throw new IllegalArgumentException("\"domainId\" is required but got null");
            

        return new DeleteRequestBuilder(domainId);
    }
    private okhttp3.Call deleteAllLinksForDomainCall(String domainId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/domains/{domain_id}/links"
            .replace("{" + "domain_id" + "}", localVarApiClient.escapeString(domainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAllLinksForDomainValidateBeforeCall(String domainId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling deleteAllLinksForDomain(Async)");
        }

        return deleteAllLinksForDomainCall(domainId, _callback);

    }


    private ApiResponse<DomainsResponse> deleteAllLinksForDomainWithHttpInfo(String domainId) throws ApiException {
        okhttp3.Call localVarCall = deleteAllLinksForDomainValidateBeforeCall(domainId, null);
        Type localVarReturnType = new TypeToken<DomainsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteAllLinksForDomainAsync(String domainId, final ApiCallback<DomainsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAllLinksForDomainValidateBeforeCall(domainId, _callback);
        Type localVarReturnType = new TypeToken<DomainsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteAllLinksForDomainRequestBuilder {
        private final String domainId;

        private DeleteAllLinksForDomainRequestBuilder(String domainId) {
            this.domainId = domainId;
        }

        /**
         * Build call for deleteAllLinksForDomain
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the deleted objects. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteAllLinksForDomainCall(domainId, _callback);
        }


        /**
         * Execute deleteAllLinksForDomain request
         * @return DomainsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the deleted objects. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public DomainsResponse execute() throws ApiException {
            ApiResponse<DomainsResponse> localVarResp = deleteAllLinksForDomainWithHttpInfo(domainId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteAllLinksForDomain request with HTTP info returned
         * @return ApiResponse&lt;DomainsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the deleted objects. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DomainsResponse> executeWithHttpInfo() throws ApiException {
            return deleteAllLinksForDomainWithHttpInfo(domainId);
        }

        /**
         * Execute deleteAllLinksForDomain request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the deleted objects. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DomainsResponse> _callback) throws ApiException {
            return deleteAllLinksForDomainAsync(domainId, _callback);
        }
    }

    /**
     * Delete all links for a domain
     * Delete all associated links for a domain
     * @param domainId Unique identifier for a domain. (required)
     * @return DeleteAllLinksForDomainRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the deleted objects. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public DeleteAllLinksForDomainRequestBuilder deleteAllLinksForDomain(String domainId) throws IllegalArgumentException {
        if (domainId == null) throw new IllegalArgumentException("\"domainId\" is required but got null");
            

        return new DeleteAllLinksForDomainRequestBuilder(domainId);
    }
    private okhttp3.Call delete_0Call(String linkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/links/{link_id}"
            .replace("{" + "link_id" + "}", localVarApiClient.escapeString(linkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call delete_0ValidateBeforeCall(String linkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'linkId' is set
        if (linkId == null) {
            throw new ApiException("Missing the required parameter 'linkId' when calling delete_0(Async)");
        }

        return delete_0Call(linkId, _callback);

    }


    private ApiResponse<LinkResponse> delete_0WithHttpInfo(String linkId) throws ApiException {
        okhttp3.Call localVarCall = delete_0ValidateBeforeCall(linkId, null);
        Type localVarReturnType = new TypeToken<LinkResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call delete_0Async(String linkId, final ApiCallback<LinkResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = delete_0ValidateBeforeCall(linkId, _callback);
        Type localVarReturnType = new TypeToken<LinkResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class Delete0RequestBuilder {
        private final String linkId;

        private Delete0RequestBuilder(String linkId) {
            this.linkId = linkId;
        }

        /**
         * Build call for delete_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the deleted short link object </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return delete_0Call(linkId, _callback);
        }


        /**
         * Execute delete_0 request
         * @return LinkResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the deleted short link object </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public LinkResponse execute() throws ApiException {
            ApiResponse<LinkResponse> localVarResp = delete_0WithHttpInfo(linkId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute delete_0 request with HTTP info returned
         * @return ApiResponse&lt;LinkResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the deleted short link object </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LinkResponse> executeWithHttpInfo() throws ApiException {
            return delete_0WithHttpInfo(linkId);
        }

        /**
         * Execute delete_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the deleted short link object </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LinkResponse> _callback) throws ApiException {
            return delete_0Async(linkId, _callback);
        }
    }

    /**
     * Delete Link
     * Delete the shortened link.
     * @param linkId Unique identifier for a link. (required)
     * @return Delete0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the deleted short link object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Delete0RequestBuilder delete_0(String linkId) throws IllegalArgumentException {
        if (linkId == null) throw new IllegalArgumentException("\"linkId\" is required but got null");
            

        return new Delete0RequestBuilder(linkId);
    }
    private okhttp3.Call getCall(String domainId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/domains/{domain_id}"
            .replace("{" + "domain_id" + "}", localVarApiClient.escapeString(domainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getValidateBeforeCall(String domainId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling get(Async)");
        }

        return getCall(domainId, _callback);

    }


    private ApiResponse<DomainResponse> getWithHttpInfo(String domainId) throws ApiException {
        okhttp3.Call localVarCall = getValidateBeforeCall(domainId, null);
        Type localVarReturnType = new TypeToken<DomainResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAsync(String domainId, final ApiCallback<DomainResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getValidateBeforeCall(domainId, _callback);
        Type localVarReturnType = new TypeToken<DomainResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRequestBuilder {
        private final String domainId;

        private GetRequestBuilder(String domainId) {
            this.domainId = domainId;
        }

        /**
         * Build call for get
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns domain related details. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCall(domainId, _callback);
        }


        /**
         * Execute get request
         * @return DomainResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns domain related details. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public DomainResponse execute() throws ApiException {
            ApiResponse<DomainResponse> localVarResp = getWithHttpInfo(domainId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute get request with HTTP info returned
         * @return ApiResponse&lt;DomainResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns domain related details. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DomainResponse> executeWithHttpInfo() throws ApiException {
            return getWithHttpInfo(domainId);
        }

        /**
         * Execute get request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns domain related details. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DomainResponse> _callback) throws ApiException {
            return getAsync(domainId, _callback);
        }
    }

    /**
     * Retrieve a domain
     * Retrieve details for a single domain.
     * @param domainId Unique identifier for a domain. (required)
     * @return GetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns domain related details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public GetRequestBuilder get(String domainId) throws IllegalArgumentException {
        if (domainId == null) throw new IllegalArgumentException("\"domainId\" is required but got null");
            

        return new GetRequestBuilder(domainId);
    }
    private okhttp3.Call get_0Call(String linkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/links/{link_id}"
            .replace("{" + "link_id" + "}", localVarApiClient.escapeString(linkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call get_0ValidateBeforeCall(String linkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'linkId' is set
        if (linkId == null) {
            throw new ApiException("Missing the required parameter 'linkId' when calling get_0(Async)");
        }

        return get_0Call(linkId, _callback);

    }


    private ApiResponse<LinkResponse> get_0WithHttpInfo(String linkId) throws ApiException {
        okhttp3.Call localVarCall = get_0ValidateBeforeCall(linkId, null);
        Type localVarReturnType = new TypeToken<LinkResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call get_0Async(String linkId, final ApiCallback<LinkResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = get_0ValidateBeforeCall(linkId, _callback);
        Type localVarReturnType = new TypeToken<LinkResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class Get0RequestBuilder {
        private final String linkId;

        private Get0RequestBuilder(String linkId) {
            this.linkId = linkId;
        }

        /**
         * Build call for get_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a single link. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return get_0Call(linkId, _callback);
        }


        /**
         * Execute get_0 request
         * @return LinkResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a single link. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public LinkResponse execute() throws ApiException {
            ApiResponse<LinkResponse> localVarResp = get_0WithHttpInfo(linkId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute get_0 request with HTTP info returned
         * @return ApiResponse&lt;LinkResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a single link. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LinkResponse> executeWithHttpInfo() throws ApiException {
            return get_0WithHttpInfo(linkId);
        }

        /**
         * Execute get_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a single link. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LinkResponse> _callback) throws ApiException {
            return get_0Async(linkId, _callback);
        }
    }

    /**
     * Retrieve a link
     * Retrievs a single shortened link.
     * @param linkId Unique identifier for a link. (required)
     * @return Get0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single link. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Get0RequestBuilder get_0(String linkId) throws IllegalArgumentException {
        if (linkId == null) throw new IllegalArgumentException("\"linkId\" is required but got null");
            

        return new Get0RequestBuilder(linkId);
    }
    private okhttp3.Call listCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/domains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listCall(_callback);

    }


    private ApiResponse<DomainsResponse> listWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<DomainsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(final ApiCallback<DomainsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<DomainsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {

        private ListRequestBuilder() {
        }

        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of all domains. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(_callback);
        }


        /**
         * Execute list request
         * @return DomainsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of all domains. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public DomainsResponse execute() throws ApiException {
            ApiResponse<DomainsResponse> localVarResp = listWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;DomainsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of all domains. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DomainsResponse> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo();
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of all domains. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DomainsResponse> _callback) throws ApiException {
            return listAsync(_callback);
        }
    }

    /**
     * List all domains
     * Retrieve a list of all created domains.
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of all domains. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list() throws IllegalArgumentException {
        return new ListRequestBuilder();
    }
    private okhttp3.Call list_0Call(Integer limit, Integer offset, List<String> include, Map<String, String> dateCreated, Map<String, String> metadata, String campaignId, Boolean clicked, String billingGroupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/links";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        if (dateCreated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_created", dateCreated));
        }

        if (metadata != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metadata", metadata));
        }

        if (campaignId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("campaign_id", campaignId));
        }

        if (clicked != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clicked", clicked));
        }

        if (billingGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("billing_group_id", billingGroupId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call list_0ValidateBeforeCall(Integer limit, Integer offset, List<String> include, Map<String, String> dateCreated, Map<String, String> metadata, String campaignId, Boolean clicked, String billingGroupId, final ApiCallback _callback) throws ApiException {
        return list_0Call(limit, offset, include, dateCreated, metadata, campaignId, clicked, billingGroupId, _callback);

    }


    private ApiResponse<LinksResponse> list_0WithHttpInfo(Integer limit, Integer offset, List<String> include, Map<String, String> dateCreated, Map<String, String> metadata, String campaignId, Boolean clicked, String billingGroupId) throws ApiException {
        okhttp3.Call localVarCall = list_0ValidateBeforeCall(limit, offset, include, dateCreated, metadata, campaignId, clicked, billingGroupId, null);
        Type localVarReturnType = new TypeToken<LinksResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call list_0Async(Integer limit, Integer offset, List<String> include, Map<String, String> dateCreated, Map<String, String> metadata, String campaignId, Boolean clicked, String billingGroupId, final ApiCallback<LinksResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = list_0ValidateBeforeCall(limit, offset, include, dateCreated, metadata, campaignId, clicked, billingGroupId, _callback);
        Type localVarReturnType = new TypeToken<LinksResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class List0RequestBuilder {
        private Integer limit;
        private Integer offset;
        private List<String> include;
        private Map<String, String> dateCreated;
        private Map<String, String> metadata;
        private String campaignId;
        private Boolean clicked;
        private String billingGroupId;

        private List0RequestBuilder() {
        }

        /**
         * Set limit
         * @param limit How many results to return. (optional, default to 10)
         * @return List0RequestBuilder
         */
        public List0RequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset An integer that designates the offset at which to begin returning results. Defaults to 0. (optional, default to 0)
         * @return List0RequestBuilder
         */
        public List0RequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set include
         * @param include Request that the response include the total count by specifying &#x60;include&#x3D;[\&quot;total_count\&quot;]&#x60;.  (optional)
         * @return List0RequestBuilder
         */
        public List0RequestBuilder include(List<String> include) {
            this.include = include;
            return this;
        }
        
        /**
         * Set dateCreated
         * @param dateCreated Filter by date created. Accepted formats are ISO-8601 date or datetime, e.g. &#x60;{ \&quot;gt\&quot;: \&quot;2012-01-01\&quot;, \&quot;lt\&quot;: \&quot;2012-01-31T12:34:56Z\&quot; }&#x60; where &#x60;gt&#x60; is &gt;, &#x60;lt&#x60; is &lt;, &#x60;gte&#x60; is ≥, and &#x60;lte&#x60; is ≤. (optional)
         * @return List0RequestBuilder
         */
        public List0RequestBuilder dateCreated(Map<String, String> dateCreated) {
            this.dateCreated = dateCreated;
            return this;
        }
        
        /**
         * Set metadata
         * @param metadata Filter by metadata key-value pair&#x60;. (optional)
         * @return List0RequestBuilder
         */
        public List0RequestBuilder metadata(Map<String, String> metadata) {
            this.metadata = metadata;
            return this;
        }
        
        /**
         * Set campaignId
         * @param campaignId Filter the links generated for a particular campaign using its campaign id. (optional)
         * @return List0RequestBuilder
         */
        public List0RequestBuilder campaignId(String campaignId) {
            this.campaignId = campaignId;
            return this;
        }
        
        /**
         * Set clicked
         * @param clicked Retrieve the list of links that have been opened. (optional)
         * @return List0RequestBuilder
         */
        public List0RequestBuilder clicked(Boolean clicked) {
            this.clicked = clicked;
            return this;
        }
        
        /**
         * Set billingGroupId
         * @param billingGroupId Filter the links generated for a particular billing group id. (optional)
         * @return List0RequestBuilder
         */
        public List0RequestBuilder billingGroupId(String billingGroupId) {
            this.billingGroupId = billingGroupId;
            return this;
        }
        
        /**
         * Build call for list_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the deleted link object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return list_0Call(limit, offset, include, dateCreated, metadata, campaignId, clicked, billingGroupId, _callback);
        }


        /**
         * Execute list_0 request
         * @return LinksResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the deleted link object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public LinksResponse execute() throws ApiException {
            ApiResponse<LinksResponse> localVarResp = list_0WithHttpInfo(limit, offset, include, dateCreated, metadata, campaignId, clicked, billingGroupId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list_0 request with HTTP info returned
         * @return ApiResponse&lt;LinksResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the deleted link object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LinksResponse> executeWithHttpInfo() throws ApiException {
            return list_0WithHttpInfo(limit, offset, include, dateCreated, metadata, campaignId, clicked, billingGroupId);
        }

        /**
         * Execute list_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the deleted link object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LinksResponse> _callback) throws ApiException {
            return list_0Async(limit, offset, include, dateCreated, metadata, campaignId, clicked, billingGroupId, _callback);
        }
    }

    /**
     * Retrieve all shortened links
     * Retrieves a list of shortened links. The list is sorted by  creation date, with the most recently created appearing first.
     * @return List0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the deleted link object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List0RequestBuilder list_0() throws IllegalArgumentException {
        return new List0RequestBuilder();
    }
    private okhttp3.Call updateCall(String linkId, LinkSingle linkSingle, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = linkSingle;

        // create path and map variables
        String localVarPath = "/links/{link_id}"
            .replace("{" + "link_id" + "}", localVarApiClient.escapeString(linkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateValidateBeforeCall(String linkId, LinkSingle linkSingle, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'linkId' is set
        if (linkId == null) {
            throw new ApiException("Missing the required parameter 'linkId' when calling update(Async)");
        }

        // verify the required parameter 'linkSingle' is set
        if (linkSingle == null) {
            throw new ApiException("Missing the required parameter 'linkSingle' when calling update(Async)");
        }

        return updateCall(linkId, linkSingle, _callback);

    }


    private ApiResponse<LinkResponse> updateWithHttpInfo(String linkId, LinkSingle linkSingle) throws ApiException {
        okhttp3.Call localVarCall = updateValidateBeforeCall(linkId, linkSingle, null);
        Type localVarReturnType = new TypeToken<LinkResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateAsync(String linkId, LinkSingle linkSingle, final ApiCallback<LinkResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateValidateBeforeCall(linkId, linkSingle, _callback);
        Type localVarReturnType = new TypeToken<LinkResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateRequestBuilder {
        private final String redirectLink;
        private final String linkId;
        private String domain;
        private String slug;
        private Map<String, String> metadataTag;
        private String billingGroupId;

        private UpdateRequestBuilder(String redirectLink, String linkId) {
            this.redirectLink = redirectLink;
            this.linkId = linkId;
        }

        /**
         * Set domain
         * @param domain The registered domain to be used for the short URL. (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder domain(String domain) {
            this.domain = domain;
            return this;
        }
        
        /**
         * Set slug
         * @param slug The unique path for the shortened URL, if empty a unique path will be used. (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder slug(String slug) {
            this.slug = slug;
            return this;
        }
        
        /**
         * Set metadataTag
         * @param metadataTag Use metadata to store custom information for tagging and labeling back to your internal systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must be at most 500 characters. Neither can contain the characters &#x60;\\\&quot;&#x60; and &#x60;\\\\&#x60;. i.e. &#39;{\\\&quot;customer_id\\\&quot; : \\\&quot;NEWYORK2015\\\&quot;}&#39; Nested objects are not supported.  See [Metadata](#section/Metadata) for more information. (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder metadataTag(Map<String, String> metadataTag) {
            this.metadataTag = metadataTag;
            return this;
        }
        
        /**
         * Set billingGroupId
         * @param billingGroupId An optional string with the billing group ID to tag your usage with. Is used for billing purposes. Requires special activation to use. See &lt;a href&#x3D;\\\&quot;#tag/Billing-Groups\\\&quot;&gt;Billing Group API&lt;/a&gt; for more information. (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder billingGroupId(String billingGroupId) {
            this.billingGroupId = billingGroupId;
            return this;
        }
        
        /**
         * Build call for update
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated link. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LinkSingle linkSingle = buildBodyParams();
            return updateCall(linkId, linkSingle, _callback);
        }

        private LinkSingle buildBodyParams() {
            LinkSingle linkSingle = new LinkSingle();
            linkSingle.redirectLink(this.redirectLink);
            linkSingle.domain(this.domain);
            linkSingle.slug(this.slug);
            linkSingle.metadataTag(this.metadataTag);
            linkSingle.billingGroupId(this.billingGroupId);
            return linkSingle;
        }

        /**
         * Execute update request
         * @return LinkResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated link. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public LinkResponse execute() throws ApiException {
            LinkSingle linkSingle = buildBodyParams();
            ApiResponse<LinkResponse> localVarResp = updateWithHttpInfo(linkId, linkSingle);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute update request with HTTP info returned
         * @return ApiResponse&lt;LinkResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated link. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LinkResponse> executeWithHttpInfo() throws ApiException {
            LinkSingle linkSingle = buildBodyParams();
            return updateWithHttpInfo(linkId, linkSingle);
        }

        /**
         * Execute update request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated link. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LinkResponse> _callback) throws ApiException {
            LinkSingle linkSingle = buildBodyParams();
            return updateAsync(linkId, linkSingle, _callback);
        }
    }

    /**
     * Update a Link
     * Update any of the properties of a shortened link.
     * @param linkId Unique identifier for a link. (required)
     * @param linkSingle  (required)
     * @return UpdateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated link. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRequestBuilder update(String redirectLink, String linkId) throws IllegalArgumentException {
        if (redirectLink == null) throw new IllegalArgumentException("\"redirectLink\" is required but got null");
            

        if (linkId == null) throw new IllegalArgumentException("\"linkId\" is required but got null");
            

        return new UpdateRequestBuilder(redirectLink, linkId);
    }
}

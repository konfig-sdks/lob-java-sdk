/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 
 *
 * The version of the OpenAPI document: 1.19.28
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddressesListBeforeAfterParameterAllOf;
import com.konfigthis.client.model.Campaign;
import com.konfigthis.client.model.CampaignDeleteResponse;
import com.konfigthis.client.model.CampaignUpdatable;
import com.konfigthis.client.model.CampaignWritable;
import com.konfigthis.client.model.CampaignsListResponse;
import com.konfigthis.client.model.CmpScheduleType;
import com.konfigthis.client.model.CmpUseType;
import com.konfigthis.client.model.Error;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CampaignsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CampaignsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CampaignsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createCall(CampaignWritable campaignWritable, String xLangOutput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = campaignWritable;

        // create path and map variables
        String localVarPath = "/campaigns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xLangOutput != null) {
            localVarHeaderParams.put("x-lang-output", localVarApiClient.parameterToString(xLangOutput));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createValidateBeforeCall(CampaignWritable campaignWritable, String xLangOutput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignWritable' is set
        if (campaignWritable == null) {
            throw new ApiException("Missing the required parameter 'campaignWritable' when calling create(Async)");
        }

        return createCall(campaignWritable, xLangOutput, _callback);

    }


    private ApiResponse<Campaign> createWithHttpInfo(CampaignWritable campaignWritable, String xLangOutput) throws ApiException {
        okhttp3.Call localVarCall = createValidateBeforeCall(campaignWritable, xLangOutput, null);
        Type localVarReturnType = new TypeToken<Campaign>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createAsync(CampaignWritable campaignWritable, String xLangOutput, final ApiCallback<Campaign> _callback) throws ApiException {

        okhttp3.Call localVarCall = createValidateBeforeCall(campaignWritable, xLangOutput, _callback);
        Type localVarReturnType = new TypeToken<Campaign>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateRequestBuilder {
        private final String name;
        private final CmpScheduleType scheduleType;
        private final CmpUseType useType;
        private String description;
        private String billingGroupId;
        private OffsetDateTime targetDeliveryDate;
        private OffsetDateTime sendDate;
        private Integer cancelWindowCampaignMinutes;
        private Map<String, String> metadata;
        private Boolean autoCancelIfNcoa;
        private String xLangOutput;

        private CreateRequestBuilder(String name, CmpScheduleType scheduleType, CmpUseType useType) {
            this.name = name;
            this.scheduleType = scheduleType;
            this.useType = useType;
        }

        /**
         * Set description
         * @param description An internal description that identifies this resource. Must be no longer than 255 characters.  (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set billingGroupId
         * @param billingGroupId Unique identifier prefixed with &#x60;bg_&#x60;. (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder billingGroupId(String billingGroupId) {
            this.billingGroupId = billingGroupId;
            return this;
        }
        
        /**
         * Set targetDeliveryDate
         * @param targetDeliveryDate If &#x60;schedule_type&#x60; is &#x60;target_delivery_date&#x60;, provide a targeted delivery date for mail pieces in this campaign. (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder targetDeliveryDate(OffsetDateTime targetDeliveryDate) {
            this.targetDeliveryDate = targetDeliveryDate;
            return this;
        }
        
        /**
         * Set sendDate
         * @param sendDate If &#x60;schedule_type&#x60; is &#x60;scheduled_send_date&#x60;, provide a date to send this campaign. (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder sendDate(OffsetDateTime sendDate) {
            this.sendDate = sendDate;
            return this;
        }
        
        /**
         * Set cancelWindowCampaignMinutes
         * @param cancelWindowCampaignMinutes A window, in minutes, within which the campaign can be canceled. (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder cancelWindowCampaignMinutes(Integer cancelWindowCampaignMinutes) {
            this.cancelWindowCampaignMinutes = cancelWindowCampaignMinutes;
            return this;
        }
        
        /**
         * Set metadata
         * @param metadata Use metadata to store custom information for tagging and labeling back to your internal systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must be at most 500 characters. Neither can contain the characters &#x60;\\\&quot;&#x60; and &#x60;\\\\&#x60;. i.e. &#39;{\\\&quot;customer_id\\\&quot; : \\\&quot;NEWYORK2015\\\&quot;}&#39; Nested objects are not supported.  See [Metadata](#section/Metadata) for more information. (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder metadata(Map<String, String> metadata) {
            this.metadata = metadata;
            return this;
        }
        
        /**
         * Set autoCancelIfNcoa
         * @param autoCancelIfNcoa Whether or not a mail piece should be automatically canceled and not sent if the address is updated via NCOA. (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder autoCancelIfNcoa(Boolean autoCancelIfNcoa) {
            this.autoCancelIfNcoa = autoCancelIfNcoa;
            return this;
        }
        
        /**
         * Set xLangOutput
         * @param xLangOutput * &#x60;native&#x60; - Translate response to the native language of the country in the request * &#x60;match&#x60; - match the response to the language in the request  Default response is in English.  (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder xLangOutput(String xLangOutput) {
            this.xLangOutput = xLangOutput;
            return this;
        }
        
        /**
         * Build call for create
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Campaign created successfully </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CampaignWritable campaignWritable = buildBodyParams();
            return createCall(campaignWritable, xLangOutput, _callback);
        }

        private CampaignWritable buildBodyParams() {
            CampaignWritable campaignWritable = new CampaignWritable();
            campaignWritable.description(this.description);
            campaignWritable.billingGroupId(this.billingGroupId);
            campaignWritable.name(this.name);
            campaignWritable.scheduleType(this.scheduleType);
            campaignWritable.targetDeliveryDate(this.targetDeliveryDate);
            campaignWritable.sendDate(this.sendDate);
            campaignWritable.cancelWindowCampaignMinutes(this.cancelWindowCampaignMinutes);
            campaignWritable.metadata(this.metadata);
            campaignWritable.useType(this.useType);
            campaignWritable.autoCancelIfNcoa(this.autoCancelIfNcoa);
            return campaignWritable;
        }

        /**
         * Execute create request
         * @return Campaign
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Campaign created successfully </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public Campaign execute() throws ApiException {
            CampaignWritable campaignWritable = buildBodyParams();
            ApiResponse<Campaign> localVarResp = createWithHttpInfo(campaignWritable, xLangOutput);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute create request with HTTP info returned
         * @return ApiResponse&lt;Campaign&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Campaign created successfully </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Campaign> executeWithHttpInfo() throws ApiException {
            CampaignWritable campaignWritable = buildBodyParams();
            return createWithHttpInfo(campaignWritable, xLangOutput);
        }

        /**
         * Execute create request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Campaign created successfully </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Campaign> _callback) throws ApiException {
            CampaignWritable campaignWritable = buildBodyParams();
            return createAsync(campaignWritable, xLangOutput, _callback);
        }
    }

    /**
     * Create
     * Creates a new campaign with the provided properties. See how to launch your first campaign [here](https://help.lob.com/print-and-mail/building-a-mail-strategy/campaign-or-triggered-sends/launch-your-first-campaign).
     * @param campaignWritable  (required)
     * @return CreateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Campaign created successfully </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public CreateRequestBuilder create(String name, CmpScheduleType scheduleType, CmpUseType useType) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (scheduleType == null) throw new IllegalArgumentException("\"scheduleType\" is required but got null");
        
        return new CreateRequestBuilder(name, scheduleType, useType);
    }
    private okhttp3.Call deleteCall(String cmpId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/campaigns/{cmp_id}"
            .replace("{" + "cmp_id" + "}", localVarApiClient.escapeString(cmpId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteValidateBeforeCall(String cmpId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cmpId' is set
        if (cmpId == null) {
            throw new ApiException("Missing the required parameter 'cmpId' when calling delete(Async)");
        }

        return deleteCall(cmpId, _callback);

    }


    private ApiResponse<CampaignDeleteResponse> deleteWithHttpInfo(String cmpId) throws ApiException {
        okhttp3.Call localVarCall = deleteValidateBeforeCall(cmpId, null);
        Type localVarReturnType = new TypeToken<CampaignDeleteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteAsync(String cmpId, final ApiCallback<CampaignDeleteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteValidateBeforeCall(cmpId, _callback);
        Type localVarReturnType = new TypeToken<CampaignDeleteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteRequestBuilder {
        private final String cmpId;

        private DeleteRequestBuilder(String cmpId) {
            this.cmpId = cmpId;
        }

        /**
         * Build call for delete
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Deleted the campaign. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCall(cmpId, _callback);
        }


        /**
         * Execute delete request
         * @return CampaignDeleteResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Deleted the campaign. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public CampaignDeleteResponse execute() throws ApiException {
            ApiResponse<CampaignDeleteResponse> localVarResp = deleteWithHttpInfo(cmpId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute delete request with HTTP info returned
         * @return ApiResponse&lt;CampaignDeleteResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Deleted the campaign. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CampaignDeleteResponse> executeWithHttpInfo() throws ApiException {
            return deleteWithHttpInfo(cmpId);
        }

        /**
         * Execute delete request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Deleted the campaign. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CampaignDeleteResponse> _callback) throws ApiException {
            return deleteAsync(cmpId, _callback);
        }
    }

    /**
     * Delete
     * Delete an existing campaign. You need only supply the unique identifier that was returned upon campaign creation. Deleting a campaign also deletes any associated mail pieces that have been created but not sent. A campaign&#39;s &#x60;send_date&#x60; matches its associated mail pieces&#39; &#x60;send_date&#x60;s.
     * @param cmpId id of the campaign (required)
     * @return DeleteRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted the campaign. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public DeleteRequestBuilder delete(String cmpId) throws IllegalArgumentException {
        if (cmpId == null) throw new IllegalArgumentException("\"cmpId\" is required but got null");
            

        return new DeleteRequestBuilder(cmpId);
    }
    private okhttp3.Call listCall(Integer limit, List<String> include, AddressesListBeforeAfterParameter beforeAfter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/campaigns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        if (beforeAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before/after", beforeAfter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(Integer limit, List<String> include, AddressesListBeforeAfterParameter beforeAfter, final ApiCallback _callback) throws ApiException {
        return listCall(limit, include, beforeAfter, _callback);

    }


    private ApiResponse<CampaignsListResponse> listWithHttpInfo(Integer limit, List<String> include, AddressesListBeforeAfterParameter beforeAfter) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(limit, include, beforeAfter, null);
        Type localVarReturnType = new TypeToken<CampaignsListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(Integer limit, List<String> include, AddressesListBeforeAfterParameter beforeAfter, final ApiCallback<CampaignsListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(limit, include, beforeAfter, _callback);
        Type localVarReturnType = new TypeToken<CampaignsListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private Integer limit;
        private List<String> include;
        private AddressesListBeforeAfterParameter beforeAfter;

        private ListRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit How many results to return. (optional, default to 10)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set include
         * @param include Request that the response include the total count by specifying &#x60;include&#x3D;[\&quot;total_count\&quot;]&#x60;.  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder include(List<String> include) {
            this.include = include;
            return this;
        }
        
        /**
         * Set beforeAfter
         * @param beforeAfter &#x60;before&#x60; and &#x60;after&#x60; are both optional but only one of them can be in the query at a time.  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder beforeAfter(AddressesListBeforeAfterParameter beforeAfter) {
            this.beforeAfter = beforeAfter;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A dictionary with a data property that contains an array of up to &#x60;limit&#x60; campaigns. Each entry in the array is a separate campaign. The previous and next page of campaigns can be retrieved by calling the endpoint contained in the &#x60;previous_url&#x60; and &#x60;next_url&#x60; fields in the API response respectively.&lt;br&gt;If no more campaigns are available beyond the current set of returned results, the &#x60;next_url&#x60; field will be empty. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(limit, include, beforeAfter, _callback);
        }


        /**
         * Execute list request
         * @return CampaignsListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A dictionary with a data property that contains an array of up to &#x60;limit&#x60; campaigns. Each entry in the array is a separate campaign. The previous and next page of campaigns can be retrieved by calling the endpoint contained in the &#x60;previous_url&#x60; and &#x60;next_url&#x60; fields in the API response respectively.&lt;br&gt;If no more campaigns are available beyond the current set of returned results, the &#x60;next_url&#x60; field will be empty. </td><td>  -  </td></tr>
         </table>
         */
        public CampaignsListResponse execute() throws ApiException {
            ApiResponse<CampaignsListResponse> localVarResp = listWithHttpInfo(limit, include, beforeAfter);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;CampaignsListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A dictionary with a data property that contains an array of up to &#x60;limit&#x60; campaigns. Each entry in the array is a separate campaign. The previous and next page of campaigns can be retrieved by calling the endpoint contained in the &#x60;previous_url&#x60; and &#x60;next_url&#x60; fields in the API response respectively.&lt;br&gt;If no more campaigns are available beyond the current set of returned results, the &#x60;next_url&#x60; field will be empty. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CampaignsListResponse> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(limit, include, beforeAfter);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A dictionary with a data property that contains an array of up to &#x60;limit&#x60; campaigns. Each entry in the array is a separate campaign. The previous and next page of campaigns can be retrieved by calling the endpoint contained in the &#x60;previous_url&#x60; and &#x60;next_url&#x60; fields in the API response respectively.&lt;br&gt;If no more campaigns are available beyond the current set of returned results, the &#x60;next_url&#x60; field will be empty. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CampaignsListResponse> _callback) throws ApiException {
            return listAsync(limit, include, beforeAfter, _callback);
        }
    }

    /**
     * List
     * Returns a list of your campaigns. The campaigns are returned sorted by creation date, with the most recently created campaigns appearing first.
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A dictionary with a data property that contains an array of up to &#x60;limit&#x60; campaigns. Each entry in the array is a separate campaign. The previous and next page of campaigns can be retrieved by calling the endpoint contained in the &#x60;previous_url&#x60; and &#x60;next_url&#x60; fields in the API response respectively.&lt;br&gt;If no more campaigns are available beyond the current set of returned results, the &#x60;next_url&#x60; field will be empty. </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list() throws IllegalArgumentException {
        return new ListRequestBuilder();
    }
    private okhttp3.Call retrieveCall(String cmpId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/campaigns/{cmp_id}"
            .replace("{" + "cmp_id" + "}", localVarApiClient.escapeString(cmpId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveValidateBeforeCall(String cmpId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cmpId' is set
        if (cmpId == null) {
            throw new ApiException("Missing the required parameter 'cmpId' when calling retrieve(Async)");
        }

        return retrieveCall(cmpId, _callback);

    }


    private ApiResponse<Campaign> retrieveWithHttpInfo(String cmpId) throws ApiException {
        okhttp3.Call localVarCall = retrieveValidateBeforeCall(cmpId, null);
        Type localVarReturnType = new TypeToken<Campaign>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call retrieveAsync(String cmpId, final ApiCallback<Campaign> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveValidateBeforeCall(cmpId, _callback);
        Type localVarReturnType = new TypeToken<Campaign>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RetrieveRequestBuilder {
        private final String cmpId;

        private RetrieveRequestBuilder(String cmpId) {
            this.cmpId = cmpId;
        }

        /**
         * Build call for retrieve
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a campaign object </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return retrieveCall(cmpId, _callback);
        }


        /**
         * Execute retrieve request
         * @return Campaign
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a campaign object </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public Campaign execute() throws ApiException {
            ApiResponse<Campaign> localVarResp = retrieveWithHttpInfo(cmpId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute retrieve request with HTTP info returned
         * @return ApiResponse&lt;Campaign&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a campaign object </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Campaign> executeWithHttpInfo() throws ApiException {
            return retrieveWithHttpInfo(cmpId);
        }

        /**
         * Execute retrieve request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a campaign object </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Campaign> _callback) throws ApiException {
            return retrieveAsync(cmpId, _callback);
        }
    }

    /**
     * Retrieve
     * Retrieves the details of an existing campaign. You need only supply the unique campaign identifier that was returned upon campaign creation.
     * @param cmpId id of the campaign (required)
     * @return RetrieveRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a campaign object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveRequestBuilder retrieve(String cmpId) throws IllegalArgumentException {
        if (cmpId == null) throw new IllegalArgumentException("\"cmpId\" is required but got null");
            

        return new RetrieveRequestBuilder(cmpId);
    }
    private okhttp3.Call sendCall(String cmpId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/campaigns/{cmp_id}/send"
            .replace("{" + "cmp_id" + "}", localVarApiClient.escapeString(cmpId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendValidateBeforeCall(String cmpId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cmpId' is set
        if (cmpId == null) {
            throw new ApiException("Missing the required parameter 'cmpId' when calling send(Async)");
        }

        return sendCall(cmpId, _callback);

    }


    private ApiResponse<Campaign> sendWithHttpInfo(String cmpId) throws ApiException {
        okhttp3.Call localVarCall = sendValidateBeforeCall(cmpId, null);
        Type localVarReturnType = new TypeToken<Campaign>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call sendAsync(String cmpId, final ApiCallback<Campaign> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendValidateBeforeCall(cmpId, _callback);
        Type localVarReturnType = new TypeToken<Campaign>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SendRequestBuilder {
        private final String cmpId;

        private SendRequestBuilder(String cmpId) {
            this.cmpId = cmpId;
        }

        /**
         * Build call for send
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a campaign object </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return sendCall(cmpId, _callback);
        }


        /**
         * Execute send request
         * @return Campaign
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a campaign object </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public Campaign execute() throws ApiException {
            ApiResponse<Campaign> localVarResp = sendWithHttpInfo(cmpId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute send request with HTTP info returned
         * @return ApiResponse&lt;Campaign&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a campaign object </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Campaign> executeWithHttpInfo() throws ApiException {
            return sendWithHttpInfo(cmpId);
        }

        /**
         * Execute send request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a campaign object </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Campaign> _callback) throws ApiException {
            return sendAsync(cmpId, _callback);
        }
    }

    /**
     * Send Campaign
     * Sends a campaign. You need only supply the unique campaign identifier that was returned upon campaign creation.
     * @param cmpId id of the campaign (required)
     * @return SendRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a campaign object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public SendRequestBuilder send(String cmpId) throws IllegalArgumentException {
        if (cmpId == null) throw new IllegalArgumentException("\"cmpId\" is required but got null");
            

        return new SendRequestBuilder(cmpId);
    }
    private okhttp3.Call updateCall(String cmpId, CampaignUpdatable campaignUpdatable, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = campaignUpdatable;

        // create path and map variables
        String localVarPath = "/campaigns/{cmp_id}"
            .replace("{" + "cmp_id" + "}", localVarApiClient.escapeString(cmpId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateValidateBeforeCall(String cmpId, CampaignUpdatable campaignUpdatable, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cmpId' is set
        if (cmpId == null) {
            throw new ApiException("Missing the required parameter 'cmpId' when calling update(Async)");
        }

        // verify the required parameter 'campaignUpdatable' is set
        if (campaignUpdatable == null) {
            throw new ApiException("Missing the required parameter 'campaignUpdatable' when calling update(Async)");
        }

        return updateCall(cmpId, campaignUpdatable, _callback);

    }


    private ApiResponse<Campaign> updateWithHttpInfo(String cmpId, CampaignUpdatable campaignUpdatable) throws ApiException {
        okhttp3.Call localVarCall = updateValidateBeforeCall(cmpId, campaignUpdatable, null);
        Type localVarReturnType = new TypeToken<Campaign>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateAsync(String cmpId, CampaignUpdatable campaignUpdatable, final ApiCallback<Campaign> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateValidateBeforeCall(cmpId, campaignUpdatable, _callback);
        Type localVarReturnType = new TypeToken<Campaign>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateRequestBuilder {
        private final String cmpId;
        private String description;
        private String name;
        private CmpScheduleType scheduleType;
        private OffsetDateTime targetDeliveryDate;
        private OffsetDateTime sendDate;
        private Integer cancelWindowCampaignMinutes;
        private Map<String, String> metadata;
        private Boolean isDraft;
        private CmpUseType useType;
        private Boolean autoCancelIfNcoa;

        private UpdateRequestBuilder(String cmpId) {
            this.cmpId = cmpId;
        }

        /**
         * Set description
         * @param description An internal description that identifies this resource. Must be no longer than 255 characters.  (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set scheduleType
         * @param scheduleType  (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder scheduleType(CmpScheduleType scheduleType) {
            this.scheduleType = scheduleType;
            return this;
        }
        
        /**
         * Set targetDeliveryDate
         * @param targetDeliveryDate If &#x60;schedule_type&#x60; is &#x60;target_delivery_date&#x60;, provide a targeted delivery date for mail pieces in this campaign. (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder targetDeliveryDate(OffsetDateTime targetDeliveryDate) {
            this.targetDeliveryDate = targetDeliveryDate;
            return this;
        }
        
        /**
         * Set sendDate
         * @param sendDate If &#x60;schedule_type&#x60; is &#x60;scheduled_send_date&#x60;, provide a date to send this campaign. (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder sendDate(OffsetDateTime sendDate) {
            this.sendDate = sendDate;
            return this;
        }
        
        /**
         * Set cancelWindowCampaignMinutes
         * @param cancelWindowCampaignMinutes A window, in minutes, within which the campaign can be canceled. (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder cancelWindowCampaignMinutes(Integer cancelWindowCampaignMinutes) {
            this.cancelWindowCampaignMinutes = cancelWindowCampaignMinutes;
            return this;
        }
        
        /**
         * Set metadata
         * @param metadata Use metadata to store custom information for tagging and labeling back to your internal systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must be at most 500 characters. Neither can contain the characters &#x60;\\\&quot;&#x60; and &#x60;\\\\&#x60;. i.e. &#39;{\\\&quot;customer_id\\\&quot; : \\\&quot;NEWYORK2015\\\&quot;}&#39; Nested objects are not supported.  See [Metadata](#section/Metadata) for more information. (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder metadata(Map<String, String> metadata) {
            this.metadata = metadata;
            return this;
        }
        
        /**
         * Set isDraft
         * @param isDraft Whether or not the campaign is still a draft. Can either be excluded or &#x60;false&#x60;. (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder isDraft(Boolean isDraft) {
            this.isDraft = isDraft;
            return this;
        }
        
        /**
         * Set useType
         * @param useType  (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder useType(CmpUseType useType) {
            this.useType = useType;
            return this;
        }
        
        /**
         * Set autoCancelIfNcoa
         * @param autoCancelIfNcoa Whether or not a mail piece should be automatically canceled and not sent if the address is updated via NCOA. (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder autoCancelIfNcoa(Boolean autoCancelIfNcoa) {
            this.autoCancelIfNcoa = autoCancelIfNcoa;
            return this;
        }
        
        /**
         * Build call for update
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a campaign object </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CampaignUpdatable campaignUpdatable = buildBodyParams();
            return updateCall(cmpId, campaignUpdatable, _callback);
        }

        private CampaignUpdatable buildBodyParams() {
            CampaignUpdatable campaignUpdatable = new CampaignUpdatable();
            campaignUpdatable.description(this.description);
            campaignUpdatable.name(this.name);
            campaignUpdatable.scheduleType(this.scheduleType);
            campaignUpdatable.targetDeliveryDate(this.targetDeliveryDate);
            campaignUpdatable.sendDate(this.sendDate);
            campaignUpdatable.cancelWindowCampaignMinutes(this.cancelWindowCampaignMinutes);
            campaignUpdatable.metadata(this.metadata);
            campaignUpdatable.isDraft(this.isDraft);
            campaignUpdatable.useType(this.useType);
            campaignUpdatable.autoCancelIfNcoa(this.autoCancelIfNcoa);
            return campaignUpdatable;
        }

        /**
         * Execute update request
         * @return Campaign
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a campaign object </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public Campaign execute() throws ApiException {
            CampaignUpdatable campaignUpdatable = buildBodyParams();
            ApiResponse<Campaign> localVarResp = updateWithHttpInfo(cmpId, campaignUpdatable);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute update request with HTTP info returned
         * @return ApiResponse&lt;Campaign&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a campaign object </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Campaign> executeWithHttpInfo() throws ApiException {
            CampaignUpdatable campaignUpdatable = buildBodyParams();
            return updateWithHttpInfo(cmpId, campaignUpdatable);
        }

        /**
         * Execute update request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a campaign object </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Campaign> _callback) throws ApiException {
            CampaignUpdatable campaignUpdatable = buildBodyParams();
            return updateAsync(cmpId, campaignUpdatable, _callback);
        }
    }

    /**
     * Update
     * Update the details of an existing campaign. You need only supply the unique identifier that was returned upon campaign creation.
     * @param cmpId id of the campaign (required)
     * @param campaignUpdatable  (required)
     * @return UpdateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a campaign object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRequestBuilder update(String cmpId) throws IllegalArgumentException {
        if (cmpId == null) throw new IllegalArgumentException("\"cmpId\" is required but got null");
            

        return new UpdateRequestBuilder(cmpId);
    }
}

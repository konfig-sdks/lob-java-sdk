/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 
 *
 * The version of the OpenAPI document: 1.19.28
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Error;
import com.konfigthis.client.model.UsAutocompletions;
import com.konfigthis.client.model.UsAutocompletionsWritable;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UsAutocompletionsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsAutocompletionsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public UsAutocompletionsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getSuggestionsCall(UsAutocompletionsWritable usAutocompletionsWritable, String _case, Boolean validAddresses, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usAutocompletionsWritable;

        // create path and map variables
        String localVarPath = "/us_autocompletions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_case != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("case", _case));
        }

        if (validAddresses != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("valid_addresses", validAddresses));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSuggestionsValidateBeforeCall(UsAutocompletionsWritable usAutocompletionsWritable, String _case, Boolean validAddresses, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'usAutocompletionsWritable' is set
        if (usAutocompletionsWritable == null) {
            throw new ApiException("Missing the required parameter 'usAutocompletionsWritable' when calling getSuggestions(Async)");
        }

        return getSuggestionsCall(usAutocompletionsWritable, _case, validAddresses, _callback);

    }


    private ApiResponse<UsAutocompletions> getSuggestionsWithHttpInfo(UsAutocompletionsWritable usAutocompletionsWritable, String _case, Boolean validAddresses) throws ApiException {
        okhttp3.Call localVarCall = getSuggestionsValidateBeforeCall(usAutocompletionsWritable, _case, validAddresses, null);
        Type localVarReturnType = new TypeToken<UsAutocompletions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSuggestionsAsync(UsAutocompletionsWritable usAutocompletionsWritable, String _case, Boolean validAddresses, final ApiCallback<UsAutocompletions> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSuggestionsValidateBeforeCall(usAutocompletionsWritable, _case, validAddresses, _callback);
        Type localVarReturnType = new TypeToken<UsAutocompletions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSuggestionsRequestBuilder {
        private final String addressPrefix;
        private String city;
        private String state;
        private String zipCode;
        private Boolean geoIpSort;
        private String _case;
        private Boolean validAddresses;

        private GetSuggestionsRequestBuilder(String addressPrefix) {
            this.addressPrefix = addressPrefix;
        }

        /**
         * Set city
         * @param city An optional city input used to filter suggestions. Case insensitive and does not match partial abbreviations.  (optional)
         * @return GetSuggestionsRequestBuilder
         */
        public GetSuggestionsRequestBuilder city(String city) {
            this.city = city;
            return this;
        }
        
        /**
         * Set state
         * @param state An optional state input used to filter suggestions. Case insensitive and does not match partial abbreviations.  (optional)
         * @return GetSuggestionsRequestBuilder
         */
        public GetSuggestionsRequestBuilder state(String state) {
            this.state = state;
            return this;
        }
        
        /**
         * Set zipCode
         * @param zipCode An optional ZIP Code input used to filter suggestions. Matches partial entries.  (optional)
         * @return GetSuggestionsRequestBuilder
         */
        public GetSuggestionsRequestBuilder zipCode(String zipCode) {
            this.zipCode = zipCode;
            return this;
        }
        
        /**
         * Set geoIpSort
         * @param geoIpSort If &#x60;true&#x60;, sort suggestions by proximity to the IP set in the &#x60;X-Forwarded-For&#x60; header.  (optional)
         * @return GetSuggestionsRequestBuilder
         */
        public GetSuggestionsRequestBuilder geoIpSort(Boolean geoIpSort) {
            this.geoIpSort = geoIpSort;
            return this;
        }
        
        /**
         * Set _case
         * @param _case Casing of the verified address. Possible values are &#x60;upper&#x60; and &#x60;proper&#x60; for uppercased (e.g. \&quot;PO BOX\&quot;) and proper-cased (e.g. \&quot;PO Box\&quot;), respectively. Only affects &#x60;primary_line&#x60;, &#x60;city&#x60;, and &#x60;state&#x60;. Default casing is &#x60;upper&#x60;. (optional, default to upper)
         * @return GetSuggestionsRequestBuilder
         */
        public GetSuggestionsRequestBuilder _case(String _case) {
            this._case = _case;
            return this;
        }
        
        /**
         * Set validAddresses
         * @param validAddresses Possible values are &#x60;true&#x60; and &#x60;false&#x60;. If false, not all of the suggestions in the response will be valid addresses; they&#39;ll need to be verified in order to determine the deliverability. The valid_addresses flag will greatly reduce the number of keystrokes needed before reaching an intended address. (optional, default to false)
         * @return GetSuggestionsRequestBuilder
         */
        public GetSuggestionsRequestBuilder validAddresses(Boolean validAddresses) {
            this.validAddresses = validAddresses;
            return this;
        }
        
        /**
         * Build call for getSuggestions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a US autocompletion object. </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UsAutocompletionsWritable usAutocompletionsWritable = buildBodyParams();
            return getSuggestionsCall(usAutocompletionsWritable, _case, validAddresses, _callback);
        }

        private UsAutocompletionsWritable buildBodyParams() {
            UsAutocompletionsWritable usAutocompletionsWritable = new UsAutocompletionsWritable();
            usAutocompletionsWritable.addressPrefix(this.addressPrefix);
            usAutocompletionsWritable.city(this.city);
            usAutocompletionsWritable.state(this.state);
            usAutocompletionsWritable.zipCode(this.zipCode);
            usAutocompletionsWritable.geoIpSort(this.geoIpSort);
            return usAutocompletionsWritable;
        }

        /**
         * Execute getSuggestions request
         * @return UsAutocompletions
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a US autocompletion object. </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public UsAutocompletions execute() throws ApiException {
            UsAutocompletionsWritable usAutocompletionsWritable = buildBodyParams();
            ApiResponse<UsAutocompletions> localVarResp = getSuggestionsWithHttpInfo(usAutocompletionsWritable, _case, validAddresses);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSuggestions request with HTTP info returned
         * @return ApiResponse&lt;UsAutocompletions&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a US autocompletion object. </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsAutocompletions> executeWithHttpInfo() throws ApiException {
            UsAutocompletionsWritable usAutocompletionsWritable = buildBodyParams();
            return getSuggestionsWithHttpInfo(usAutocompletionsWritable, _case, validAddresses);
        }

        /**
         * Execute getSuggestions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a US autocompletion object. </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsAutocompletions> _callback) throws ApiException {
            UsAutocompletionsWritable usAutocompletionsWritable = buildBodyParams();
            return getSuggestionsAsync(usAutocompletionsWritable, _case, validAddresses, _callback);
        }
    }

    /**
     * Autocomplete
     * Given an address prefix consisting of a partial primary line, as well as optional input of city, state, and zip code, this functionality returns up to 10 full US address suggestions. Not all of them will turn out to be valid addresses; they&#39;ll need to be [verified](#operation/verification_us).
     * @param usAutocompletionsWritable  (required)
     * @return GetSuggestionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a US autocompletion object. </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public GetSuggestionsRequestBuilder getSuggestions(String addressPrefix) throws IllegalArgumentException {
        if (addressPrefix == null) throw new IllegalArgumentException("\"addressPrefix\" is required but got null");
            

        return new GetSuggestionsRequestBuilder(addressPrefix);
    }
}

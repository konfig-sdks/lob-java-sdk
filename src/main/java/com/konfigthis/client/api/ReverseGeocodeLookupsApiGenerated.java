/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 
 *
 * The version of the OpenAPI document: 1.19.28
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Error;
import com.konfigthis.client.model.Location;
import com.konfigthis.client.model.ReverseGeocode;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ReverseGeocodeLookupsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReverseGeocodeLookupsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ReverseGeocodeLookupsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call usLocationWithLiveApiKeyCall(Location location, Integer size, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = location;

        // create path and map variables
        String localVarPath = "/us_reverse_geocode_lookups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usLocationWithLiveApiKeyValidateBeforeCall(Location location, Integer size, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling usLocationWithLiveApiKey(Async)");
        }

        return usLocationWithLiveApiKeyCall(location, size, _callback);

    }


    private ApiResponse<ReverseGeocode> usLocationWithLiveApiKeyWithHttpInfo(Location location, Integer size) throws ApiException {
        okhttp3.Call localVarCall = usLocationWithLiveApiKeyValidateBeforeCall(location, size, null);
        Type localVarReturnType = new TypeToken<ReverseGeocode>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call usLocationWithLiveApiKeyAsync(Location location, Integer size, final ApiCallback<ReverseGeocode> _callback) throws ApiException {

        okhttp3.Call localVarCall = usLocationWithLiveApiKeyValidateBeforeCall(location, size, _callback);
        Type localVarReturnType = new TypeToken<ReverseGeocode>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UsLocationWithLiveApiKeyRequestBuilder {
        private final Float latitude;
        private final Float longitude;
        private Integer size;

        private UsLocationWithLiveApiKeyRequestBuilder(Float latitude, Float longitude) {
            this.latitude = latitude;
            this.longitude = longitude;
        }

        /**
         * Set size
         * @param size Determines the number of locations returned. Possible values are between 1 and 50 and any number higher will be rounded down to 50. Default size is a list of 5 reverse geocoded locations. (optional, default to 5)
         * @return UsLocationWithLiveApiKeyRequestBuilder
         */
        public UsLocationWithLiveApiKeyRequestBuilder size(Integer size) {
            this.size = size;
            return this;
        }
        
        /**
         * Build call for usLocationWithLiveApiKey
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a zip lookup object if a valid zip was provided. </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Location location = buildBodyParams();
            return usLocationWithLiveApiKeyCall(location, size, _callback);
        }

        private Location buildBodyParams() {
            Location location = new Location();
            location.latitude(this.latitude);
            location.longitude(this.longitude);
            return location;
        }

        /**
         * Execute usLocationWithLiveApiKey request
         * @return ReverseGeocode
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a zip lookup object if a valid zip was provided. </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ReverseGeocode execute() throws ApiException {
            Location location = buildBodyParams();
            ApiResponse<ReverseGeocode> localVarResp = usLocationWithLiveApiKeyWithHttpInfo(location, size);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute usLocationWithLiveApiKey request with HTTP info returned
         * @return ApiResponse&lt;ReverseGeocode&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a zip lookup object if a valid zip was provided. </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReverseGeocode> executeWithHttpInfo() throws ApiException {
            Location location = buildBodyParams();
            return usLocationWithLiveApiKeyWithHttpInfo(location, size);
        }

        /**
         * Execute usLocationWithLiveApiKey request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a zip lookup object if a valid zip was provided. </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReverseGeocode> _callback) throws ApiException {
            Location location = buildBodyParams();
            return usLocationWithLiveApiKeyAsync(location, size, _callback);
        }
    }

    /**
     * Reverse Geocode Lookup
     * Reverse geocode a valid US location with a live API key.
     * @param location  (required)
     * @return UsLocationWithLiveApiKeyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a zip lookup object if a valid zip was provided. </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public UsLocationWithLiveApiKeyRequestBuilder usLocationWithLiveApiKey(Float latitude, Float longitude) throws IllegalArgumentException {
        
        
        return new UsLocationWithLiveApiKeyRequestBuilder(latitude, longitude);
    }
}

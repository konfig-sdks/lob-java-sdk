/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 
 *
 * The version of the OpenAPI document: 1.19.28
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddressesListBeforeAfterParameterAllOf;
import com.konfigthis.client.model.BankAccount;
import com.konfigthis.client.model.BankAccountBase;
import com.konfigthis.client.model.BankAccountVerify;
import com.konfigthis.client.model.BankAccountsGetListResponse;
import com.konfigthis.client.model.BankDeletion;
import com.konfigthis.client.model.Error;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class BankAccountsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BankAccountsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public BankAccountsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewBankAccountCall(BankAccountBase bankAccountBase, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bankAccountBase;

        // create path and map variables
        String localVarPath = "/bank_accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewBankAccountValidateBeforeCall(BankAccountBase bankAccountBase, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bankAccountBase' is set
        if (bankAccountBase == null) {
            throw new ApiException("Missing the required parameter 'bankAccountBase' when calling createNewBankAccount(Async)");
        }

        return createNewBankAccountCall(bankAccountBase, _callback);

    }


    private ApiResponse<BankAccount> createNewBankAccountWithHttpInfo(BankAccountBase bankAccountBase) throws ApiException {
        okhttp3.Call localVarCall = createNewBankAccountValidateBeforeCall(bankAccountBase, null);
        Type localVarReturnType = new TypeToken<BankAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewBankAccountAsync(BankAccountBase bankAccountBase, final ApiCallback<BankAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewBankAccountValidateBeforeCall(bankAccountBase, _callback);
        Type localVarReturnType = new TypeToken<BankAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewBankAccountRequestBuilder {
        private final String routingNumber;
        private final String accountNumber;
        private final String accountType;
        private final String signatory;
        private String description;
        private String checkTemplate;
        private String fractionalRoutingNumber;
        private String city;
        private String state;
        private String zipcode;
        private Map<String, String> metadata;

        private CreateNewBankAccountRequestBuilder(String routingNumber, String accountNumber, String accountType, String signatory) {
            this.routingNumber = routingNumber;
            this.accountNumber = accountNumber;
            this.accountType = accountType;
            this.signatory = signatory;
        }

        /**
         * Set description
         * @param description An internal description that identifies this resource. Must be no longer than 255 characters.  (optional)
         * @return CreateNewBankAccountRequestBuilder
         */
        public CreateNewBankAccountRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set checkTemplate
         * @param checkTemplate The check template used for printing. The defualt value is &#x60;common&#x60;. If you bank with JP Morgan Chase and wish to use Positive Pay use the &#x60;jpm&#x60; template. &#x60;jpm&#x60; requires additional information to be provided. (optional)
         * @return CreateNewBankAccountRequestBuilder
         */
        public CreateNewBankAccountRequestBuilder checkTemplate(String checkTemplate) {
            this.checkTemplate = checkTemplate;
            return this;
        }
        
        /**
         * Set fractionalRoutingNumber
         * @param fractionalRoutingNumber The fractional routing number for your home bank account. Required for the &#x60;jpm&#x60; check template only. Please contact a bank representative if you do not know the fractional routing number associated with your home bank institution. (optional)
         * @return CreateNewBankAccountRequestBuilder
         */
        public CreateNewBankAccountRequestBuilder fractionalRoutingNumber(String fractionalRoutingNumber) {
            this.fractionalRoutingNumber = fractionalRoutingNumber;
            return this;
        }
        
        /**
         * Set city
         * @param city The city associated with your home bank account. Required for the &#x60;jpm&#x60; check template only. Please contact a bank representative if you do not know the city associated with your home bank institution. (optional)
         * @return CreateNewBankAccountRequestBuilder
         */
        public CreateNewBankAccountRequestBuilder city(String city) {
            this.city = city;
            return this;
        }
        
        /**
         * Set state
         * @param state The state associated with your home bank account. Required for the &#x60;jpm&#x60; check template only. Please contact a bank representative if you do not know the state associated with your home bank institution. (optional)
         * @return CreateNewBankAccountRequestBuilder
         */
        public CreateNewBankAccountRequestBuilder state(String state) {
            this.state = state;
            return this;
        }
        
        /**
         * Set zipcode
         * @param zipcode The zipcode associated with your home bank account. Required for the &#x60;jpm&#x60; check template only. Please contact a bank representative if you do not know the zipcode associated with your home bank institution. (optional)
         * @return CreateNewBankAccountRequestBuilder
         */
        public CreateNewBankAccountRequestBuilder zipcode(String zipcode) {
            this.zipcode = zipcode;
            return this;
        }
        
        /**
         * Set metadata
         * @param metadata Use metadata to store custom information for tagging and labeling back to your internal systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must be at most 500 characters. Neither can contain the characters &#x60;\\\&quot;&#x60; and &#x60;\\\\&#x60;. i.e. &#39;{\\\&quot;customer_id\\\&quot; : \\\&quot;NEWYORK2015\\\&quot;}&#39; Nested objects are not supported.  See [Metadata](#section/Metadata) for more information. (optional)
         * @return CreateNewBankAccountRequestBuilder
         */
        public CreateNewBankAccountRequestBuilder metadata(Map<String, String> metadata) {
            this.metadata = metadata;
            return this;
        }
        
        /**
         * Build call for createNewBankAccount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a bank_account object </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BankAccountBase bankAccountBase = buildBodyParams();
            return createNewBankAccountCall(bankAccountBase, _callback);
        }

        private BankAccountBase buildBodyParams() {
            BankAccountBase bankAccountBase = new BankAccountBase();
            bankAccountBase.description(this.description);
            bankAccountBase.routingNumber(this.routingNumber);
            bankAccountBase.accountNumber(this.accountNumber);
            if (this.accountType != null)
            bankAccountBase.accountType(BankAccountBase.AccountTypeEnum.fromValue(this.accountType));
            bankAccountBase.signatory(this.signatory);
            if (this.checkTemplate != null)
            bankAccountBase.checkTemplate(BankAccountBase.CheckTemplateEnum.fromValue(this.checkTemplate));
            bankAccountBase.fractionalRoutingNumber(this.fractionalRoutingNumber);
            bankAccountBase.city(this.city);
            bankAccountBase.state(this.state);
            bankAccountBase.zipcode(this.zipcode);
            bankAccountBase.metadata(this.metadata);
            return bankAccountBase;
        }

        /**
         * Execute createNewBankAccount request
         * @return BankAccount
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a bank_account object </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public BankAccount execute() throws ApiException {
            BankAccountBase bankAccountBase = buildBodyParams();
            ApiResponse<BankAccount> localVarResp = createNewBankAccountWithHttpInfo(bankAccountBase);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewBankAccount request with HTTP info returned
         * @return ApiResponse&lt;BankAccount&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a bank_account object </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BankAccount> executeWithHttpInfo() throws ApiException {
            BankAccountBase bankAccountBase = buildBodyParams();
            return createNewBankAccountWithHttpInfo(bankAccountBase);
        }

        /**
         * Execute createNewBankAccount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a bank_account object </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BankAccount> _callback) throws ApiException {
            BankAccountBase bankAccountBase = buildBodyParams();
            return createNewBankAccountAsync(bankAccountBase, _callback);
        }
    }

    /**
     * Create
     * Creates a new bank account with the provided properties. Bank accounts created in live mode will need to be verified via micro deposits before being able to send live checks. The deposits will appear in the bank account in 2-3 business days and have the description \&quot;VERIFICATION\&quot;.
     * @param bankAccountBase  (required)
     * @return CreateNewBankAccountRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a bank_account object </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewBankAccountRequestBuilder createNewBankAccount(String routingNumber, String accountNumber, String accountType, String signatory) throws IllegalArgumentException {
        if (routingNumber == null) throw new IllegalArgumentException("\"routingNumber\" is required but got null");
            if (routingNumber != null && routingNumber.length() < 9) {
              throw new IllegalArgumentException("Invalid value for routingNumber. Length must be greater than or equal to 9.");
            }

        if (accountNumber == null) throw new IllegalArgumentException("\"accountNumber\" is required but got null");
            

        if (accountType == null) throw new IllegalArgumentException("\"accountType\" is required but got null");
            

        if (signatory == null) throw new IllegalArgumentException("\"signatory\" is required but got null");
            

        return new CreateNewBankAccountRequestBuilder(routingNumber, accountNumber, accountType, signatory);
    }
    private okhttp3.Call deleteBankAccountCall(BankId bankId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bank_accounts/{bank_id}"
            .replace("{" + "bank_id" + "}", localVarApiClient.escapeString(bankId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteBankAccountValidateBeforeCall(BankId bankId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bankId' is set
        if (bankId == null) {
            throw new ApiException("Missing the required parameter 'bankId' when calling deleteBankAccount(Async)");
        }

        return deleteBankAccountCall(bankId, _callback);

    }


    private ApiResponse<BankDeletion> deleteBankAccountWithHttpInfo(BankId bankId) throws ApiException {
        okhttp3.Call localVarCall = deleteBankAccountValidateBeforeCall(bankId, null);
        Type localVarReturnType = new TypeToken<BankDeletion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteBankAccountAsync(BankId bankId, final ApiCallback<BankDeletion> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteBankAccountValidateBeforeCall(bankId, _callback);
        Type localVarReturnType = new TypeToken<BankDeletion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteBankAccountRequestBuilder {
        private final BankId bankId;

        private DeleteBankAccountRequestBuilder(BankId bankId) {
            this.bankId = bankId;
        }

        /**
         * Build call for deleteBankAccount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteBankAccountCall(bankId, _callback);
        }


        /**
         * Execute deleteBankAccount request
         * @return BankDeletion
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public BankDeletion execute() throws ApiException {
            ApiResponse<BankDeletion> localVarResp = deleteBankAccountWithHttpInfo(bankId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteBankAccount request with HTTP info returned
         * @return ApiResponse&lt;BankDeletion&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BankDeletion> executeWithHttpInfo() throws ApiException {
            return deleteBankAccountWithHttpInfo(bankId);
        }

        /**
         * Execute deleteBankAccount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BankDeletion> _callback) throws ApiException {
            return deleteBankAccountAsync(bankId, _callback);
        }
    }

    /**
     * Delete
     * Permanently deletes a bank account. It cannot be undone.
     * @param bankId id of the bank account (required)
     * @return DeleteBankAccountRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public DeleteBankAccountRequestBuilder deleteBankAccount(BankId bankId) throws IllegalArgumentException {
        if (bankId == null) throw new IllegalArgumentException("\"bankId\" is required but got null");
        return new DeleteBankAccountRequestBuilder(bankId);
    }
    private okhttp3.Call getDetailsCall(BankId bankId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bank_accounts/{bank_id}"
            .replace("{" + "bank_id" + "}", localVarApiClient.escapeString(bankId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailsValidateBeforeCall(BankId bankId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bankId' is set
        if (bankId == null) {
            throw new ApiException("Missing the required parameter 'bankId' when calling getDetails(Async)");
        }

        return getDetailsCall(bankId, _callback);

    }


    private ApiResponse<BankAccount> getDetailsWithHttpInfo(BankId bankId) throws ApiException {
        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(bankId, null);
        Type localVarReturnType = new TypeToken<BankAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetailsAsync(BankId bankId, final ApiCallback<BankAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(bankId, _callback);
        Type localVarReturnType = new TypeToken<BankAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetailsRequestBuilder {
        private final BankId bankId;

        private GetDetailsRequestBuilder(BankId bankId) {
            this.bankId = bankId;
        }

        /**
         * Build call for getDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a bank account object </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetailsCall(bankId, _callback);
        }


        /**
         * Execute getDetails request
         * @return BankAccount
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a bank account object </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public BankAccount execute() throws ApiException {
            ApiResponse<BankAccount> localVarResp = getDetailsWithHttpInfo(bankId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetails request with HTTP info returned
         * @return ApiResponse&lt;BankAccount&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a bank account object </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BankAccount> executeWithHttpInfo() throws ApiException {
            return getDetailsWithHttpInfo(bankId);
        }

        /**
         * Execute getDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a bank account object </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BankAccount> _callback) throws ApiException {
            return getDetailsAsync(bankId, _callback);
        }
    }

    /**
     * Retrieve
     * Retrieves the details of an existing bank account. You need only supply the unique bank account identifier that was returned upon bank account creation.
     * @param bankId id of the bank account (required)
     * @return GetDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a bank account object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public GetDetailsRequestBuilder getDetails(BankId bankId) throws IllegalArgumentException {
        if (bankId == null) throw new IllegalArgumentException("\"bankId\" is required but got null");
        return new GetDetailsRequestBuilder(bankId);
    }
    private okhttp3.Call getListCall(Integer limit, AddressesListBeforeAfterParameter beforeAfter, List<String> include, Map<String, String> dateCreated, Map<String, String> metadata, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bank_accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (beforeAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before/after", beforeAfter));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        if (dateCreated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_created", dateCreated));
        }

        if (metadata != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metadata", metadata));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListValidateBeforeCall(Integer limit, AddressesListBeforeAfterParameter beforeAfter, List<String> include, Map<String, String> dateCreated, Map<String, String> metadata, final ApiCallback _callback) throws ApiException {
        return getListCall(limit, beforeAfter, include, dateCreated, metadata, _callback);

    }


    private ApiResponse<BankAccountsGetListResponse> getListWithHttpInfo(Integer limit, AddressesListBeforeAfterParameter beforeAfter, List<String> include, Map<String, String> dateCreated, Map<String, String> metadata) throws ApiException {
        okhttp3.Call localVarCall = getListValidateBeforeCall(limit, beforeAfter, include, dateCreated, metadata, null);
        Type localVarReturnType = new TypeToken<BankAccountsGetListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getListAsync(Integer limit, AddressesListBeforeAfterParameter beforeAfter, List<String> include, Map<String, String> dateCreated, Map<String, String> metadata, final ApiCallback<BankAccountsGetListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListValidateBeforeCall(limit, beforeAfter, include, dateCreated, metadata, _callback);
        Type localVarReturnType = new TypeToken<BankAccountsGetListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetListRequestBuilder {
        private Integer limit;
        private AddressesListBeforeAfterParameter beforeAfter;
        private List<String> include;
        private Map<String, String> dateCreated;
        private Map<String, String> metadata;

        private GetListRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit How many results to return. (optional, default to 10)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set beforeAfter
         * @param beforeAfter &#x60;before&#x60; and &#x60;after&#x60; are both optional but only one of them can be in the query at a time.  (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder beforeAfter(AddressesListBeforeAfterParameter beforeAfter) {
            this.beforeAfter = beforeAfter;
            return this;
        }
        
        /**
         * Set include
         * @param include Request that the response include the total count by specifying &#x60;include&#x3D;[\&quot;total_count\&quot;]&#x60;.  (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder include(List<String> include) {
            this.include = include;
            return this;
        }
        
        /**
         * Set dateCreated
         * @param dateCreated Filter by date created. Accepted formats are ISO-8601 date or datetime, e.g. &#x60;{ \&quot;gt\&quot;: \&quot;2012-01-01\&quot;, \&quot;lt\&quot;: \&quot;2012-01-31T12:34:56Z\&quot; }&#x60; where &#x60;gt&#x60; is &gt;, &#x60;lt&#x60; is &lt;, &#x60;gte&#x60; is ≥, and &#x60;lte&#x60; is ≤. (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder dateCreated(Map<String, String> dateCreated) {
            this.dateCreated = dateCreated;
            return this;
        }
        
        /**
         * Set metadata
         * @param metadata Filter by metadata key-value pair&#x60;. (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder metadata(Map<String, String> metadata) {
            this.metadata = metadata;
            return this;
        }
        
        /**
         * Build call for getList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A dictionary with a data property that contains an array of up to &#x60;limit&#x60; bank_accounts. Each entry in the array is a separate bank_account. The previous and next page of bank_accounts can be retrieved by calling the endpoint contained in the &#x60;previous_url&#x60; and &#x60;next_url&#x60; fields in the API response respectively.&lt;br&gt;If no more bank_accounts are available beyond the current set of returned results, the &#x60;next_url&#x60; field will be empty. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getListCall(limit, beforeAfter, include, dateCreated, metadata, _callback);
        }


        /**
         * Execute getList request
         * @return BankAccountsGetListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A dictionary with a data property that contains an array of up to &#x60;limit&#x60; bank_accounts. Each entry in the array is a separate bank_account. The previous and next page of bank_accounts can be retrieved by calling the endpoint contained in the &#x60;previous_url&#x60; and &#x60;next_url&#x60; fields in the API response respectively.&lt;br&gt;If no more bank_accounts are available beyond the current set of returned results, the &#x60;next_url&#x60; field will be empty. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public BankAccountsGetListResponse execute() throws ApiException {
            ApiResponse<BankAccountsGetListResponse> localVarResp = getListWithHttpInfo(limit, beforeAfter, include, dateCreated, metadata);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getList request with HTTP info returned
         * @return ApiResponse&lt;BankAccountsGetListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A dictionary with a data property that contains an array of up to &#x60;limit&#x60; bank_accounts. Each entry in the array is a separate bank_account. The previous and next page of bank_accounts can be retrieved by calling the endpoint contained in the &#x60;previous_url&#x60; and &#x60;next_url&#x60; fields in the API response respectively.&lt;br&gt;If no more bank_accounts are available beyond the current set of returned results, the &#x60;next_url&#x60; field will be empty. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BankAccountsGetListResponse> executeWithHttpInfo() throws ApiException {
            return getListWithHttpInfo(limit, beforeAfter, include, dateCreated, metadata);
        }

        /**
         * Execute getList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A dictionary with a data property that contains an array of up to &#x60;limit&#x60; bank_accounts. Each entry in the array is a separate bank_account. The previous and next page of bank_accounts can be retrieved by calling the endpoint contained in the &#x60;previous_url&#x60; and &#x60;next_url&#x60; fields in the API response respectively.&lt;br&gt;If no more bank_accounts are available beyond the current set of returned results, the &#x60;next_url&#x60; field will be empty. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BankAccountsGetListResponse> _callback) throws ApiException {
            return getListAsync(limit, beforeAfter, include, dateCreated, metadata, _callback);
        }
    }

    /**
     * List
     * Returns a list of your bank accounts. The bank accounts are returned sorted by creation date, with the most recently created bank accounts appearing first.
     * @return GetListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A dictionary with a data property that contains an array of up to &#x60;limit&#x60; bank_accounts. Each entry in the array is a separate bank_account. The previous and next page of bank_accounts can be retrieved by calling the endpoint contained in the &#x60;previous_url&#x60; and &#x60;next_url&#x60; fields in the API response respectively.&lt;br&gt;If no more bank_accounts are available beyond the current set of returned results, the &#x60;next_url&#x60; field will be empty. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public GetListRequestBuilder getList() throws IllegalArgumentException {
        return new GetListRequestBuilder();
    }
    private okhttp3.Call verifyBankAccountCall(BankId bankId, BankAccountVerify bankAccountVerify, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bankAccountVerify;

        // create path and map variables
        String localVarPath = "/bank_accounts/{bank_id}/verify"
            .replace("{" + "bank_id" + "}", localVarApiClient.escapeString(bankId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyBankAccountValidateBeforeCall(BankId bankId, BankAccountVerify bankAccountVerify, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bankId' is set
        if (bankId == null) {
            throw new ApiException("Missing the required parameter 'bankId' when calling verifyBankAccount(Async)");
        }

        // verify the required parameter 'bankAccountVerify' is set
        if (bankAccountVerify == null) {
            throw new ApiException("Missing the required parameter 'bankAccountVerify' when calling verifyBankAccount(Async)");
        }

        return verifyBankAccountCall(bankId, bankAccountVerify, _callback);

    }


    private ApiResponse<BankAccount> verifyBankAccountWithHttpInfo(BankId bankId, BankAccountVerify bankAccountVerify) throws ApiException {
        okhttp3.Call localVarCall = verifyBankAccountValidateBeforeCall(bankId, bankAccountVerify, null);
        Type localVarReturnType = new TypeToken<BankAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call verifyBankAccountAsync(BankId bankId, BankAccountVerify bankAccountVerify, final ApiCallback<BankAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyBankAccountValidateBeforeCall(bankId, bankAccountVerify, _callback);
        Type localVarReturnType = new TypeToken<BankAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class VerifyBankAccountRequestBuilder {
        private final List<Integer> amounts;
        private final BankId bankId;

        private VerifyBankAccountRequestBuilder(List<Integer> amounts, BankId bankId) {
            this.amounts = amounts;
            this.bankId = bankId;
        }

        /**
         * Build call for verifyBankAccount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a bank_account object </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BankAccountVerify bankAccountVerify = buildBodyParams();
            return verifyBankAccountCall(bankId, bankAccountVerify, _callback);
        }

        private BankAccountVerify buildBodyParams() {
            BankAccountVerify bankAccountVerify = new BankAccountVerify();
            bankAccountVerify.amounts(this.amounts);
            return bankAccountVerify;
        }

        /**
         * Execute verifyBankAccount request
         * @return BankAccount
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a bank_account object </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public BankAccount execute() throws ApiException {
            BankAccountVerify bankAccountVerify = buildBodyParams();
            ApiResponse<BankAccount> localVarResp = verifyBankAccountWithHttpInfo(bankId, bankAccountVerify);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute verifyBankAccount request with HTTP info returned
         * @return ApiResponse&lt;BankAccount&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a bank_account object </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BankAccount> executeWithHttpInfo() throws ApiException {
            BankAccountVerify bankAccountVerify = buildBodyParams();
            return verifyBankAccountWithHttpInfo(bankId, bankAccountVerify);
        }

        /**
         * Execute verifyBankAccount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a bank_account object </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BankAccount> _callback) throws ApiException {
            BankAccountVerify bankAccountVerify = buildBodyParams();
            return verifyBankAccountAsync(bankId, bankAccountVerify, _callback);
        }
    }

    /**
     * Verify
     * Verify a bank account in order to create a check.
     * @param bankId id of the bank account to be verified (required)
     * @param bankAccountVerify  (required)
     * @return VerifyBankAccountRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a bank_account object </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public VerifyBankAccountRequestBuilder verifyBankAccount(List<Integer> amounts, BankId bankId) throws IllegalArgumentException {
        if (amounts == null) throw new IllegalArgumentException("\"amounts\" is required but got null");
        if (bankId == null) throw new IllegalArgumentException("\"bankId\" is required but got null");
        return new VerifyBankAccountRequestBuilder(amounts, bankId);
    }
}

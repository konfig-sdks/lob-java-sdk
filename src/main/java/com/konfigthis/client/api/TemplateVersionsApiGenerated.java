/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 
 *
 * The version of the OpenAPI document: 1.19.28
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddressesListBeforeAfterParameterAllOf;
import com.konfigthis.client.model.Engine;
import com.konfigthis.client.model.Error;
import com.konfigthis.client.model.TemplateVersion;
import com.konfigthis.client.model.TemplateVersionDeletion;
import com.konfigthis.client.model.TemplateVersionUpdatable;
import com.konfigthis.client.model.TemplateVersionWritable;
import com.konfigthis.client.model.TemplateVersionsGetListResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TemplateVersionsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TemplateVersionsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TemplateVersionsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewVersionCall(String tmplId, TemplateVersionWritable templateVersionWritable, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = templateVersionWritable;

        // create path and map variables
        String localVarPath = "/templates/{tmpl_id}/versions"
            .replace("{" + "tmpl_id" + "}", localVarApiClient.escapeString(tmplId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewVersionValidateBeforeCall(String tmplId, TemplateVersionWritable templateVersionWritable, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tmplId' is set
        if (tmplId == null) {
            throw new ApiException("Missing the required parameter 'tmplId' when calling createNewVersion(Async)");
        }

        // verify the required parameter 'templateVersionWritable' is set
        if (templateVersionWritable == null) {
            throw new ApiException("Missing the required parameter 'templateVersionWritable' when calling createNewVersion(Async)");
        }

        return createNewVersionCall(tmplId, templateVersionWritable, _callback);

    }


    private ApiResponse<TemplateVersion> createNewVersionWithHttpInfo(String tmplId, TemplateVersionWritable templateVersionWritable) throws ApiException {
        okhttp3.Call localVarCall = createNewVersionValidateBeforeCall(tmplId, templateVersionWritable, null);
        Type localVarReturnType = new TypeToken<TemplateVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewVersionAsync(String tmplId, TemplateVersionWritable templateVersionWritable, final ApiCallback<TemplateVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewVersionValidateBeforeCall(tmplId, templateVersionWritable, _callback);
        Type localVarReturnType = new TypeToken<TemplateVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewVersionRequestBuilder {
        private final String html;
        private final String tmplId;
        private String description;
        private Engine engine;
        private List<String> requiredVars;

        private CreateNewVersionRequestBuilder(String html, String tmplId) {
            this.html = html;
            this.tmplId = tmplId;
        }

        /**
         * Set description
         * @param description An internal description that identifies this resource. Must be no longer than 255 characters.  (optional)
         * @return CreateNewVersionRequestBuilder
         */
        public CreateNewVersionRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set engine
         * @param engine  (optional, default to legacy)
         * @return CreateNewVersionRequestBuilder
         */
        public CreateNewVersionRequestBuilder engine(Engine engine) {
            this.engine = engine;
            return this;
        }
        
        /**
         * Set requiredVars
         * @param requiredVars An array of required variables to be used in a template. Only available for &#x60;handlebars&#x60; templates.  (optional)
         * @return CreateNewVersionRequestBuilder
         */
        public CreateNewVersionRequestBuilder requiredVars(List<String> requiredVars) {
            this.requiredVars = requiredVars;
            return this;
        }
        
        /**
         * Build call for createNewVersion
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the template version with the given template and version ids. </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TemplateVersionWritable templateVersionWritable = buildBodyParams();
            return createNewVersionCall(tmplId, templateVersionWritable, _callback);
        }

        private TemplateVersionWritable buildBodyParams() {
            TemplateVersionWritable templateVersionWritable = new TemplateVersionWritable();
            templateVersionWritable.description(this.description);
            templateVersionWritable.html(this.html);
            templateVersionWritable.engine(this.engine);
            templateVersionWritable.requiredVars(this.requiredVars);
            return templateVersionWritable;
        }

        /**
         * Execute createNewVersion request
         * @return TemplateVersion
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the template version with the given template and version ids. </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public TemplateVersion execute() throws ApiException {
            TemplateVersionWritable templateVersionWritable = buildBodyParams();
            ApiResponse<TemplateVersion> localVarResp = createNewVersionWithHttpInfo(tmplId, templateVersionWritable);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewVersion request with HTTP info returned
         * @return ApiResponse&lt;TemplateVersion&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the template version with the given template and version ids. </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TemplateVersion> executeWithHttpInfo() throws ApiException {
            TemplateVersionWritable templateVersionWritable = buildBodyParams();
            return createNewVersionWithHttpInfo(tmplId, templateVersionWritable);
        }

        /**
         * Execute createNewVersion request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the template version with the given template and version ids. </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TemplateVersion> _callback) throws ApiException {
            TemplateVersionWritable templateVersionWritable = buildBodyParams();
            return createNewVersionAsync(tmplId, templateVersionWritable, _callback);
        }
    }

    /**
     * Create
     * Creates a new template version attached to the specified template.
     * @param tmplId The ID of the template the new version will be attached to (required)
     * @param templateVersionWritable  (required)
     * @return CreateNewVersionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the template version with the given template and version ids. </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewVersionRequestBuilder createNewVersion(String html, String tmplId) throws IllegalArgumentException {
        if (html == null) throw new IllegalArgumentException("\"html\" is required but got null");
            

        if (tmplId == null) throw new IllegalArgumentException("\"tmplId\" is required but got null");
            

        return new CreateNewVersionRequestBuilder(html, tmplId);
    }
    private okhttp3.Call deleteVersionCall(String tmplId, String vrsnId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templates/{tmpl_id}/versions/{vrsn_id}"
            .replace("{" + "tmpl_id" + "}", localVarApiClient.escapeString(tmplId.toString()))
            .replace("{" + "vrsn_id" + "}", localVarApiClient.escapeString(vrsnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVersionValidateBeforeCall(String tmplId, String vrsnId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tmplId' is set
        if (tmplId == null) {
            throw new ApiException("Missing the required parameter 'tmplId' when calling deleteVersion(Async)");
        }

        // verify the required parameter 'vrsnId' is set
        if (vrsnId == null) {
            throw new ApiException("Missing the required parameter 'vrsnId' when calling deleteVersion(Async)");
        }

        return deleteVersionCall(tmplId, vrsnId, _callback);

    }


    private ApiResponse<TemplateVersionDeletion> deleteVersionWithHttpInfo(String tmplId, String vrsnId) throws ApiException {
        okhttp3.Call localVarCall = deleteVersionValidateBeforeCall(tmplId, vrsnId, null);
        Type localVarReturnType = new TypeToken<TemplateVersionDeletion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteVersionAsync(String tmplId, String vrsnId, final ApiCallback<TemplateVersionDeletion> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVersionValidateBeforeCall(tmplId, vrsnId, _callback);
        Type localVarReturnType = new TypeToken<TemplateVersionDeletion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteVersionRequestBuilder {
        private final String tmplId;
        private final String vrsnId;

        private DeleteVersionRequestBuilder(String tmplId, String vrsnId) {
            this.tmplId = tmplId;
            this.vrsnId = vrsnId;
        }

        /**
         * Build call for deleteVersion
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteVersionCall(tmplId, vrsnId, _callback);
        }


        /**
         * Execute deleteVersion request
         * @return TemplateVersionDeletion
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public TemplateVersionDeletion execute() throws ApiException {
            ApiResponse<TemplateVersionDeletion> localVarResp = deleteVersionWithHttpInfo(tmplId, vrsnId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteVersion request with HTTP info returned
         * @return ApiResponse&lt;TemplateVersionDeletion&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TemplateVersionDeletion> executeWithHttpInfo() throws ApiException {
            return deleteVersionWithHttpInfo(tmplId, vrsnId);
        }

        /**
         * Execute deleteVersion request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TemplateVersionDeletion> _callback) throws ApiException {
            return deleteVersionAsync(tmplId, vrsnId, _callback);
        }
    }

    /**
     * Delete
     * Permanently deletes a template version. A template&#39;s &#x60;published_version&#x60; can not be deleted.
     * @param tmplId The ID of the template to which the version belongs. (required)
     * @param vrsnId id of the template_version (required)
     * @return DeleteVersionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public DeleteVersionRequestBuilder deleteVersion(String tmplId, String vrsnId) throws IllegalArgumentException {
        if (tmplId == null) throw new IllegalArgumentException("\"tmplId\" is required but got null");
            

        if (vrsnId == null) throw new IllegalArgumentException("\"vrsnId\" is required but got null");
            

        return new DeleteVersionRequestBuilder(tmplId, vrsnId);
    }
    private okhttp3.Call getCall(String tmplId, String vrsnId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templates/{tmpl_id}/versions/{vrsn_id}"
            .replace("{" + "tmpl_id" + "}", localVarApiClient.escapeString(tmplId.toString()))
            .replace("{" + "vrsn_id" + "}", localVarApiClient.escapeString(vrsnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getValidateBeforeCall(String tmplId, String vrsnId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tmplId' is set
        if (tmplId == null) {
            throw new ApiException("Missing the required parameter 'tmplId' when calling get(Async)");
        }

        // verify the required parameter 'vrsnId' is set
        if (vrsnId == null) {
            throw new ApiException("Missing the required parameter 'vrsnId' when calling get(Async)");
        }

        return getCall(tmplId, vrsnId, _callback);

    }


    private ApiResponse<TemplateVersion> getWithHttpInfo(String tmplId, String vrsnId) throws ApiException {
        okhttp3.Call localVarCall = getValidateBeforeCall(tmplId, vrsnId, null);
        Type localVarReturnType = new TypeToken<TemplateVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAsync(String tmplId, String vrsnId, final ApiCallback<TemplateVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = getValidateBeforeCall(tmplId, vrsnId, _callback);
        Type localVarReturnType = new TypeToken<TemplateVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRequestBuilder {
        private final String tmplId;
        private final String vrsnId;

        private GetRequestBuilder(String tmplId, String vrsnId) {
            this.tmplId = tmplId;
            this.vrsnId = vrsnId;
        }

        /**
         * Build call for get
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the template version with the given template and version ids. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCall(tmplId, vrsnId, _callback);
        }


        /**
         * Execute get request
         * @return TemplateVersion
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the template version with the given template and version ids. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public TemplateVersion execute() throws ApiException {
            ApiResponse<TemplateVersion> localVarResp = getWithHttpInfo(tmplId, vrsnId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute get request with HTTP info returned
         * @return ApiResponse&lt;TemplateVersion&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the template version with the given template and version ids. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TemplateVersion> executeWithHttpInfo() throws ApiException {
            return getWithHttpInfo(tmplId, vrsnId);
        }

        /**
         * Execute get request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the template version with the given template and version ids. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TemplateVersion> _callback) throws ApiException {
            return getAsync(tmplId, vrsnId, _callback);
        }
    }

    /**
     * Retrieve
     * Retrieves the template version with the given template and version ids.
     * @param tmplId The ID of the template to which the version belongs. (required)
     * @param vrsnId id of the template_version (required)
     * @return GetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the template version with the given template and version ids. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public GetRequestBuilder get(String tmplId, String vrsnId) throws IllegalArgumentException {
        if (tmplId == null) throw new IllegalArgumentException("\"tmplId\" is required but got null");
            

        if (vrsnId == null) throw new IllegalArgumentException("\"vrsnId\" is required but got null");
            

        return new GetRequestBuilder(tmplId, vrsnId);
    }
    private okhttp3.Call getListCall(String tmplId, Integer limit, AddressesListBeforeAfterParameter beforeAfter, List<String> include, Map<String, String> dateCreated, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templates/{tmpl_id}/versions"
            .replace("{" + "tmpl_id" + "}", localVarApiClient.escapeString(tmplId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (beforeAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before/after", beforeAfter));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        if (dateCreated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_created", dateCreated));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListValidateBeforeCall(String tmplId, Integer limit, AddressesListBeforeAfterParameter beforeAfter, List<String> include, Map<String, String> dateCreated, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tmplId' is set
        if (tmplId == null) {
            throw new ApiException("Missing the required parameter 'tmplId' when calling getList(Async)");
        }

        return getListCall(tmplId, limit, beforeAfter, include, dateCreated, _callback);

    }


    private ApiResponse<TemplateVersionsGetListResponse> getListWithHttpInfo(String tmplId, Integer limit, AddressesListBeforeAfterParameter beforeAfter, List<String> include, Map<String, String> dateCreated) throws ApiException {
        okhttp3.Call localVarCall = getListValidateBeforeCall(tmplId, limit, beforeAfter, include, dateCreated, null);
        Type localVarReturnType = new TypeToken<TemplateVersionsGetListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getListAsync(String tmplId, Integer limit, AddressesListBeforeAfterParameter beforeAfter, List<String> include, Map<String, String> dateCreated, final ApiCallback<TemplateVersionsGetListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListValidateBeforeCall(tmplId, limit, beforeAfter, include, dateCreated, _callback);
        Type localVarReturnType = new TypeToken<TemplateVersionsGetListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetListRequestBuilder {
        private final String tmplId;
        private Integer limit;
        private AddressesListBeforeAfterParameter beforeAfter;
        private List<String> include;
        private Map<String, String> dateCreated;

        private GetListRequestBuilder(String tmplId) {
            this.tmplId = tmplId;
        }

        /**
         * Set limit
         * @param limit How many results to return. (optional, default to 10)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set beforeAfter
         * @param beforeAfter &#x60;before&#x60; and &#x60;after&#x60; are both optional but only one of them can be in the query at a time.  (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder beforeAfter(AddressesListBeforeAfterParameter beforeAfter) {
            this.beforeAfter = beforeAfter;
            return this;
        }
        
        /**
         * Set include
         * @param include Request that the response include the total count by specifying &#x60;include&#x3D;[\&quot;total_count\&quot;]&#x60;.  (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder include(List<String> include) {
            this.include = include;
            return this;
        }
        
        /**
         * Set dateCreated
         * @param dateCreated Filter by date created. Accepted formats are ISO-8601 date or datetime, e.g. &#x60;{ \&quot;gt\&quot;: \&quot;2012-01-01\&quot;, \&quot;lt\&quot;: \&quot;2012-01-31T12:34:56Z\&quot; }&#x60; where &#x60;gt&#x60; is &gt;, &#x60;lt&#x60; is &lt;, &#x60;gte&#x60; is ≥, and &#x60;lte&#x60; is ≤. (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder dateCreated(Map<String, String> dateCreated) {
            this.dateCreated = dateCreated;
            return this;
        }
        
        /**
         * Build call for getList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A dictionary with a data property that contains an array of up to &#x60;limit&#x60; template versions. Each entry in the array is a separate template version object. The previous and next page of template versions can be retrieved by calling the endpoint contained in the &#x60;previous_url&#x60; and &#x60;next_url&#x60; fields in the API response respectively.&lt;br&gt;If no more template versions are available beyond the current set of returned results, the &#x60;next_url&#x60; field will be empty. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getListCall(tmplId, limit, beforeAfter, include, dateCreated, _callback);
        }


        /**
         * Execute getList request
         * @return TemplateVersionsGetListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A dictionary with a data property that contains an array of up to &#x60;limit&#x60; template versions. Each entry in the array is a separate template version object. The previous and next page of template versions can be retrieved by calling the endpoint contained in the &#x60;previous_url&#x60; and &#x60;next_url&#x60; fields in the API response respectively.&lt;br&gt;If no more template versions are available beyond the current set of returned results, the &#x60;next_url&#x60; field will be empty. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public TemplateVersionsGetListResponse execute() throws ApiException {
            ApiResponse<TemplateVersionsGetListResponse> localVarResp = getListWithHttpInfo(tmplId, limit, beforeAfter, include, dateCreated);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getList request with HTTP info returned
         * @return ApiResponse&lt;TemplateVersionsGetListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A dictionary with a data property that contains an array of up to &#x60;limit&#x60; template versions. Each entry in the array is a separate template version object. The previous and next page of template versions can be retrieved by calling the endpoint contained in the &#x60;previous_url&#x60; and &#x60;next_url&#x60; fields in the API response respectively.&lt;br&gt;If no more template versions are available beyond the current set of returned results, the &#x60;next_url&#x60; field will be empty. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TemplateVersionsGetListResponse> executeWithHttpInfo() throws ApiException {
            return getListWithHttpInfo(tmplId, limit, beforeAfter, include, dateCreated);
        }

        /**
         * Execute getList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A dictionary with a data property that contains an array of up to &#x60;limit&#x60; template versions. Each entry in the array is a separate template version object. The previous and next page of template versions can be retrieved by calling the endpoint contained in the &#x60;previous_url&#x60; and &#x60;next_url&#x60; fields in the API response respectively.&lt;br&gt;If no more template versions are available beyond the current set of returned results, the &#x60;next_url&#x60; field will be empty. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TemplateVersionsGetListResponse> _callback) throws ApiException {
            return getListAsync(tmplId, limit, beforeAfter, include, dateCreated, _callback);
        }
    }

    /**
     * List
     * Returns a list of template versions for the given template ID. The template versions are sorted by creation date, with the most recently created appearing first. 
     * @param tmplId The ID of the template associated with the retrieved versions (required)
     * @return GetListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A dictionary with a data property that contains an array of up to &#x60;limit&#x60; template versions. Each entry in the array is a separate template version object. The previous and next page of template versions can be retrieved by calling the endpoint contained in the &#x60;previous_url&#x60; and &#x60;next_url&#x60; fields in the API response respectively.&lt;br&gt;If no more template versions are available beyond the current set of returned results, the &#x60;next_url&#x60; field will be empty. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public GetListRequestBuilder getList(String tmplId) throws IllegalArgumentException {
        if (tmplId == null) throw new IllegalArgumentException("\"tmplId\" is required but got null");
            

        return new GetListRequestBuilder(tmplId);
    }
    private okhttp3.Call updateTemplateVersionCall(String tmplId, String vrsnId, TemplateVersionUpdatable templateVersionUpdatable, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = templateVersionUpdatable;

        // create path and map variables
        String localVarPath = "/templates/{tmpl_id}/versions/{vrsn_id}"
            .replace("{" + "tmpl_id" + "}", localVarApiClient.escapeString(tmplId.toString()))
            .replace("{" + "vrsn_id" + "}", localVarApiClient.escapeString(vrsnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTemplateVersionValidateBeforeCall(String tmplId, String vrsnId, TemplateVersionUpdatable templateVersionUpdatable, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tmplId' is set
        if (tmplId == null) {
            throw new ApiException("Missing the required parameter 'tmplId' when calling updateTemplateVersion(Async)");
        }

        // verify the required parameter 'vrsnId' is set
        if (vrsnId == null) {
            throw new ApiException("Missing the required parameter 'vrsnId' when calling updateTemplateVersion(Async)");
        }

        // verify the required parameter 'templateVersionUpdatable' is set
        if (templateVersionUpdatable == null) {
            throw new ApiException("Missing the required parameter 'templateVersionUpdatable' when calling updateTemplateVersion(Async)");
        }

        return updateTemplateVersionCall(tmplId, vrsnId, templateVersionUpdatable, _callback);

    }


    private ApiResponse<TemplateVersion> updateTemplateVersionWithHttpInfo(String tmplId, String vrsnId, TemplateVersionUpdatable templateVersionUpdatable) throws ApiException {
        okhttp3.Call localVarCall = updateTemplateVersionValidateBeforeCall(tmplId, vrsnId, templateVersionUpdatable, null);
        Type localVarReturnType = new TypeToken<TemplateVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateTemplateVersionAsync(String tmplId, String vrsnId, TemplateVersionUpdatable templateVersionUpdatable, final ApiCallback<TemplateVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTemplateVersionValidateBeforeCall(tmplId, vrsnId, templateVersionUpdatable, _callback);
        Type localVarReturnType = new TypeToken<TemplateVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateTemplateVersionRequestBuilder {
        private final String tmplId;
        private final String vrsnId;
        private String description;
        private Engine engine;
        private List<String> requiredVars;

        private UpdateTemplateVersionRequestBuilder(String tmplId, String vrsnId) {
            this.tmplId = tmplId;
            this.vrsnId = vrsnId;
        }

        /**
         * Set description
         * @param description An internal description that identifies this resource. Must be no longer than 255 characters.  (optional)
         * @return UpdateTemplateVersionRequestBuilder
         */
        public UpdateTemplateVersionRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set engine
         * @param engine  (optional, default to legacy)
         * @return UpdateTemplateVersionRequestBuilder
         */
        public UpdateTemplateVersionRequestBuilder engine(Engine engine) {
            this.engine = engine;
            return this;
        }
        
        /**
         * Set requiredVars
         * @param requiredVars An array of required variables to be used in a template. Only available for &#x60;handlebars&#x60; templates.  (optional)
         * @return UpdateTemplateVersionRequestBuilder
         */
        public UpdateTemplateVersionRequestBuilder requiredVars(List<String> requiredVars) {
            this.requiredVars = requiredVars;
            return this;
        }
        
        /**
         * Build call for updateTemplateVersion
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the template version with the given template and version ids. </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TemplateVersionUpdatable templateVersionUpdatable = buildBodyParams();
            return updateTemplateVersionCall(tmplId, vrsnId, templateVersionUpdatable, _callback);
        }

        private TemplateVersionUpdatable buildBodyParams() {
            TemplateVersionUpdatable templateVersionUpdatable = new TemplateVersionUpdatable();
            templateVersionUpdatable.description(this.description);
            templateVersionUpdatable.engine(this.engine);
            templateVersionUpdatable.requiredVars(this.requiredVars);
            return templateVersionUpdatable;
        }

        /**
         * Execute updateTemplateVersion request
         * @return TemplateVersion
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the template version with the given template and version ids. </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public TemplateVersion execute() throws ApiException {
            TemplateVersionUpdatable templateVersionUpdatable = buildBodyParams();
            ApiResponse<TemplateVersion> localVarResp = updateTemplateVersionWithHttpInfo(tmplId, vrsnId, templateVersionUpdatable);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateTemplateVersion request with HTTP info returned
         * @return ApiResponse&lt;TemplateVersion&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the template version with the given template and version ids. </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TemplateVersion> executeWithHttpInfo() throws ApiException {
            TemplateVersionUpdatable templateVersionUpdatable = buildBodyParams();
            return updateTemplateVersionWithHttpInfo(tmplId, vrsnId, templateVersionUpdatable);
        }

        /**
         * Execute updateTemplateVersion request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the template version with the given template and version ids. </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TemplateVersion> _callback) throws ApiException {
            TemplateVersionUpdatable templateVersionUpdatable = buildBodyParams();
            return updateTemplateVersionAsync(tmplId, vrsnId, templateVersionUpdatable, _callback);
        }
    }

    /**
     * Update
     * Updates the template version with the given template and version ids.
     * @param tmplId The ID of the template to which the version belongs. (required)
     * @param vrsnId id of the template_version (required)
     * @param templateVersionUpdatable  (required)
     * @return UpdateTemplateVersionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the template version with the given template and version ids. </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTemplateVersionRequestBuilder updateTemplateVersion(String tmplId, String vrsnId) throws IllegalArgumentException {
        if (tmplId == null) throw new IllegalArgumentException("\"tmplId\" is required but got null");
            

        if (vrsnId == null) throw new IllegalArgumentException("\"vrsnId\" is required but got null");
            

        return new UpdateTemplateVersionRequestBuilder(tmplId, vrsnId);
    }
}

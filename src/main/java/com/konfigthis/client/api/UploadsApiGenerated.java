/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 
 *
 * The version of the OpenAPI document: 1.19.28
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ExportRetrieveResponse;
import java.io.File;
import com.konfigthis.client.model.OptionalAddressColumnMapping;
import com.konfigthis.client.model.ReportRetrieveResponse;
import com.konfigthis.client.model.RequiredAddressColumnMapping;
import com.konfigthis.client.model.Upload;
import com.konfigthis.client.model.UploadCreateExport;
import com.konfigthis.client.model.UploadFile;
import com.konfigthis.client.model.UploadFileRequest;
import com.konfigthis.client.model.UploadUpdatable;
import com.konfigthis.client.model.UploadWritable;
import com.konfigthis.client.model.UploadsCreateExportFileRequest;
import com.konfigthis.client.model.UploadsMetadata;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UploadsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UploadsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public UploadsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call callFileCall(String uplId, UploadFileRequest uploadFileRequest, File _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = uploadFileRequest;

        // create path and map variables
        String localVarPath = "/uploads/{upl_id}/file"
            .replace("{" + "upl_id" + "}", localVarApiClient.escapeString(uplId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call callFileValidateBeforeCall(String uplId, UploadFileRequest uploadFileRequest, File _file, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uplId' is set
        if (uplId == null) {
            throw new ApiException("Missing the required parameter 'uplId' when calling callFile(Async)");
        }

        // verify the required parameter 'uploadFileRequest' is set
        if (uploadFileRequest == null) {
            throw new ApiException("Missing the required parameter 'uploadFileRequest' when calling callFile(Async)");
        }

        return callFileCall(uplId, uploadFileRequest, _file, _callback);

    }


    private ApiResponse<UploadFile> callFileWithHttpInfo(String uplId, UploadFileRequest uploadFileRequest, File _file) throws ApiException {
        okhttp3.Call localVarCall = callFileValidateBeforeCall(uplId, uploadFileRequest, _file, null);
        Type localVarReturnType = new TypeToken<UploadFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call callFileAsync(String uplId, UploadFileRequest uploadFileRequest, File _file, final ApiCallback<UploadFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = callFileValidateBeforeCall(uplId, uploadFileRequest, _file, _callback);
        Type localVarReturnType = new TypeToken<UploadFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CallFileRequestBuilder {
        private final String uplId;
        private File _file;

        private CallFileRequestBuilder(String uplId) {
            this.uplId = uplId;
        }

        /**
         * Set _file
         * @param _file  (optional)
         * @return CallFileRequestBuilder
         */
        public CallFileRequestBuilder _file(File _file) {
            this._file = _file;
            return this;
        }
        
        /**
         * Build call for callFile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UploadFileRequest uploadFileRequest = buildBodyParams();
            return callFileCall(uplId, uploadFileRequest, _file, _callback);
        }

        private UploadFileRequest buildBodyParams() {
            UploadFileRequest uploadFileRequest = new UploadFileRequest();
            uploadFileRequest._file(this._file);
            return uploadFileRequest;
        }

        /**
         * Execute callFile request
         * @return UploadFile
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public UploadFile execute() throws ApiException {
            UploadFileRequest uploadFileRequest = buildBodyParams();
            ApiResponse<UploadFile> localVarResp = callFileWithHttpInfo(uplId, uploadFileRequest, _file);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute callFile request with HTTP info returned
         * @return ApiResponse&lt;UploadFile&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UploadFile> executeWithHttpInfo() throws ApiException {
            UploadFileRequest uploadFileRequest = buildBodyParams();
            return callFileWithHttpInfo(uplId, uploadFileRequest, _file);
        }

        /**
         * Execute callFile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UploadFile> _callback) throws ApiException {
            UploadFileRequest uploadFileRequest = buildBodyParams();
            return callFileAsync(uplId, uploadFileRequest, _file, _callback);
        }
    }

    /**
     * Upload file
     * Upload an [audience file](https://help.lob.com/print-and-mail/building-a-mail-strategy/campaign-or-triggered-sends/campaign-audience-guide) and associate it with an upload.
     * @param uplId ID of the upload (required)
     * @param uploadFileRequest  (required)
     * @return CallFileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public CallFileRequestBuilder callFile(String uplId) throws IllegalArgumentException {
        if (uplId == null) throw new IllegalArgumentException("\"uplId\" is required but got null");
            

        return new CallFileRequestBuilder(uplId);
    }
    private okhttp3.Call createCall(UploadWritable uploadWritable, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = uploadWritable;

        // create path and map variables
        String localVarPath = "/uploads";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createValidateBeforeCall(UploadWritable uploadWritable, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uploadWritable' is set
        if (uploadWritable == null) {
            throw new ApiException("Missing the required parameter 'uploadWritable' when calling create(Async)");
        }

        return createCall(uploadWritable, _callback);

    }


    private ApiResponse<Upload> createWithHttpInfo(UploadWritable uploadWritable) throws ApiException {
        okhttp3.Call localVarCall = createValidateBeforeCall(uploadWritable, null);
        Type localVarReturnType = new TypeToken<Upload>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createAsync(UploadWritable uploadWritable, final ApiCallback<Upload> _callback) throws ApiException {

        okhttp3.Call localVarCall = createValidateBeforeCall(uploadWritable, _callback);
        Type localVarReturnType = new TypeToken<Upload>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateRequestBuilder {
        private final String campaignId;
        private RequiredAddressColumnMapping requiredAddressColumnMapping;
        private OptionalAddressColumnMapping optionalAddressColumnMapping;
        private UploadsMetadata metadata;
        private String mergeVariableColumnMapping;

        private CreateRequestBuilder(String campaignId) {
            this.campaignId = campaignId;
        }

        /**
         * Set requiredAddressColumnMapping
         * @param requiredAddressColumnMapping  (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder requiredAddressColumnMapping(RequiredAddressColumnMapping requiredAddressColumnMapping) {
            this.requiredAddressColumnMapping = requiredAddressColumnMapping;
            return this;
        }
        
        /**
         * Set optionalAddressColumnMapping
         * @param optionalAddressColumnMapping  (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder optionalAddressColumnMapping(OptionalAddressColumnMapping optionalAddressColumnMapping) {
            this.optionalAddressColumnMapping = optionalAddressColumnMapping;
            return this;
        }
        
        /**
         * Set metadata
         * @param metadata  (optional, default to {\&quot;columns\&quot;:[]})
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder metadata(UploadsMetadata metadata) {
            this.metadata = metadata;
            return this;
        }
        
        /**
         * Set mergeVariableColumnMapping
         * @param mergeVariableColumnMapping The mapping of column headers in your file to the merge variables present in your creative. See our &lt;a href&#x3D;\\\&quot;https://help.lob.com/print-and-mail/building-a-mail-strategy/campaign-or-triggered-sends/campaign-audience-guide#step-3-map-merge-variable-data-if-applicable-7\\\&quot; target&#x3D;\\\&quot;_blank\\\&quot;&gt;Campaign Audience Guide&lt;/a&gt; for additional details. &lt;br /&gt;If a merge variable has the same \\\&quot;name\\\&quot; as a \\\&quot;key\\\&quot; in the &#x60;requiredAddressColumnMapping&#x60; or &#x60;optionalAddressColumnMapping&#x60; objects, then they **CANNOT** have a different value in this object. If a different value is provided, then when the campaign is processing it will get overwritten with the mapped value present in the &#x60;requiredAddressColumnMapping&#x60; or &#x60;optionalAddressColumnMapping&#x60; objects. If using customized QR code redirect from the Audience file, then a &#x60;qr_code_redirect_url&#x60; must be mapped to the column header as used in the CSV. (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder mergeVariableColumnMapping(String mergeVariableColumnMapping) {
            this.mergeVariableColumnMapping = mergeVariableColumnMapping;
            return this;
        }
        
        /**
         * Build call for create
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Upload created successfully </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UploadWritable uploadWritable = buildBodyParams();
            return createCall(uploadWritable, _callback);
        }

        private UploadWritable buildBodyParams() {
            UploadWritable uploadWritable = new UploadWritable();
            uploadWritable.campaignId(this.campaignId);
            uploadWritable.requiredAddressColumnMapping(this.requiredAddressColumnMapping);
            uploadWritable.optionalAddressColumnMapping(this.optionalAddressColumnMapping);
            uploadWritable.metadata(this.metadata);
            uploadWritable.mergeVariableColumnMapping(this.mergeVariableColumnMapping);
            return uploadWritable;
        }

        /**
         * Execute create request
         * @return Upload
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Upload created successfully </td><td>  -  </td></tr>
         </table>
         */
        public Upload execute() throws ApiException {
            UploadWritable uploadWritable = buildBodyParams();
            ApiResponse<Upload> localVarResp = createWithHttpInfo(uploadWritable);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute create request with HTTP info returned
         * @return ApiResponse&lt;Upload&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Upload created successfully </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Upload> executeWithHttpInfo() throws ApiException {
            UploadWritable uploadWritable = buildBodyParams();
            return createWithHttpInfo(uploadWritable);
        }

        /**
         * Execute create request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Upload created successfully </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Upload> _callback) throws ApiException {
            UploadWritable uploadWritable = buildBodyParams();
            return createAsync(uploadWritable, _callback);
        }
    }

    /**
     * Create
     * Creates a new upload with the provided properties.
     * @param uploadWritable  (required)
     * @return CreateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Upload created successfully </td><td>  -  </td></tr>
     </table>
     */
    public CreateRequestBuilder create(String campaignId) throws IllegalArgumentException {
        if (campaignId == null) throw new IllegalArgumentException("\"campaignId\" is required but got null");
        return new CreateRequestBuilder(campaignId);
    }
    private okhttp3.Call createExportFileCall(String uplId, UploadsCreateExportFileRequest uploadsCreateExportFileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = uploadsCreateExportFileRequest;

        // create path and map variables
        String localVarPath = "/uploads/{upl_id}/exports"
            .replace("{" + "upl_id" + "}", localVarApiClient.escapeString(uplId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createExportFileValidateBeforeCall(String uplId, UploadsCreateExportFileRequest uploadsCreateExportFileRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uplId' is set
        if (uplId == null) {
            throw new ApiException("Missing the required parameter 'uplId' when calling createExportFile(Async)");
        }

        // verify the required parameter 'uploadsCreateExportFileRequest' is set
        if (uploadsCreateExportFileRequest == null) {
            throw new ApiException("Missing the required parameter 'uploadsCreateExportFileRequest' when calling createExportFile(Async)");
        }

        return createExportFileCall(uplId, uploadsCreateExportFileRequest, _callback);

    }


    private ApiResponse<UploadCreateExport> createExportFileWithHttpInfo(String uplId, UploadsCreateExportFileRequest uploadsCreateExportFileRequest) throws ApiException {
        okhttp3.Call localVarCall = createExportFileValidateBeforeCall(uplId, uploadsCreateExportFileRequest, null);
        Type localVarReturnType = new TypeToken<UploadCreateExport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createExportFileAsync(String uplId, UploadsCreateExportFileRequest uploadsCreateExportFileRequest, final ApiCallback<UploadCreateExport> _callback) throws ApiException {

        okhttp3.Call localVarCall = createExportFileValidateBeforeCall(uplId, uploadsCreateExportFileRequest, _callback);
        Type localVarReturnType = new TypeToken<UploadCreateExport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateExportFileRequestBuilder {
        private final String uplId;
        private String type;

        private CreateExportFileRequestBuilder(String uplId) {
            this.uplId = uplId;
        }

        /**
         * Set type
         * @param type  (optional)
         * @return CreateExportFileRequestBuilder
         */
        public CreateExportFileRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Build call for createExportFile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UploadsCreateExportFileRequest uploadsCreateExportFileRequest = buildBodyParams();
            return createExportFileCall(uplId, uploadsCreateExportFileRequest, _callback);
        }

        private UploadsCreateExportFileRequest buildBodyParams() {
            UploadsCreateExportFileRequest uploadsCreateExportFileRequest = new UploadsCreateExportFileRequest();
            if (this.type != null)
            uploadsCreateExportFileRequest.type(UploadsCreateExportFileRequest.TypeEnum.fromValue(this.type));
            return uploadsCreateExportFileRequest;
        }

        /**
         * Execute createExportFile request
         * @return UploadCreateExport
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public UploadCreateExport execute() throws ApiException {
            UploadsCreateExportFileRequest uploadsCreateExportFileRequest = buildBodyParams();
            ApiResponse<UploadCreateExport> localVarResp = createExportFileWithHttpInfo(uplId, uploadsCreateExportFileRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createExportFile request with HTTP info returned
         * @return ApiResponse&lt;UploadCreateExport&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UploadCreateExport> executeWithHttpInfo() throws ApiException {
            UploadsCreateExportFileRequest uploadsCreateExportFileRequest = buildBodyParams();
            return createExportFileWithHttpInfo(uplId, uploadsCreateExportFileRequest);
        }

        /**
         * Execute createExportFile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UploadCreateExport> _callback) throws ApiException {
            UploadsCreateExportFileRequest uploadsCreateExportFileRequest = buildBodyParams();
            return createExportFileAsync(uplId, uploadsCreateExportFileRequest, _callback);
        }
    }

    /**
     * Create Export
     * Campaign Exports can help you understand exactly which records in a campaign could not be created. By initiating and retrieving an export, you will get row-by-row errors for your campaign. For a step-by-step walkthrough of creating a campaign and exporting failures, see our [Campaigns Guide](https://help.lob.com/print-and-mail/building-a-mail-strategy/campaign-or-triggered-sends/launch-your-first-campaign).  Create an export file associated with an upload.
     * @param uplId ID of the upload (required)
     * @param uploadsCreateExportFileRequest  (required)
     * @return CreateExportFileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public CreateExportFileRequestBuilder createExportFile(String uplId) throws IllegalArgumentException {
        if (uplId == null) throw new IllegalArgumentException("\"uplId\" is required but got null");
            

        return new CreateExportFileRequestBuilder(uplId);
    }
    private okhttp3.Call deleteCall(String uplId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/uploads/{upl_id}"
            .replace("{" + "upl_id" + "}", localVarApiClient.escapeString(uplId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteValidateBeforeCall(String uplId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uplId' is set
        if (uplId == null) {
            throw new ApiException("Missing the required parameter 'uplId' when calling delete(Async)");
        }

        return deleteCall(uplId, _callback);

    }


    private ApiResponse<Void> deleteWithHttpInfo(String uplId) throws ApiException {
        okhttp3.Call localVarCall = deleteValidateBeforeCall(uplId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteAsync(String uplId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteValidateBeforeCall(uplId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteRequestBuilder {
        private final String uplId;

        private DeleteRequestBuilder(String uplId) {
            this.uplId = uplId;
        }

        /**
         * Build call for delete
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCall(uplId, _callback);
        }


        /**
         * Execute delete request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteWithHttpInfo(uplId);
        }

        /**
         * Execute delete request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteWithHttpInfo(uplId);
        }

        /**
         * Execute delete request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteAsync(uplId, _callback);
        }
    }

    /**
     * Delete
     * Delete an existing upload. You need only supply the unique identifier that was returned upon upload creation.
     * @param uplId id of the upload (required)
     * @return DeleteRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public DeleteRequestBuilder delete(String uplId) throws IllegalArgumentException {
        if (uplId == null) throw new IllegalArgumentException("\"uplId\" is required but got null");
            

        return new DeleteRequestBuilder(uplId);
    }
    private okhttp3.Call listCall(String campaignId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/uploads";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (campaignId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("campaignId", campaignId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(String campaignId, final ApiCallback _callback) throws ApiException {
        return listCall(campaignId, _callback);

    }


    private ApiResponse<List<Upload>> listWithHttpInfo(String campaignId) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(campaignId, null);
        Type localVarReturnType = new TypeToken<List<Upload>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(String campaignId, final ApiCallback<List<Upload>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(campaignId, _callback);
        Type localVarReturnType = new TypeToken<List<Upload>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private String campaignId;

        private ListRequestBuilder() {
        }

        /**
         * Set campaignId
         * @param campaignId id of the campaign (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder campaignId(String campaignId) {
            this.campaignId = campaignId;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An array of matching uploads. Each entry in the array is a separate upload. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(campaignId, _callback);
        }


        /**
         * Execute list request
         * @return List&lt;Upload&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An array of matching uploads. Each entry in the array is a separate upload. </td><td>  -  </td></tr>
         </table>
         */
        public List<Upload> execute() throws ApiException {
            ApiResponse<List<Upload>> localVarResp = listWithHttpInfo(campaignId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Upload&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An array of matching uploads. Each entry in the array is a separate upload. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Upload>> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(campaignId);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An array of matching uploads. Each entry in the array is a separate upload. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Upload>> _callback) throws ApiException {
            return listAsync(campaignId, _callback);
        }
    }

    /**
     * List
     * Returns a list of your uploads. Optionally, filter uploads by campaign.
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of matching uploads. Each entry in the array is a separate upload. </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list() throws IllegalArgumentException {
        return new ListRequestBuilder();
    }
    private okhttp3.Call retrieveCall(String uplId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/uploads/{upl_id}"
            .replace("{" + "upl_id" + "}", localVarApiClient.escapeString(uplId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveValidateBeforeCall(String uplId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uplId' is set
        if (uplId == null) {
            throw new ApiException("Missing the required parameter 'uplId' when calling retrieve(Async)");
        }

        return retrieveCall(uplId, _callback);

    }


    private ApiResponse<Upload> retrieveWithHttpInfo(String uplId) throws ApiException {
        okhttp3.Call localVarCall = retrieveValidateBeforeCall(uplId, null);
        Type localVarReturnType = new TypeToken<Upload>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call retrieveAsync(String uplId, final ApiCallback<Upload> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveValidateBeforeCall(uplId, _callback);
        Type localVarReturnType = new TypeToken<Upload>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RetrieveRequestBuilder {
        private final String uplId;

        private RetrieveRequestBuilder(String uplId) {
            this.uplId = uplId;
        }

        /**
         * Build call for retrieve
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an upload object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return retrieveCall(uplId, _callback);
        }


        /**
         * Execute retrieve request
         * @return Upload
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an upload object </td><td>  -  </td></tr>
         </table>
         */
        public Upload execute() throws ApiException {
            ApiResponse<Upload> localVarResp = retrieveWithHttpInfo(uplId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute retrieve request with HTTP info returned
         * @return ApiResponse&lt;Upload&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an upload object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Upload> executeWithHttpInfo() throws ApiException {
            return retrieveWithHttpInfo(uplId);
        }

        /**
         * Execute retrieve request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an upload object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Upload> _callback) throws ApiException {
            return retrieveAsync(uplId, _callback);
        }
    }

    /**
     * Retrieve
     * Retrieves the details of an existing upload. You need only supply the unique upload identifier that was returned upon upload creation.
     * @param uplId id of the upload (required)
     * @return RetrieveRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an upload object </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveRequestBuilder retrieve(String uplId) throws IllegalArgumentException {
        if (uplId == null) throw new IllegalArgumentException("\"uplId\" is required but got null");
            

        return new RetrieveRequestBuilder(uplId);
    }
    private okhttp3.Call retrieve_0Call(String uplId, String status, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/uploads/{upl_id}/report"
            .replace("{" + "upl_id" + "}", localVarApiClient.escapeString(uplId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieve_0ValidateBeforeCall(String uplId, String status, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uplId' is set
        if (uplId == null) {
            throw new ApiException("Missing the required parameter 'uplId' when calling retrieve_0(Async)");
        }

        return retrieve_0Call(uplId, status, limit, offset, _callback);

    }


    private ApiResponse<ReportRetrieveResponse> retrieve_0WithHttpInfo(String uplId, String status, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = retrieve_0ValidateBeforeCall(uplId, status, limit, offset, null);
        Type localVarReturnType = new TypeToken<ReportRetrieveResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call retrieve_0Async(String uplId, String status, Integer limit, Integer offset, final ApiCallback<ReportRetrieveResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieve_0ValidateBeforeCall(uplId, status, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<ReportRetrieveResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class Retrieve0RequestBuilder {
        private final String uplId;
        private String status;
        private Integer limit;
        private Integer offset;

        private Retrieve0RequestBuilder(String uplId) {
            this.uplId = uplId;
        }

        /**
         * Set status
         * @param status The status of line items to filter and retrieve. By default all line items are returned. (optional)
         * @return Retrieve0RequestBuilder
         */
        public Retrieve0RequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set limit
         * @param limit How many results to return. (optional, default to 100)
         * @return Retrieve0RequestBuilder
         */
        public Retrieve0RequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset An integer that designates the offset at which to begin returning results. Defaults to 0. (optional, default to 0)
         * @return Retrieve0RequestBuilder
         */
        public Retrieve0RequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for retrieve_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an report object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return retrieve_0Call(uplId, status, limit, offset, _callback);
        }


        /**
         * Execute retrieve_0 request
         * @return ReportRetrieveResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an report object </td><td>  -  </td></tr>
         </table>
         */
        public ReportRetrieveResponse execute() throws ApiException {
            ApiResponse<ReportRetrieveResponse> localVarResp = retrieve_0WithHttpInfo(uplId, status, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute retrieve_0 request with HTTP info returned
         * @return ApiResponse&lt;ReportRetrieveResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an report object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportRetrieveResponse> executeWithHttpInfo() throws ApiException {
            return retrieve_0WithHttpInfo(uplId, status, limit, offset);
        }

        /**
         * Execute retrieve_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an report object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportRetrieveResponse> _callback) throws ApiException {
            return retrieve_0Async(uplId, status, limit, offset, _callback);
        }
    }

    /**
     * Retrieve Line Item Report
     * Retrieves the line item data for each row from the csv file associated with the upload id record. NOTE: This endpoint is currently feature flagged. Please reach out to Lob&#39;s support team if you  would like access to this API endpoint.
     * @param uplId ID of the upload (required)
     * @return Retrieve0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an report object </td><td>  -  </td></tr>
     </table>
     */
    public Retrieve0RequestBuilder retrieve_0(String uplId) throws IllegalArgumentException {
        if (uplId == null) throw new IllegalArgumentException("\"uplId\" is required but got null");
            

        return new Retrieve0RequestBuilder(uplId);
    }
    private okhttp3.Call retrieve_1Call(String uplId, String exId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/uploads/{upl_id}/exports/{ex_id}"
            .replace("{" + "upl_id" + "}", localVarApiClient.escapeString(uplId.toString()))
            .replace("{" + "ex_id" + "}", localVarApiClient.escapeString(exId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieve_1ValidateBeforeCall(String uplId, String exId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uplId' is set
        if (uplId == null) {
            throw new ApiException("Missing the required parameter 'uplId' when calling retrieve_1(Async)");
        }

        // verify the required parameter 'exId' is set
        if (exId == null) {
            throw new ApiException("Missing the required parameter 'exId' when calling retrieve_1(Async)");
        }

        return retrieve_1Call(uplId, exId, _callback);

    }


    private ApiResponse<ExportRetrieveResponse> retrieve_1WithHttpInfo(String uplId, String exId) throws ApiException {
        okhttp3.Call localVarCall = retrieve_1ValidateBeforeCall(uplId, exId, null);
        Type localVarReturnType = new TypeToken<ExportRetrieveResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call retrieve_1Async(String uplId, String exId, final ApiCallback<ExportRetrieveResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieve_1ValidateBeforeCall(uplId, exId, _callback);
        Type localVarReturnType = new TypeToken<ExportRetrieveResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class Retrieve1RequestBuilder {
        private final String uplId;
        private final String exId;

        private Retrieve1RequestBuilder(String uplId, String exId) {
            this.uplId = uplId;
            this.exId = exId;
        }

        /**
         * Build call for retrieve_1
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an export object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return retrieve_1Call(uplId, exId, _callback);
        }


        /**
         * Execute retrieve_1 request
         * @return ExportRetrieveResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an export object </td><td>  -  </td></tr>
         </table>
         */
        public ExportRetrieveResponse execute() throws ApiException {
            ApiResponse<ExportRetrieveResponse> localVarResp = retrieve_1WithHttpInfo(uplId, exId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute retrieve_1 request with HTTP info returned
         * @return ApiResponse&lt;ExportRetrieveResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an export object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExportRetrieveResponse> executeWithHttpInfo() throws ApiException {
            return retrieve_1WithHttpInfo(uplId, exId);
        }

        /**
         * Execute retrieve_1 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an export object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExportRetrieveResponse> _callback) throws ApiException {
            return retrieve_1Async(uplId, exId, _callback);
        }
    }

    /**
     * Retrieve Export
     * Retrieves the details of an existing export. You need only supply the unique export identifier that was returned upon export creation. If you try retrieving an export immediately after creating one (i.e., before we&#39;re done processing the export), you will get back an export object with &#x60;state &#x3D; in_progress&#x60;.
     * @param uplId ID of the upload (required)
     * @param exId ID of the export (required)
     * @return Retrieve1RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an export object </td><td>  -  </td></tr>
     </table>
     */
    public Retrieve1RequestBuilder retrieve_1(String uplId, String exId) throws IllegalArgumentException {
        if (uplId == null) throw new IllegalArgumentException("\"uplId\" is required but got null");
            

        if (exId == null) throw new IllegalArgumentException("\"exId\" is required but got null");
            

        return new Retrieve1RequestBuilder(uplId, exId);
    }
    private okhttp3.Call updateCall(String uplId, UploadUpdatable uploadUpdatable, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = uploadUpdatable;

        // create path and map variables
        String localVarPath = "/uploads/{upl_id}"
            .replace("{" + "upl_id" + "}", localVarApiClient.escapeString(uplId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateValidateBeforeCall(String uplId, UploadUpdatable uploadUpdatable, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uplId' is set
        if (uplId == null) {
            throw new ApiException("Missing the required parameter 'uplId' when calling update(Async)");
        }

        // verify the required parameter 'uploadUpdatable' is set
        if (uploadUpdatable == null) {
            throw new ApiException("Missing the required parameter 'uploadUpdatable' when calling update(Async)");
        }

        return updateCall(uplId, uploadUpdatable, _callback);

    }


    private ApiResponse<Upload> updateWithHttpInfo(String uplId, UploadUpdatable uploadUpdatable) throws ApiException {
        okhttp3.Call localVarCall = updateValidateBeforeCall(uplId, uploadUpdatable, null);
        Type localVarReturnType = new TypeToken<Upload>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateAsync(String uplId, UploadUpdatable uploadUpdatable, final ApiCallback<Upload> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateValidateBeforeCall(uplId, uploadUpdatable, _callback);
        Type localVarReturnType = new TypeToken<Upload>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateRequestBuilder {
        private final String uplId;
        private String originalFilename;
        private RequiredAddressColumnMapping requiredAddressColumnMapping;
        private OptionalAddressColumnMapping optionalAddressColumnMapping;
        private UploadsMetadata metadata;
        private String mergeVariableColumnMapping;

        private UpdateRequestBuilder(String uplId) {
            this.uplId = uplId;
        }

        /**
         * Set originalFilename
         * @param originalFilename Original filename provided when the upload is created. (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder originalFilename(String originalFilename) {
            this.originalFilename = originalFilename;
            return this;
        }
        
        /**
         * Set requiredAddressColumnMapping
         * @param requiredAddressColumnMapping  (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder requiredAddressColumnMapping(RequiredAddressColumnMapping requiredAddressColumnMapping) {
            this.requiredAddressColumnMapping = requiredAddressColumnMapping;
            return this;
        }
        
        /**
         * Set optionalAddressColumnMapping
         * @param optionalAddressColumnMapping  (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder optionalAddressColumnMapping(OptionalAddressColumnMapping optionalAddressColumnMapping) {
            this.optionalAddressColumnMapping = optionalAddressColumnMapping;
            return this;
        }
        
        /**
         * Set metadata
         * @param metadata  (optional, default to {\&quot;columns\&quot;:[]})
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder metadata(UploadsMetadata metadata) {
            this.metadata = metadata;
            return this;
        }
        
        /**
         * Set mergeVariableColumnMapping
         * @param mergeVariableColumnMapping The mapping of column headers in your file to the merge variables present in your creative. See our &lt;a href&#x3D;\\\&quot;https://help.lob.com/print-and-mail/building-a-mail-strategy/campaign-or-triggered-sends/campaign-audience-guide#step-3-map-merge-variable-data-if-applicable-7\\\&quot; target&#x3D;\\\&quot;_blank\\\&quot;&gt;Campaign Audience Guide&lt;/a&gt; for additional details. &lt;br /&gt;If a merge variable has the same \\\&quot;name\\\&quot; as a \\\&quot;key\\\&quot; in the &#x60;requiredAddressColumnMapping&#x60; or &#x60;optionalAddressColumnMapping&#x60; objects, then they **CANNOT** have a different value in this object. If a different value is provided, then when the campaign is processing it will get overwritten with the mapped value present in the &#x60;requiredAddressColumnMapping&#x60; or &#x60;optionalAddressColumnMapping&#x60; objects. If using customized QR code redirect from the Audience file, then a &#x60;qr_code_redirect_url&#x60; must be mapped to the column header as used in the CSV. (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder mergeVariableColumnMapping(String mergeVariableColumnMapping) {
            this.mergeVariableColumnMapping = mergeVariableColumnMapping;
            return this;
        }
        
        /**
         * Build call for update
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an upload object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UploadUpdatable uploadUpdatable = buildBodyParams();
            return updateCall(uplId, uploadUpdatable, _callback);
        }

        private UploadUpdatable buildBodyParams() {
            UploadUpdatable uploadUpdatable = new UploadUpdatable();
            uploadUpdatable.originalFilename(this.originalFilename);
            uploadUpdatable.requiredAddressColumnMapping(this.requiredAddressColumnMapping);
            uploadUpdatable.optionalAddressColumnMapping(this.optionalAddressColumnMapping);
            uploadUpdatable.metadata(this.metadata);
            uploadUpdatable.mergeVariableColumnMapping(this.mergeVariableColumnMapping);
            return uploadUpdatable;
        }

        /**
         * Execute update request
         * @return Upload
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an upload object </td><td>  -  </td></tr>
         </table>
         */
        public Upload execute() throws ApiException {
            UploadUpdatable uploadUpdatable = buildBodyParams();
            ApiResponse<Upload> localVarResp = updateWithHttpInfo(uplId, uploadUpdatable);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute update request with HTTP info returned
         * @return ApiResponse&lt;Upload&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an upload object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Upload> executeWithHttpInfo() throws ApiException {
            UploadUpdatable uploadUpdatable = buildBodyParams();
            return updateWithHttpInfo(uplId, uploadUpdatable);
        }

        /**
         * Execute update request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an upload object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Upload> _callback) throws ApiException {
            UploadUpdatable uploadUpdatable = buildBodyParams();
            return updateAsync(uplId, uploadUpdatable, _callback);
        }
    }

    /**
     * Update
     * Update the details of an existing upload. You need only supply the unique identifier that was returned upon upload creation.
     * @param uplId id of the upload (required)
     * @param uploadUpdatable  (required)
     * @return UpdateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an upload object </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRequestBuilder update(String uplId) throws IllegalArgumentException {
        if (uplId == null) throw new IllegalArgumentException("\"uplId\" is required but got null");
            

        return new UpdateRequestBuilder(uplId);
    }
}

/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 
 *
 * The version of the OpenAPI document: 1.19.28
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.QrCodesGetSortedQrCodesResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class QrCodesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public QrCodesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public QrCodesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getSortedQrCodesCall(Integer limit, Integer offset, List<String> include, Map<String, String> dateCreated, Boolean scanned, List resourceIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/qr_code_analytics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        if (dateCreated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_created", dateCreated));
        }

        if (scanned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scanned", scanned));
        }

        if (resourceIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resource_ids", resourceIds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSortedQrCodesValidateBeforeCall(Integer limit, Integer offset, List<String> include, Map<String, String> dateCreated, Boolean scanned, List resourceIds, final ApiCallback _callback) throws ApiException {
        return getSortedQrCodesCall(limit, offset, include, dateCreated, scanned, resourceIds, _callback);

    }


    private ApiResponse<QrCodesGetSortedQrCodesResponse> getSortedQrCodesWithHttpInfo(Integer limit, Integer offset, List<String> include, Map<String, String> dateCreated, Boolean scanned, List resourceIds) throws ApiException {
        okhttp3.Call localVarCall = getSortedQrCodesValidateBeforeCall(limit, offset, include, dateCreated, scanned, resourceIds, null);
        Type localVarReturnType = new TypeToken<QrCodesGetSortedQrCodesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSortedQrCodesAsync(Integer limit, Integer offset, List<String> include, Map<String, String> dateCreated, Boolean scanned, List resourceIds, final ApiCallback<QrCodesGetSortedQrCodesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSortedQrCodesValidateBeforeCall(limit, offset, include, dateCreated, scanned, resourceIds, _callback);
        Type localVarReturnType = new TypeToken<QrCodesGetSortedQrCodesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSortedQrCodesRequestBuilder {
        private Integer limit;
        private Integer offset;
        private List<String> include;
        private Map<String, String> dateCreated;
        private Boolean scanned;
        private List resourceIds;

        private GetSortedQrCodesRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit How many results to return. (optional, default to 10)
         * @return GetSortedQrCodesRequestBuilder
         */
        public GetSortedQrCodesRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset An integer that designates the offset at which to begin returning results. Defaults to 0. (optional, default to 0)
         * @return GetSortedQrCodesRequestBuilder
         */
        public GetSortedQrCodesRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set include
         * @param include Request that the response include the total count by specifying &#x60;include&#x3D;[\&quot;total_count\&quot;]&#x60;.  (optional)
         * @return GetSortedQrCodesRequestBuilder
         */
        public GetSortedQrCodesRequestBuilder include(List<String> include) {
            this.include = include;
            return this;
        }
        
        /**
         * Set dateCreated
         * @param dateCreated Filter by date created. Accepted formats are ISO-8601 date or datetime, e.g. &#x60;{ \&quot;gt\&quot;: \&quot;2012-01-01\&quot;, \&quot;lt\&quot;: \&quot;2012-01-31T12:34:56Z\&quot; }&#x60; where &#x60;gt&#x60; is &gt;, &#x60;lt&#x60; is &lt;, &#x60;gte&#x60; is ≥, and &#x60;lte&#x60; is ≤. (optional)
         * @return GetSortedQrCodesRequestBuilder
         */
        public GetSortedQrCodesRequestBuilder dateCreated(Map<String, String> dateCreated) {
            this.dateCreated = dateCreated;
            return this;
        }
        
        /**
         * Set scanned
         * @param scanned Filter list of responses to only include QR codes with at least one scan event. (optional)
         * @return GetSortedQrCodesRequestBuilder
         */
        public GetSortedQrCodesRequestBuilder scanned(Boolean scanned) {
            this.scanned = scanned;
            return this;
        }
        
        /**
         * Set resourceIds
         * @param resourceIds Filter by the resource ID. (optional, default to [])
         * @return GetSortedQrCodesRequestBuilder
         */
        public GetSortedQrCodesRequestBuilder resourceIds(List resourceIds) {
            this.resourceIds = resourceIds;
            return this;
        }
        
        /**
         * Build call for getSortedQrCodes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of QR Codes and their analytics. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSortedQrCodesCall(limit, offset, include, dateCreated, scanned, resourceIds, _callback);
        }


        /**
         * Execute getSortedQrCodes request
         * @return QrCodesGetSortedQrCodesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of QR Codes and their analytics. </td><td>  -  </td></tr>
         </table>
         */
        public QrCodesGetSortedQrCodesResponse execute() throws ApiException {
            ApiResponse<QrCodesGetSortedQrCodesResponse> localVarResp = getSortedQrCodesWithHttpInfo(limit, offset, include, dateCreated, scanned, resourceIds);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSortedQrCodes request with HTTP info returned
         * @return ApiResponse&lt;QrCodesGetSortedQrCodesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of QR Codes and their analytics. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<QrCodesGetSortedQrCodesResponse> executeWithHttpInfo() throws ApiException {
            return getSortedQrCodesWithHttpInfo(limit, offset, include, dateCreated, scanned, resourceIds);
        }

        /**
         * Execute getSortedQrCodes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of QR Codes and their analytics. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<QrCodesGetSortedQrCodesResponse> _callback) throws ApiException {
            return getSortedQrCodesAsync(limit, offset, include, dateCreated, scanned, resourceIds, _callback);
        }
    }

    /**
     * List
     * Returns a list of your QR codes. The QR codes are returned sorted by scan date, with the most recently scanned QR codes appearing first.
     * @return GetSortedQrCodesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of QR Codes and their analytics. </td><td>  -  </td></tr>
     </table>
     */
    public GetSortedQrCodesRequestBuilder getSortedQrCodes() throws IllegalArgumentException {
        return new GetSortedQrCodesRequestBuilder();
    }
}
